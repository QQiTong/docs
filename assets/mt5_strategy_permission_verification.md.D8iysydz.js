import{_ as i,c as a,ag as n,o as t}from"./chunks/framework.CCnnzLsu.js";const g=JSON.parse('{"title":"交易拓展-5分钟剥头皮-EA权限验证加密算法","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mt5_strategy/permission_verification"}],["meta",{"property":"og:title","content":"交易拓展-5分钟剥头皮-EA权限验证加密算法"}]]},"headers":[],"relativePath":"mt5_strategy/permission_verification.md","filePath":"mt5_strategy/permission_verification.md","lastUpdated":null}'),h={name:"mt5_strategy/permission_verification.md"};function l(e,s,k,p,r,E){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="交易拓展-5分钟剥头皮-ea权限验证加密算法" tabindex="-1">交易拓展-5分钟剥头皮-EA权限验证加密算法 <a class="header-anchor" href="#交易拓展-5分钟剥头皮-ea权限验证加密算法" aria-label="Permalink to &quot;交易拓展-5分钟剥头皮-EA权限验证加密算法&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>大家好，今天讲解如何在EA（智能交易系统）中实现加密或授权功能，以“5分钟剥头皮”EA为例展开。此前公开分享过该策略的视频，有同学希望获取源码学习，但我更鼓励大家主动思考、学习新知识。因此，针对上传的代码，我会通过视频分享核心知识点，而非简单罗列全部代码。本文聚焦EA权限验证，介绍具体实现方法。</p><h2 id="一、常规权限验证方法" tabindex="-1">一、常规权限验证方法 <a class="header-anchor" href="#一、常规权限验证方法" aria-label="Permalink to &quot;一、常规权限验证方法&quot;">​</a></h2><h3 id="_1-许可证文件验证" tabindex="-1">1. 许可证文件验证 <a class="header-anchor" href="#_1-许可证文件验证" aria-label="Permalink to &quot;1. 许可证文件验证&quot;">​</a></h3><ul><li><strong>原理</strong>：将用户账户信息、有效期、资金门槛、硬件信息（如CPU/主板序列号）等权限属性写入许可文件，通过加密算法加密。EA启动时读取文件并验证有效性。</li><li><strong>缺点</strong>：需为每个新用户生成、传输许可文件，流程繁琐，人工成本较高。</li></ul><h3 id="_2-联网api接口验证-高阶方案" tabindex="-1">2. 联网API接口验证（高阶方案） <a class="header-anchor" href="#_2-联网api接口验证-高阶方案" aria-label="Permalink to &quot;2. 联网API接口验证（高阶方案）&quot;">​</a></h3><ul><li><strong>原理</strong>：将用户权限信息（如账户、有效期、角色等）存储在MySQL等关系型数据库中，EA通过HTTP请求访问服务器接口验证权限。</li><li><strong>优势</strong>：灵活度高，可定义多种角色（如中级API、高级API、管理员），支持动态添加用户、修改权限或删除异常用户，适合自动化管理。</li><li><strong>缺点</strong>：需掌握前后端开发、服务器及数据库知识，技术门槛高；需在MT5中配置允许访问的域名，增加用户操作成本。</li></ul><h2 id="二、折中方案-基于数字签名的本地验证" tabindex="-1">二、折中方案：基于数字签名的本地验证 <a class="header-anchor" href="#二、折中方案-基于数字签名的本地验证" aria-label="Permalink to &quot;二、折中方案：基于数字签名的本地验证&quot;">​</a></h2><h3 id="核心逻辑" tabindex="-1">核心逻辑 <a class="header-anchor" href="#核心逻辑" aria-label="Permalink to &quot;核心逻辑&quot;">​</a></h3><ol><li><strong>生成数字签名</strong>：通过加密算法对用户信息（如账户）生成唯一密钥，发送给用户。</li><li><strong>本地验证</strong>：EA运行时获取用户信息，按相同算法生成密钥，与用户输入的密钥对比，验证权限。</li></ol><h3 id="代码实现-以oninit-初始化验证为例" tabindex="-1">代码实现（以<code>OnInit()</code>初始化验证为例） <a class="header-anchor" href="#代码实现-以oninit-初始化验证为例" aria-label="Permalink to &quot;代码实现（以\`OnInit()\`初始化验证为例）&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. 检查交易模式：非实盘（回测/模拟账户）直接通过验证  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AccountInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ACCOUNT_TRADE_MODE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TRADE_MODE_REAL)  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INIT_SUCCEEDED);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 初始化成功  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. 验证有效期（示例逻辑，需根据实际需求实现）  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 此处可添加时间判断逻辑，如当前时间是否在授权有效期内  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. 验证交易平台（示例：仅限IC Markets平台）  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string serverName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ACCOUNT_SERVER);  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serverName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IC Markets&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INIT_FAILED);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 平台不匹配，初始化失败  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 4. 核心权限验证：账户密钥对比  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string userAccount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ACCOUNT_NUMBER);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string generatedKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GenerateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userAccount);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 生成密钥  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (generatedKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Parameters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PrivateKey&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 对比用户输入的密钥  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INIT_FAILED);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 密钥不匹配，初始化失败  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INIT_SUCCEEDED);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 所有验证通过，初始化成功  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="密钥生成方法-含加盐哈希" tabindex="-1">密钥生成方法（含加盐哈希） <a class="header-anchor" href="#密钥生成方法-含加盐哈希" aria-label="Permalink to &quot;密钥生成方法（含加盐哈希）&quot;">​</a></h4><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GenerateKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> account</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string salt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;固定盐值&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 硬编码盐值，需妥善保管  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> salt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 拼接账户与盐值  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 哈希加密（示例：SHA-256）+ Base64编码  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uint8 hash[SHA256_DIGEST_LENGTH];  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sha256</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((uint8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)data, data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), hash);  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Base64Encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hash, SHA256_DIGEST_LENGTH);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="关键技术点" tabindex="-1">关键技术点 <a class="header-anchor" href="#关键技术点" aria-label="Permalink to &quot;关键技术点&quot;">​</a></h3><ol><li><strong>加盐（Salt）</strong>：在密码学中，向明文或密钥添加随机数据，增加加密复杂度，防止彩虹表攻击。</li><li><strong>哈希算法</strong>： <ul><li><strong>SHA-256</strong>：比MD5更安全，抗碰撞能力强，输出固定长度哈希值（256位），单向不可逆。</li><li><strong>Base64编码</strong>：将二进制数据转换为文本，便于传输和存储（非加密，仅编码）。</li></ul></li></ol><h2 id="三、操作流程优化" tabindex="-1">三、操作流程优化 <a class="header-anchor" href="#三、操作流程优化" aria-label="Permalink to &quot;三、操作流程优化&quot;">​</a></h2><ul><li><strong>密钥生成脚本</strong>：将<code>GenerateKey</code>方法封装到独立脚本中，输入用户账户即可生成对应密钥，简化新用户授权流程。</li><li><strong>权限逻辑</strong>：实盘账户需验证密钥、有效期、平台等；模拟/回测环境跳过验证，降低测试成本。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文介绍了三种EA权限验证方案，重点实现了基于数字签名的本地验证方法，兼顾安全性与开发成本。通过加盐哈希和密钥对比，可有效控制EA在实盘环境的运行权限，同时为模拟/回测保留便利。实际应用中，可根据需求扩展验证规则（如资金门槛、硬件绑定等），提升EA授权管理的灵活性。</p>`,21)]))}const o=i(h,[["render",l]]);export{g as __pageData,o as default};
