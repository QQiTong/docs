import{_ as e,c as r,j as a,a as n,o}from"./chunks/framework.CCnnzLsu.js";const f=JSON.parse('{"title":"交易自动化","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/trading_automation/"}],["meta",{"property":"og:title","content":"交易自动化"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/trading_automation/index.md","filePath":"mq5_programming_for_traders/trading_automation/index.md","lastUpdated":1744387121000}'),i={name:"mq5_programming_for_traders/trading_automation/index.md"};function d(l,t,s,m,p,_){return o(),r("div",null,t[0]||(t[0]=[a("h1",{id:"交易自动化",tabindex:"-1"},[n("交易自动化 "),a("a",{class:"header-anchor",href:"#交易自动化","aria-label":'Permalink to "交易自动化"'},"​")],-1),a("p",null,"在这一部分，我们将研究 MQL5 API 中最为复杂且重要的组件，它能够实现交易操作的自动化。",-1),a("p",null,"我们将从描述一些实体开始，没有这些实体就无法编写合适的智能交易系统（Expert Advisor）。其中包括金融交易品种（financial symbols）和交易账户设置。",-1),a("p",null,"然后，我们会探讨内置的交易函数和数据结构，以及与智能交易系统特定相关的事件和操作模式。特别是，智能交易系统的关键特性是与测试器的集成，这使用户能够评估财务绩效并优化交易策略。我们将研究内部优化机制以及通过 API 进行的优化管理。",-1),a("p",null,"策略测试器是开发 MQL 程序的重要工具，因为它提供了在各种模式下调试程序的能力，这些模式包括基于模拟或真实报价（ticks）的柱线（bars）模式和报价模式，并且可以选择是否可视化价格流。",-1),a("p",null,"我们已经尝试过在可视化模式下测试指标。然而，对于指标来说，测试参数的设置范围是有限的。在开发智能交易系统时，我们将能够使用测试器的全部功能。",-1),a("p",null,"此外，我们还将接触到一种新的市场信息形式：市场深度（Depth of Market）及其软件接口。",-1)]))}const u=e(i,[["render",d]]);export{f as __pageData,u as default};
