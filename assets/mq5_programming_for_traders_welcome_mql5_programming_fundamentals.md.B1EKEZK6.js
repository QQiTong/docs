import{_ as e,c as r,ag as t,o}from"./chunks/framework.CCnnzLsu.js";const h=JSON.parse('{"title":"MQL5编程基础","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/welcome/mql5_programming_fundamentals"}],["meta",{"property":"og:title","content":"MQL5编程基础"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/welcome/mql5_programming_fundamentals.md","filePath":"mq5_programming_for_traders/welcome/mql5_programming_fundamentals.md","lastUpdated":1744387121000}'),n={name:"mq5_programming_for_traders/welcome/mql5_programming_fundamentals.md"};function l(m,a,i,d,p,s){return o(),r("div",null,a[0]||(a[0]=[t('<h1 id="mql5编程基础" tabindex="-1">MQL5编程基础 <a class="header-anchor" href="#mql5编程基础" aria-label="Permalink to &quot;MQL5编程基础&quot;">​</a></h1><p>如同其他编程语言，MQL5基于若干核心概念来构建更复杂的结构和完整的程序。本章节将学习大部分基础概念，包括数据类型、标识符、变量、表达式、运算符，以及组合多种语句构建程序运行逻辑的技巧。</p><p>本材料旨在帮助读者将<strong>过程式编程</strong>独立应用于实际问题解决。过程式编程是最早的编程范式之一，其本质是通过按特定顺序执行小步骤（语句）来形成数据处理程序。本书第一部分展示的文本脚本正是这种风格的典型示例。</p><p>本节涵盖MQL5编程所需的核心概念和工具，包含以下子章节：</p><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>数组提供结构化数据存储方式。本节讲解MQL5中数组的创建与使用基础。</p><h2 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h2><p>表达式构成计算和程序逻辑的基础。本小节学习如何在MQL5中构建和评估表达式。</p><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>数据类型转换是编程不可或缺的部分。&quot;类型转换&quot;章节详解MQL5中不同数据类型间的转换过程。</p><h2 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;语句&quot;">​</a></h2><p>语句是控制程序执行的指令。本节研究各类语句及其应用场景。</p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>函数实现代码结构化和复用。本章深入讲解MQL5中函数的创建与调用机制。</p><h2 id="预处理器" tabindex="-1">预处理器 <a class="header-anchor" href="#预处理器" aria-label="Permalink to &quot;预处理器&quot;">​</a></h2><p>MQL5预处理器在编译前处理源代码。&quot;预处理器&quot;章节阐释预处理器指令的使用原理及其对代码的影响。</p><p>过程式编程原则将作为后续学习更强大的**面向对象编程（OOP）**范式的基础，相关内容将在第三部分详细阐述。</p>',17)]))}const c=e(n,[["render",l]]);export{h as __pageData,c as default};
