import{_ as s,c as a,ag as t,o as l}from"./chunks/framework.CCnnzLsu.js";const g=JSON.parse('{"title":"基本数据类型","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mt5_quick_start/basic_grammar/data_type"}],["meta",{"property":"og:title","content":"基本数据类型"}]]},"headers":[],"relativePath":"mt5_quick_start/basic_grammar/data_type.md","filePath":"mt5_quick_start/basic_grammar/data_type.md","lastUpdated":1745411614000}'),e={name:"mt5_quick_start/basic_grammar/data_type.md"};function h(n,i,k,p,r,o){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h1><p>数据类型决定了数据的存储和处理方式，是编程的核心基础。以下是量化交易EA开发中高频使用的四种类型：</p><h2 id="一、数据类型的本质" tabindex="-1">一、数据类型的本质 <a class="header-anchor" href="#一、数据类型的本质" aria-label="Permalink to &quot;一、数据类型的本质&quot;">​</a></h2><p>计算机需要不同“容器”存储不同数据（如数字、文本），数据类型即定义了这些“容器”的规则：</p><ul><li><strong>整型</strong>：存储整数（如年龄、手数）</li><li><strong>浮点型</strong>：存储小数（如价格、指标值）</li><li><strong>字符串</strong>：存储文本（如交易品种、提示信息）</li><li><strong>布尔型</strong>：存储逻辑值（是/否、开/关）</li></ul><h2 id="二、核心数据类型详解" tabindex="-1">二、核心数据类型详解 <a class="header-anchor" href="#二、核心数据类型详解" aria-label="Permalink to &quot;二、核心数据类型详解&quot;">​</a></h2><h3 id="_1-整型" tabindex="-1">1. <strong>整型</strong> <a class="header-anchor" href="#_1-整型" aria-label="Permalink to &quot;1. **整型**&quot;">​</a></h3><ul><li><strong>作用</strong>：存储整数（正/负/零），无小数部分。</li><li><strong>语法</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 普通整型（-2147483648 ~ 2147483647）  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> largeNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 长整型（范围更大，一般用不到）</span></span></code></pre></div></li><li><strong>注意</strong>： <ul><li>禁止存储小数（如<code>int price = 18.5;</code>会编译警告，实际存储为<code>18</code>，导致精度丢失）。</li><li>适用场景：手数（<code>0.01</code>手需用浮点型，<code>1</code>手可用整型）、点差（如<code>5</code>点）、交易笔数。</li></ul></li></ul><h3 id="_2-浮点型-float" tabindex="-1">2. <strong>浮点型（float）</strong> <a class="header-anchor" href="#_2-浮点型-float" aria-label="Permalink to &quot;2. **浮点型（float）**&quot;">​</a></h3><ul><li><strong>作用</strong>：存储带小数的数据，分为单精度（<code>float</code>）和双精度（<code>double</code>）。</li><li><strong>语法</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rsi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 单精度（7位有效数字，如12345.67） 编译会报警告</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 19999.99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 双精度（15位有效数字，推荐使用）</span></span></code></pre></div></li><li><strong>区别</strong>： <ul><li><code>float</code>：精度低，速度略快，存储小数可能丢失精度（如<code>12345.6789</code>会被截断）。</li><li><code>double</code>：精度高，适应性强，量化中优先使用（价格、指标计算需高精度）。</li></ul></li><li><strong>实战</strong>：存储货币对价格（如<code>EURUSD=1.0750</code>）、盈亏金额（<code>-500.50</code>）。</li></ul><h3 id="_3-字符串" tabindex="-1">3. <strong>字符串</strong> <a class="header-anchor" href="#_3-字符串" aria-label="Permalink to &quot;3. **字符串**&quot;">​</a></h3><ul><li><strong>作用</strong>：存储文本内容，以英文双引号<code>&quot;</code>包裹。</li><li><strong>语法</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string symbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EURUSD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 交易品种  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;交易成功！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 提示信息</span></span></code></pre></div></li><li><strong>注意</strong>： <ul><li>区分大小写（<code>&quot;EURUSD&quot;</code>和<code>&quot;eurusd&quot;</code>是不同字符串）。</li><li>可包含特殊字符（如<code>&quot;BTC/USD&quot;</code>），但需用转义符处理特殊符号（后续课程讲解）。</li></ul></li><li><strong>应用</strong>：获取当前品种（<code>Symbol()</code>函数返回字符串）、日志信息记录。</li></ul><h3 id="_4-布尔型" tabindex="-1">4. <strong>布尔型</strong> <a class="header-anchor" href="#_4-布尔型" aria-label="Permalink to &quot;4. **布尔型**&quot;">​</a></h3><ul><li><strong>作用</strong>：存储逻辑状态，仅有两个值：<code>true</code>（真/是）和<code>false</code>（假/否）。</li><li><strong>语法</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isTradeEnable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是否允许交易  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 是否有错误</span></span></code></pre></div></li><li><strong>逻辑应用</strong>： <ul><li>条件判断（如<code>if (isTradeEnable) { 开仓; }</code>）。</li><li>状态控制（如<code>false</code>时停止策略运行）。</li></ul></li></ul><h2 id="三、实战案例与易错点" tabindex="-1">三、实战案例与易错点 <a class="header-anchor" href="#三、实战案例与易错点" aria-label="Permalink to &quot;三、实战案例与易错点&quot;">​</a></h2><ol><li><p><strong>整型误用导致的精度问题</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wrongPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 警告：自动截断为18，编译不报错但逻辑错误  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> correctPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 正确：使用双精度浮点型</span></span></code></pre></div></li><li><p><strong>布尔型的“开关”逻辑</strong></p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isNight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CheckTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 判断是否到23:00  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isNight) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StopTrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是则停止交易</span></span></code></pre></div></li><li><p><strong>字符串与数值的转换</strong></p><ul><li>数值转字符串：<code>string priceStr = (string)100.5;</code></li><li>字符串转数值：<code>double price = StringToDouble(&quot;100.5&quot;);</code></li></ul></li></ol>`,16)]))}const c=s(e,[["render",h]]);export{g as __pageData,c as default};
