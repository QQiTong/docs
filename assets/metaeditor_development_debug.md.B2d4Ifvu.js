import{_ as i,a as o,b as l,c as p,d as t}from"./chunks/break_debug_icon.DwF5IVBx.js";import{_ as a,a as s}from"./chunks/stop_debug_icon.BOp5tkUU.js";import{_ as r}from"./chunks/add_watch_icon.CHTvBBOZ.js";import{_ as m,c as d,aI as n,o as h}from"./chunks/framework.b7dag8kZ.js";const _="/metaeditor/debug_breakpoint.png",c="/metaeditor/breakpoint_goto.png",u="/metaeditor/start_debug_history_icon.png",g="/metaeditor/breakpoint_triggered_icon.png",b="/metaeditor/debug_start.png",f="/metaeditor/debug_watch.png",k="/metaeditor/debug_watch_autocomplete.png",v="/metaeditor/debug_watch_binary_hex.png",q="/metaeditor/debug_history_settings.png",w="/metaeditor/debug_history_run.png",x="/metaeditor/debug_history_running.png",C=JSON.parse('{"title":"代码调试","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/metaeditor/development/debug"}],["meta",{"property":"og:title","content":"代码调试"}]]},"headers":[],"relativePath":"metaeditor/development/debug.md","filePath":"metaeditor/development/debug.md","lastUpdated":1744293048000}'),P={name:"metaeditor/development/debug.md"};function y($,e,E,F,T,M){return h(),d("div",null,e[0]||(e[0]=[n('<h1 id="代码调试" tabindex="-1">代码调试 <a class="header-anchor" href="#代码调试" aria-label="Permalink to &quot;代码调试&quot;">​</a></h1><p>MetaEditor 拥有一个内置的调试器，允许您单步执行 (各个函数) 以便检验程序。 在代码中放置断点。 这些是应该暂停程序执行的地方。 然后在常规图表或 <a href="/metaeditor/development/debug#history">策略测试器</a> 中启动程序。 一旦程序到达断点，它就会暂停。 这允许您查看计算变量的值，然后继续单步执行程序检查算法。</p><ul><li><a href="/metaeditor/development/debug#settings">预设</a></li><li><a href="/metaeditor/development/debug#breakpoint">断点</a></li><li><a href="/metaeditor/development/debug#start">启动调试</a></li><li><a href="/metaeditor/development/debug#watch">观察表达式</a></li><li><a href="/metaeditor/development/debug#stack">查看调用堆栈</a></li><li><a href="/metaeditor/development/debug#step">单步调试</a></li><li><a href="/metaeditor/development/debug#stop">暂停，恢复并结束调试</a></li><li><a href="/metaeditor/development/debug#history">依据历史数据调试</a></li></ul><h2 id="settings" tabindex="-1">预设 <a class="header-anchor" href="#settings" aria-label="Permalink to &quot;预设{#settings}&quot;">​</a></h2><p>调试之前，在 <a href="/metaeditor/welcome/settings#debug">MetaEditor 设置</a> 中为常规参数设定。 您可以指定一个品种和图表周期，应用程序会在该图表调试。 每次开始调试时会临时创建这种图表，并在完成后立即将其删除。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>位于交易平台的 /profiles/templates 文件夹中的 debug.tpl 模板将被应用于调试图表。</p></div><h2 id="breakpoint" tabindex="-1">断点 <a class="header-anchor" href="#breakpoint" aria-label="Permalink to &quot;断点{#breakpoint}&quot;">​</a></h2><p>断点 是程序执行到达指定字符串时触发的命令。 该命令停止该字符串的执行。 断点允许检查指定代码区域中的程序行为: 查看变量值和函数堆栈。 随后，调试过程可以恢复或终止。</p><p>在启动调试之前，在程序代码中至少设置一个断点。 为此，请双击代码行左侧的灰色区域。 您也可以将光标放在行上并单击<img src="'+i+'" alt="切换断点"> 位于 <a href="/metaeditor/development/debug#breakpoint">调试</a> 菜单里的切换断点，或按 F9。 断点也以同样的方式禁用。</p><p><img src="'+_+'" alt="启用断点"></p><p>如果您需要跳转到程序停止执行的位置，请在调用堆栈查看窗口中双击函数。 还有，使用窗口关联菜单，可以打开当前调试程序中所有断点的列表:</p><p><img src="'+c+'" alt="跳至断点"></p><p>通过双击，您可以跳转到任何断点。</p><h2 id="start" tabindex="-1">启动调试 <a class="header-anchor" href="#start" aria-label="Permalink to &quot;启动调试{#start}&quot;">​</a></h2><p>若要运行调试, 请打开 <a href="/metaeditor/other/structure#main_file">程序主体文件</a> 或一个 <a href="/metaeditor/mql5storage/projects">项目</a> 。 调试可按照两种模式执行:</p><ul><li>依据真实数据。 调试启动<img src="'+a+'" alt="依据真实数据开始/恢复调试"> 位于 <a href="/metaeditor/development/debug#start">调试</a> 菜单里的依据真实数据开始命令，或按 F5。 在此模式, 调试程序运行在交易平台的 <a href="/metaeditor/development/debug#settings">特殊图表</a> 上。 使用来自服务器的价格数据在实际条件下执行调试。</li><li>依据历史数据。 调试启动<img src="'+u+'" alt="依据历史数据开始"> 位于 <a href="/metaeditor/development/debug#start">调试</a> 菜单里的依据历史数据开始命令，或按 Ctrl+F5。 这个模式下的程序会在策略测试中启用。使用它以任何期望的历史间隔测试程序性能，无需等待特定的市场条件。默认情况下使用非可视化测试模式，以避免在渲染图形元素时使用额外的资源。必要情况下，您可以在<a href="/metaeditor/welcome/settings#debug">MetaEditor设置</a>中启用可视化模式。</li></ul><p>一旦程序在调试模式下执行到达断点，它就会暂停。 暂停执行的行被标记为<img src="'+g+'" alt="触发断点"> 图标。 <a href="/metaeditor/workspace/toolbox#debug">调试</a> 选卡也出现在工具箱窗口中。 它的左边部分显示函数 <a href="/metaeditor/development/debug#stack">调用堆栈</a>。</p><p><img src="'+b+'" alt="启动调试后触发断点"></p><h2 id="watch" tabindex="-1">观察表达式 <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;观察表达式{#watch}&quot;">​</a></h2><p>在调试过程中，可以在当前程序执行步骤中跟踪各种表达式 (变量) 的值。 工具箱窗口的 <a href="/metaeditor/workspace/toolbox#debug">调试</a> 选卡右侧显示相应的结果。 若要跟踪表达式数值，请将其添加到观察值中:</p><ul><li>在调试过程中，将光标置于源代码中的表达式上，然后单击<img src="'+r+'" alt="添加关注">在关联菜单中添加观察。</li><li>点击<img src="'+r+'" alt="添加">在调试选项卡右侧的关联菜单中添加。 在新出现的行中输入表达式名称。</li><li>若要更改所跟踪表达式的名称，请双击它。</li></ul><p><img src="'+f+'" alt="查看堆栈和表达式值"></p><p>您还可以在调试器观察列表中启用自动显示局部变量。可以通过快捷菜单的“本地”命令启用此显示。随着调试器操作在代码中进行，当前作用域中的变量会自动显示在列表中。</p><p>在表达式观察窗口中，可以执行简单的数学计算 (加、减、乘、除)，也可以查看指定数组下标处的值，例如指定A[3][4] 项，其中 A 是一个数组名称，而 3 和 4 是其维度中的位置。 将对象添加到所观察的表达式时，我们可以在末尾指定完全停止，或单击 Ctrl+空格来查看其成员的列表:</p><p><img src="'+k+'" alt="插入对象成员"></p><p>要查看任何数组或对象的内容，请在观察窗口双击该数组或对象。</p><p>默认情况下，整数以十进制形式显示在观察窗口中。 若要以二进制或十六进制形式显示值，请在表达式字段中相应地指定逗号分隔的 b 或 x 修饰符。</p><p><img src="'+v+'" alt="以二进制和十六进制形式查看表达式"></p><h2 id="stack" tabindex="-1">查看调用堆栈 <a class="header-anchor" href="#stack" aria-label="Permalink to &quot;查看调用堆栈{#stack}&quot;">​</a></h2><p>从子程序 (嵌套函数) 向程序 (主事件处理程序 OnInit，OnTick 等) 返回控制的数据要在调用堆栈中指定。 该堆栈允许您跟踪 <a href="https://www.mql5.com/zh/docs/runtime/event_fire" target="_blank" rel="noreferrer">交易平台中事件发生</a> 的整个顺序，直到调用指定函数。</p><p>每个函数都显示以下数据:</p><ul><li>发起函数调用的文件名。</li><li>函数名称。</li><li>文件中调用该函数的行号。</li></ul><h2 id="step" tabindex="-1">单步调试 <a class="header-anchor" href="#step" aria-label="Permalink to &quot;单步调试{#step}&quot;">​</a></h2><p><a href="/metaeditor/main_menu/main_menu_debug">调试</a> 菜单或 <a href="/metaeditor/toolbar/toolbar_standard">标准</a> 工具栏命令用于单步调试，并具有查看调用堆栈的能力:</p><ul><li><img src="'+o+'" alt="步进"> 步进 ― 程序执行前移一步并进入被调用函数。 与按 F11 键执行相同的动作。</li><li><img src="'+l+'" alt="步跃"> 步跃 ― 程序执行前移一步但不进入被调用函数。 与按 F10 键执行相同的动作。</li><li><img src="'+p+'" alt="退出"> 步出 ― 单步执行高一级程序。 与按 Shift+F11 键执行相同的动作。</li></ul><p>仅当程序在调试模式下暂停后，才能使用单步调试命令:</p><ul><li>触发断点后。</li><li>程序被手动暂停后<img src="'+t+'" alt="暂停"> 位于 <a href="/metaeditor/main_menu/main_menu_debug">调试</a>) 菜单里的暂停命令，或按 Break。</li></ul><p>事件继续发生 <a href="https://www.mql5.com/zh/docs/runtime/event_fire" title="交易平台中的事件" target="_blank" rel="noreferrer">在交易平台里</a> 即使程序处于断点。 所有发生的事件都放入一个队列中，在当前事件处理程序退出代码后继续使用智能系统进行处理。</p><h2 id="stop" tabindex="-1">暂停，恢复并结束调试 <a class="header-anchor" href="#stop" aria-label="Permalink to &quot;暂停，恢复并结束调试{#stop}&quot;">​</a></h2><p>一旦执行抵达带有断点的字符串，程序就会在调试过程中自动停止。 调试也可以手动管理:</p><ul><li><p>暂停执行<br> 调试过程中的程序执行可以手动暂停，这是通过使用<img src="'+t+'" alt="暂停"> 位于 <a href="/metaeditor/main_menu/main_menu_debug">调试</a> 菜单里的暂停命令，或按 Break。 暂停后，您可以应用单步调试命令。</p></li><li><p>恢复执行<br> 若要在暂停后恢复程序执行，请单击<img src="'+a+'" alt="恢复"> 位于 <a href="/metaeditor/main_menu/main_menu_debug">调试</a> 菜单里的恢复，或按 F5。</p></li><li><p>完成调试<br> 若要停止调试, 点击 <img src="'+s+'" alt="停止"> 位于 <a href="/metaeditor/main_menu/main_menu_debug">调试</a> 菜单里的停止，或按 Shift+F5。 该程序将从启动调试时所加载的 <a href="/metaeditor/development/debug#settings">特别图表</a> 中删除，而图表本身也被关闭。</p></li><li><p>没有源 MQ4、MQ5 和 MQH 文件，调试是不可能的。</p></li><li><p>不建议分发调试过程中得到的可执行 EX4/EX5 文件。</p></li></ul><h2 id="history" tabindex="-1">依据历史数据调试 <a class="header-anchor" href="#history" aria-label="Permalink to &quot;依据历史数据调试{#history}&quot;">​</a></h2><p>除了实时价格数据外，交易机器人和技术指标的调试也可以依据历史数据进行。 任何程序都可以根据所需的历史数据进行测试，而无需实时等待某些交易事件。</p><p>依据历史数据调试在策略测试器中以可视化测试模式运行。 基于测试器中模拟的时间序列，或累积的历史逐笔报价 (从经纪商收到)，在图表上执行应用程序。</p><p>若要开始依据历史数据调试, 在 <a href="/metaeditor/welcome/settings#debug">MetaEditor 设置</a> 中设置测试参数。</p><p><img src="'+q+'" alt="配置依据历史数据调试"></p><p>在代码中设置断点，然后使用历史价格开始调试。</p><p><img src="'+w+'" alt="启动依据历史数据调试"></p><p>这将启动可视化测试和调试过程。</p><p><img src="'+x+'" alt="依据历史数据调试"></p>',50)]))}const N=m(P,[["render",y]]);export{C as __pageData,N as default};
