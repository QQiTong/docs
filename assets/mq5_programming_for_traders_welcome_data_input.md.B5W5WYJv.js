import{_ as a,c as s,aI as e,o as t}from"./chunks/framework.b7dag8kZ.js";const r="/images/mq5_programming_for_traders/MQL5-Programming-for-Traders-9-1.png",g=JSON.parse('{"title":"数据输入","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/welcome/data_input"}],["meta",{"property":"og:title","content":"数据输入"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/welcome/data_input.md","filePath":"mq5_programming_for_traders/welcome/data_input.md","lastUpdated":1745411614000}'),n={name:"mq5_programming_for_traders/welcome/data_input.md"};function o(l,i,p,h,d,c){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="数据输入" tabindex="-1">数据输入 <a class="header-anchor" href="#数据输入" aria-label="Permalink to &quot;数据输入&quot;">​</a></h1><p>在MQL程序中，数据传输的基本方式是使用输入参数。这些参数在许多方面类似于函数参数和变量，特别是在描述语法和代码中使用原则方面。</p><h2 id="输入参数的特点" tabindex="-1">输入参数的特点 <a class="header-anchor" href="#输入参数的特点" aria-label="Permalink to &quot;输入参数的特点&quot;">​</a></h2><p>输入参数的描述有几个重要区别：</p><ol><li><strong>位置要求</strong><br> 必须放置在所有代码块之外（即不包含在任何大括号<code>{}</code>内），通常在源代码开头；</li><li><strong>关键字</strong><br> 使用<code>input</code>关键字声明；</li><li><strong>默认值</strong><br> 必须初始化默认值。</li></ol><p>建议将输入参数放在源代码起始位置，紧接在<code>#property</code>指令之后。</p><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#property script_show_inputs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GreetingHour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="关键特性说明" tabindex="-1">关键特性说明 <a class="header-anchor" href="#关键特性说明" aria-label="Permalink to &quot;关键特性说明&quot;">​</a></h3><ul><li><strong>全局变量</strong><br><code>GreetingHour</code>成为全局变量，可在代码任何位置（包括函数内部）访问；</li><li><strong>用户界面可见性</strong><br> 使用<code>input</code>关键字后，该参数会显示在MQL5程序的属性对话框中，用户可在启动时修改值；</li><li><strong>默认值机制</strong><br> 代码中指定的默认值会显示在对话框中，但用户修改后的新值将覆盖默认值；</li><li><strong>程序类型差异</strong><br> 指标（Indicators）和专家顾问（Expert Advisors）会记住最后一次设置，而脚本（Scripts）需要在代码中添加<code>#property script_show_inputs</code>指令才能显示参数对话框。</li></ul><h2 id="运行时错误示例" tabindex="-1">运行时错误示例 <a class="header-anchor" href="#运行时错误示例" aria-label="Permalink to &quot;运行时错误示例&quot;">​</a></h2><p>当在<code>Greeting</code>函数中使用输入参数时：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GreetingHour), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果用户输入<code>100</code>作为小时数，将触发数组越界错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>GoodTime1 (EURUSD,H1)        array out of range in &#39;GoodTime1.mq5&#39; (19,18)</span></span></code></pre></div><p>错误说明：<br> 程序试图访问数组中不存在的索引位置（第19行第18列），这是因为<code>Greeting</code>函数中的时间判断逻辑未处理非法值。</p><blockquote><p><strong>注意</strong>：错误调试是编程的重要环节，需要学会定位和修复这类运行时错误。</p></blockquote><h2 id="参数对话框示例" tabindex="-1">参数对话框示例 <a class="header-anchor" href="#参数对话框示例" aria-label="Permalink to &quot;参数对话框示例&quot;">​</a></h2><p>（原图描述：显示脚本GoodTime1.mq5的参数输入对话框）</p><p><img src="`+r+'" alt=""></p><p>当脚本启动时，用户可在此对话框修改<code>GreetingHour</code>的值。例如：</p><ul><li>输入<code>10</code>会输出：&quot;Good afternoon, EURUSD&quot;</li><li>输入<code>100</code>会导致数组越界错误</li></ul><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><ol><li>始终为输入参数设置合理的默认值</li><li>在脚本中必须添加<code>#property script_show_inputs</code>指令</li><li>在代码中添加参数合法性检查</li><li>不同程序类型要注意参数持久化特性的差异</li></ol>',24)]))}const u=a(n,[["render",o]]);export{g as __pageData,u as default};
