import{_ as i,c as a,ag as e,o as s}from"./chunks/framework.CCnnzLsu.js";const g=JSON.parse('{"title":"语句、代码块和函数","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/welcome/statements"}],["meta",{"property":"og:title","content":"语句、代码块和函数"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/welcome/statements.md","filePath":"mq5_programming_for_traders/welcome/statements.md","lastUpdated":1744557359000}'),l={name:"mq5_programming_for_traders/welcome/statements.md"};function o(n,t,r,d,h,p){return s(),a("div",null,t[0]||(t[0]=[e(`<h1 id="语句、代码块和函数" tabindex="-1">语句、代码块和函数 <a class="header-anchor" href="#语句、代码块和函数" aria-label="Permalink to &quot;语句、代码块和函数&quot;">​</a></h1><p>在向导生成的脚本中，<code>OnStart</code>函数结构如下：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是我们在MQL5编程中接触的第一个核心概念。这里涉及几个需要解释的新概念和符号序列。</p><h2 id="程序运行阶段" tabindex="-1">程序运行阶段 <a class="header-anchor" href="#程序运行阶段" aria-label="Permalink to &quot;程序运行阶段&quot;">​</a></h2><p>一个典型程序运行时通常包含以下阶段：</p><ol><li><strong>定义变量</strong> - 在内存中创建命名存储单元</li><li><strong>组织数据输入</strong></li><li><strong>数据处理</strong> - 应用算法</li><li><strong>组织结果输出</strong></li></ol><p>不过这些阶段并非语法强制的。例如计算<code>2*2</code>的程序可能不需要输入数据和变量，但这类程序缺乏实际功能。</p><h2 id="函数的作用" tabindex="-1">函数的作用 <a class="header-anchor" href="#函数的作用" aria-label="Permalink to &quot;函数的作用&quot;">​</a></h2><p>程序语句可以通过<strong>函数</strong>进行组织管理。函数具有以下特点：</p><ul><li>是包含语句的命名代码块</li><li>可通过名称调用执行</li><li>支持代码复用和模块化设计</li></ul><h3 id="onstart函数的特殊性" tabindex="-1">OnStart函数的特殊性 <a class="header-anchor" href="#onstart函数的特殊性" aria-label="Permalink to &quot;OnStart函数的特殊性&quot;">​</a></h3><p><code>OnStart</code>函数在脚本中有特殊地位：</p><ul><li>是脚本的入口函数（类似C语言的main函数）</li><li>当用户通过右键菜单或拖放方式启动脚本时，终端会自动调用</li><li><strong>必须存在于所有脚本中</strong>，否则编译会报错</li></ul><h2 id="函数语法解析" tabindex="-1">函数语法解析 <a class="header-anchor" href="#函数语法解析" aria-label="Permalink to &quot;函数语法解析&quot;">​</a></h2><p>以当前空函数为例：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="关键组成部分" tabindex="-1">关键组成部分 <a class="header-anchor" href="#关键组成部分" aria-label="Permalink to &quot;关键组成部分&quot;">​</a></h3><ol><li><p><strong>返回类型</strong> <code>void</code></p><ul><li>表示不返回任何值</li><li>其他类型如<code>int</code>,<code>double</code>需要对应返回值</li></ul></li><li><p><strong>函数名</strong> <code>OnStart</code></p><ul><li>系统保留名称</li><li>区分大小写</li></ul></li><li><p><strong>参数列表</strong> <code>()</code></p><ul><li>当前为空表示不需要参数</li><li>参数用于接收外部输入值</li></ul></li><li><p><strong>函数体</strong> <code>{}</code></p><ul><li>包含实际执行语句</li><li>当前空大括号表示空实现</li></ul></li></ol><h2 id="编译与执行" tabindex="-1">编译与执行 <a class="header-anchor" href="#编译与执行" aria-label="Permalink to &quot;编译与执行&quot;">​</a></h2><ol><li><p><strong>编译结果</strong></p><ul><li>生成<code>Hello.ex5</code>文件于<code>Scripts/MQL5Book/p1</code>目录</li><li>可在终端导航器中查看</li></ul></li><li><p><strong>运行表现</strong></p><ul><li>终端日志显示：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Scripts        script Hello (EURUSD,H1) loaded successfully</span></span>
<span class="line"><span>Scripts        script Hello (EURUSD,H1) removed</span></span></code></pre></div><ul><li>加载后立即退出，因没有实际功能</li></ul></li></ol><h2 id="扩展说明" tabindex="-1">扩展说明 <a class="header-anchor" href="#扩展说明" aria-label="Permalink to &quot;扩展说明&quot;">​</a></h2><table tabindex="0"><thead><tr><th>概念</th><th>说明</th></tr></thead><tbody><tr><td>代码块</td><td>用<code>{}</code>包裹的语句集合</td></tr><tr><td>保留字</td><td><code>void</code>等编译器专用关键词</td></tr><tr><td>函数参数</td><td>后续章节详细介绍参数传递机制</td></tr><tr><td>EX5文件</td><td>MQL5编译后的可执行格式</td></tr></tbody></table><blockquote><p><strong>注意</strong>：虽然空函数可以编译通过，但实际开发中需要在大括号<code>{}</code>内添加功能代码来实现具体交易逻辑。后续章节将逐步介绍如何添加有效语句。</p></blockquote>`,24)]))}const k=i(l,[["render",o]]);export{g as __pageData,k as default};
