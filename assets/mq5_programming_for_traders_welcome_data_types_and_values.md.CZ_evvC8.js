import{_ as i,c as a,ag as t,o as n}from"./chunks/framework.CCnnzLsu.js";const g=JSON.parse('{"title":"数据类型与值","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/welcome/data_types_and_values"}],["meta",{"property":"og:title","content":"数据类型与值"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/welcome/data_types_and_values.md","filePath":"mq5_programming_for_traders/welcome/data_types_and_values.md","lastUpdated":1744557359000}'),e={name:"mq5_programming_for_traders/welcome/data_types_and_values.md"};function h(l,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="数据类型与值" tabindex="-1">数据类型与值 <a class="header-anchor" href="#数据类型与值" aria-label="Permalink to &quot;数据类型与值&quot;">​</a></h1><p>在调用内置函数<code>Symbol</code>的同时，我们也可以使用在源代码中自定义的函数。假设我们想根据一天中的不同时段（精确到小时）在日志中打印不同的问候语：0-8点为早晨，8-16点为下午，16-24点为晚上。</p><h2 id="函数定义" tabindex="-1">函数定义 <a class="header-anchor" href="#函数定义" aria-label="Permalink to &quot;函数定义&quot;">​</a></h2><p>通过模仿<code>OnStart</code>函数的定义结构，我们可以创建一个返回字符串的<code>Greeting</code>函数。MQL5中字符串类型使用关键字<code>string</code>表示，整型使用<code>int</code>。</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 函数体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="逻辑实现" tabindex="-1">逻辑实现 <a class="header-anchor" href="#逻辑实现" aria-label="Permalink to &quot;逻辑实现&quot;">​</a></h2><p>函数需要通过<code>return</code>语句返回对应的问候语字符串。使用条件判断语句处理不同时间段的问候逻辑：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Good morning&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Good afternoon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Good evening&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="关键说明" tabindex="-1">关键说明 <a class="header-anchor" href="#关键说明" aria-label="Permalink to &quot;关键说明&quot;">​</a></h2><ol><li><p><strong>参数传递</strong><br> 函数需要接收<code>int</code>类型的hour参数，表示当前小时数（0-23）</p></li><li><p><strong>边界处理</strong></p><ul><li>早晨：0 ≤ hour &lt; 8</li><li>下午：8 ≤ hour &lt; 16</li><li>晚上：16 ≤ hour &lt; 24</li></ul></li><li><p><strong>返回值</strong><br> 使用<code>return</code>语句返回对应时段的字符串字面量，字符串类型会自动匹配<code>string</code>返回值类型</p></li><li><p><strong>函数调用</strong><br> 在其他函数（如<code>OnStart</code>）中获取当前时间后调用：</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentHour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().hour;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 获取本地时间的小时数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentHour);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="数据类型对比" tabindex="-1">数据类型对比 <a class="header-anchor" href="#数据类型对比" aria-label="Permalink to &quot;数据类型对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td><code>void</code></td><td>无返回值类型</td><td>用于函数声明</td></tr><tr><td><code>string</code></td><td>字符串类型</td><td>&quot;Good morning&quot;</td></tr><tr><td><code>int</code></td><td>整型（32位有符号整数）</td><td>0, 15, 23</td></tr></tbody></table><blockquote><p><strong>注意</strong>：当函数声明了非void的返回类型时，必须包含有效的<code>return</code>语句。返回值类型必须与函数声明类型严格匹配。</p></blockquote>`,13)]))}const E=i(e,[["render",h]]);export{g as __pageData,E as default};
