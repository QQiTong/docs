import{_ as t}from"./chunks/generate_mqh_icon.Ck-lyqQy.js";import{_ as a,c as r,aI as o,o as i}from"./chunks/framework.b7dag8kZ.js";const u=JSON.parse('{"title":"生成头文件","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/metaeditor/development/generate_mqh"}],["meta",{"property":"og:title","content":"生成头文件"}]]},"headers":[],"relativePath":"metaeditor/development/generate_mqh.md","filePath":"metaeditor/development/generate_mqh.md","lastUpdated":1744293048000}'),l={name:"metaeditor/development/generate_mqh.md"};function m(n,e,s,p,d,h){return i(),r("div",null,e[0]||(e[0]=[o('<h1 id="生成头文件" tabindex="-1">生成头文件 <a class="header-anchor" href="#生成头文件" aria-label="Permalink to &quot;生成头文件&quot;">​</a></h1><p>MetaEditor 提供从当前文件的导出函数生成头文件 (*.mqh) 的功能。 它可以让其他用户轻松访问您的函数，而无需透露其源代码。 要做到这一点，只需提供一个生成的 mqh 文件和一个其内实现了函数的完成 EX4/EX5 文件。</p><h2 id="生成过程" tabindex="-1">生成过程 <a class="header-anchor" href="#生成过程" aria-label="Permalink to &quot;生成过程&quot;">​</a></h2><p>打开 MQ4/MQ5 文件并单击<img src="'+t+'" alt="生成 mqh 文件"> 位于 <a href="/metaeditor/main_menu/main_menu_tools">工具</a>菜单里的生成头文件。 mqh 文件按以下方式生成:</p><ul><li>当前打开的文件包扩所有含 <a href="https://www.mql5.com/zh/docs/basis/function/export" target="_blank" rel="noreferrer">export</a> 后置修饰符的函数。</li><li>带有 <a href="https://www.mql5.com/zh/docs/basis/preprosessor/import" target="_blank" rel="noreferrer">#import</a> 指令的头文件并生成检测到的函数描述。</li><li>如果未找到导出函数，则显示相应的消息。</li><li>如果源文件位于 /Libraries 文件夹中，则 #import 指令中的模块名称是自 /Libraries 目录的相对路径。 如果一个文件位于另一个目录中，则只在 #import 中替换 EX4/EX5 文件名。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果当前文件是一个头文件 (*.mqh) ，则生成命令不起作用。</p></div><h2 id="生成路径" tabindex="-1">生成路径 <a class="header-anchor" href="#生成路径" aria-label="Permalink to &quot;生成路径&quot;">​</a></h2><p>mqh 文件的创建目录取决于源文件的位置:</p><ul><li>如果当前文件位于 /Libraries 目录或其某个子目录中，则直接在 /Include 文件夹中生成头文件。</li><li>如果源文件位于其它目录中，则会在同一位置生成头文件。</li></ul>',9)]))}const f=a(l,[["render",m]]);export{u as __pageData,f as default};
