import{_ as e,c as r,aI as t,o}from"./chunks/framework.b7dag8kZ.js";const _=JSON.parse('{"title":"MQL5编程基础","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/mql5_programming_fundamentals/"}],["meta",{"property":"og:title","content":"MQL5编程基础"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/mql5_programming_fundamentals/index.md","filePath":"mq5_programming_for_traders/mql5_programming_fundamentals/index.md","lastUpdated":1744557359000}'),n={name:"mq5_programming_for_traders/mql5_programming_fundamentals/index.md"};function i(l,a,d,h,s,m){return o(),r("div",null,a[0]||(a[0]=[t('<h1 id="mql5编程基础" tabindex="-1">MQL5编程基础 <a class="header-anchor" href="#mql5编程基础" aria-label="Permalink to &quot;MQL5编程基础&quot;">​</a></h1><p>与其他编程语言一样，MQL5基于一些基础概念，这些概念用于创建更复杂的结构，并最终构建完整的程序。在本部分中，我们将学习大多数核心概念，例如数据类型、标识符、变量、表达式和运算符，以及如何在代码中组合各种语句以构建所需的程序操作逻辑。</p><p>这些内容帮助读者逐步独立实际应用<strong>过程式编程</strong>——这是解决各类问题的最早编程范式之一。实际上，过程式编程是通过按所需顺序执行小步骤（语句）来处理数据，从而构建程序的过程。本书第1部分展示的文本脚本就是这种编程风格的示例。</p><p>本节涵盖了成功进行MQL5编程所需的广泛基础概念和工具，包括以下子主题：</p><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><p>标识符是所有程序代码的基础。本小节讨论MQL5中标识符的命名目的和规则。</p><h2 id="内置数据类型" tabindex="-1">内置数据类型 <a class="header-anchor" href="#内置数据类型" aria-label="Permalink to &quot;内置数据类型&quot;">​</a></h2><p>MQL5包含多种内置数据类型，每种类型旨在存储和处理特定类型的信息。本节全面介绍基本数据类型的概念。</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>变量用于在程序中存储和管理数据。“变量”小节介绍变量的基础知识，包括如何声明、初始化变量并为其赋值。</p><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>数组提供了一种结构化的数据存储方式。本节涵盖MQL5中创建和使用数组的基础知识。</p><h2 id="表达式" tabindex="-1">表达式 <a class="header-anchor" href="#表达式" aria-label="Permalink to &quot;表达式&quot;">​</a></h2><p>表达式是计算和程序逻辑的基础。通过本小节，你将学习如何在MQL5中构造和计算表达式。</p><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>数据类型转换是编程的重要组成部分。“类型转换”小节介绍MQL5中不同数据类型之间转换的相关过程。</p><h2 id="语句" tabindex="-1">语句 <a class="header-anchor" href="#语句" aria-label="Permalink to &quot;语句&quot;">​</a></h2><p>语句是控制程序执行的命令。本节将探讨各种类型的语句及其应用场景。</p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p>函数支持代码结构化和复用。本节深入讲解MQL5中创建和调用函数的基础知识。</p><h2 id="预处理器" tabindex="-1">预处理器 <a class="header-anchor" href="#预处理器" aria-label="Permalink to &quot;预处理器&quot;">​</a></h2><p>MQL5预处理器在编译前处理源代码。“预处理器”小节描述预处理器指令的使用原则及其对代码的影响。</p><p>过程式编程原则将作为后续学习更强大范式（即<strong>面向对象编程（OOP）</strong>）的基础，这将在第3部分中讨论。</p>',23)]))}const c=e(n,[["render",i]]);export{_ as __pageData,c as default};
