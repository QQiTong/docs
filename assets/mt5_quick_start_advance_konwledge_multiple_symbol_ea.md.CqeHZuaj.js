import{_ as e,c as t,aI as i,o as l}from"./chunks/framework.b7dag8kZ.js";const o="/assets/1.CCNwADjw.png",g=JSON.parse('{"title":"构建多交易品种EA","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mt5_quick_start/advance_konwledge/multiple_symbol_ea"}],["meta",{"property":"og:title","content":"构建多交易品种EA"}]]},"headers":[],"relativePath":"mt5_quick_start/advance_konwledge/multiple_symbol_ea.md","filePath":"mt5_quick_start/advance_konwledge/multiple_symbol_ea.md","lastUpdated":1745411614000}'),s={name:"mt5_quick_start/advance_konwledge/multiple_symbol_ea.md"};function r(n,a,d,c,h,p){return l(),t("div",null,a[0]||(a[0]=[i('<h1 id="构建多交易品种ea" tabindex="-1">构建多交易品种EA <a class="header-anchor" href="#构建多交易品种ea" aria-label="Permalink to &quot;构建多交易品种EA&quot;">​</a></h1><h2 id="一、问题背景" tabindex="-1">一、问题背景 <a class="header-anchor" href="#一、问题背景" aria-label="Permalink to &quot;一、问题背景&quot;">​</a></h2><p>在量化交易中，经常需要在一个EA（智能交易系统）中运行多个交易策略，以实现以下目标：</p><ol><li><strong>多品种组合</strong>：同一策略在不同交易品种（如EURUSD、BTCUSD、US500）上的差异化参数配置。</li><li><strong>多周期管理</strong>：同一策略在不同时间周期（如M15、H1、D1）上的独立运行。</li><li><strong>绩效合并</strong>：将多个策略的交易结果合并，生成统一的资金曲线、胜率、回撤等指标，便于投资组合分析。</li></ol><p>传统方法（如MT5市场扫描）存在以下局限：</p><ul><li><strong>参数固定</strong>：只能使用同一组参数在不同品种上回测，无法针对每个品种定制参数。</li><li><strong>结果分离</strong>：不同品种的回测结果独立，无法直接合并生成整体绩效报告。</li><li><strong>资源消耗</strong>：每个策略需独立运行，占用多个图表和计算机资源。</li></ul><p>本章将通过面向对象编程（OOP）实现多品种EA，解决上述问题。</p><p><img src="'+o+'" alt=""></p><h2 id="二、核心思路-策略类封装与数组管理" tabindex="-1">二、核心思路：策略类封装与数组管理 <a class="header-anchor" href="#二、核心思路-策略类封装与数组管理" aria-label="Permalink to &quot;二、核心思路：策略类封装与数组管理&quot;">​</a></h2><h3 id="_1-策略类设计" tabindex="-1">1. 策略类设计 <a class="header-anchor" href="#_1-策略类设计" aria-label="Permalink to &quot;1. 策略类设计&quot;">​</a></h3><p>将每个交易策略抽象为一个类，包含以下要素：</p><ul><li><strong>成员变量</strong>：存储策略的核心参数（如Magic Number、止损、指标周期等）。</li><li><strong>成员函数</strong>：实现策略的核心逻辑（如初始化、订单处理、销毁）。</li><li><strong>构造函数</strong>：初始化策略参数，支持硬编码或用户输入两种方式。</li></ul><h3 id="_2-多策略管理" tabindex="-1">2. 多策略管理 <a class="header-anchor" href="#_2-多策略管理" aria-label="Permalink to &quot;2. 多策略管理&quot;">​</a></h3><p>使用数组存储多个策略对象，并在系统回调函数（如<code>OnTick()</code>）中循环调用每个对象的方法。<br><strong>核心逻辑</strong>：</p><ol><li><strong>策略初始化</strong>：在<code>OnInit()</code>中创建策略对象数组。</li><li><strong>策略执行</strong>：在<code>OnTick()</code>中遍历数组，调用每个对象的<code>OnTick()</code>方法。</li><li><strong>资源释放</strong>：在<code>OnDeinit()</code>中销毁数组中的对象。</li></ol><h2 id="五、代码实现与注意事项" tabindex="-1">五、代码实现与注意事项 <a class="header-anchor" href="#五、代码实现与注意事项" aria-label="Permalink to &quot;五、代码实现与注意事项&quot;">​</a></h2><h3 id="_1-完整代码框架" tabindex="-1">1. 完整代码框架 <a class="header-anchor" href="#_1-完整代码框架" aria-label="Permalink to &quot;1. 完整代码框架&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#</span></span></code></pre></div>',18)]))}const u=e(s,[["render",r]]);export{g as __pageData,u as default};
