import{_ as i,c as a,aI as n,o as p}from"./chunks/framework.b7dag8kZ.js";const c=JSON.parse('{"title":"经济日历","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/advanced_language_tools/economic_calendar"}],["meta",{"property":"og:title","content":"经济日历"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/advanced_language_tools/economic_calendar.md","filePath":"mq5_programming_for_traders/advanced_language_tools/economic_calendar.md","lastUpdated":1744387121000}'),l={name:"mq5_programming_for_traders/advanced_language_tools/economic_calendar.md"};function t(e,s,h,k,E,d){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="经济日历" tabindex="-1">经济日历 <a class="header-anchor" href="#经济日历" aria-label="Permalink to &quot;经济日历&quot;">​</a></h1><p>在制定交易策略时，最好考虑那些会影响市场的基本面因素。MetaTrader 5 有一个内置的经济日历，在程序界面中，它作为工具栏里的一个独立选项卡可供使用，同时也可以选择以标签的形式直接显示在图表上。可以通过终端设置对话框中 “社区” 选项卡上的一个单独标志来启用该日历（无需登录社区）。</p><p>由于 MetaTrader 5 支持算法交易，经济日历中的事件也可以通过 MQL5 API 以编程方式进行访问。在本章中，我们将介绍一些函数和数据结构，它们能够实现对经济事件的读取、筛选以及对其变化的监控。</p><p>经济日历包含了许多国家的宏观经济指标的描述、发布时间安排以及历史数值。对于每一个事件，都明确知晓其计划发布的确切时间、重要程度、对特定货币的影响、预测数值以及其他属性。宏观经济指标的实际数值会在发布之时立即传达到 MetaTrader 5 中。</p><p>经济日历的存在使得你能够自动分析传入的事件，并在智能交易系统（EA）中以多种方式对其做出反应。例如，作为突破策略的一部分进行交易，或者在区间内针对波动性波动进行交易。另一方面，了解市场即将出现的波动情况，可以让你在时间安排中找到市场平稳的时段，并暂时关闭那些因价格剧烈波动可能导致损失而面临风险的交易机器人。</p><p>所有与经济日历相关的函数和数据结构所使用的日期时间（datetime）类型的值，都与交易服务器时间（TimeTradeServer）一致，包括其所在的时区以及夏令时（Daylight Saving Time，DST）设置。换句话说，为了正确测试基于新闻的交易智能交易系统，其开发者必须在每年中大约半年的夏令时模式与当前不同的时间段内，自行修改历史新闻的时间。</p><p>日历函数不能在测试器中使用：当尝试调用其中任何一个函数时，我们会得到 “FUNCTION_NOT_ALLOWED（4014）” 错误。在这方面，测试基于日历的策略需要先在在线图表上运行 MQL 程序时，将日历条目保存到外部存储设备中（例如，保存到文件中），然后再从在测试器中运行的 MQL 程序中加载并读取这些条目。</p><h2 id="日历的基本概念" tabindex="-1">日历的基本概念 <a class="header-anchor" href="#日历的基本概念" aria-label="Permalink to &quot;日历的基本概念&quot;">​</a></h2><p>在使用日历时，我们会涉及几个概念，MQL5 为了对这些概念进行形式化描述，定义了特殊的结构体类型。</p><p>首先，日历事件与特定国家相关，每个国家都使用 <code>MqlCalendarCountry</code> 结构体来描述：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlCalendarCountry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong  id;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // 根据 ISO 3166-1 标准的国家标识符 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 国家的文本名称（采用当前终端的编码） </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string code;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 根据 ISO 3166-1 alpha-2 标准的两个字母的国家代码 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string currency;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 国际通用的国家货币代码 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string currency_symbol;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 国家货币的符号 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string url_name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 mql5.com 网站的 URL 中使用的国家名称 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>如何获取日历中可用国家的列表以及它们的属性（以 <code>MqlCalendarCountry</code> 结构体数组的形式），我们将在下一节中介绍。</p><p>目前，我们只需关注 <code>id</code> 字段。这个字段很重要，因为它是确定日历事件是否属于某个特定国家的关键。在每个国家（或已注册的国家联盟，如欧盟）中，都有一个特定的、国际公认的经济指标和影响市场的信息事件类型列表，这些事件因此被纳入日历中。</p><p>每个事件类型由 <code>MqlCalendarEvent</code> 结构体定义，其中的 <code>country_id</code> 字段将事件唯一地与某个国家关联起来。我们将在下面介绍所使用的枚举类型。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlCalendarEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong                          id;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 事件 ID </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_TYPE       type;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 事件类型 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_SECTOR     sector;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 事件所属的经济领域 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_FREQUENCY  frequency;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 事件的频率（周期性） </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_TIMEMODE   time_mode;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 事件的时间模式 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong                          country_id;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 国家标识符 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_UNIT       unit;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 指标单位 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_IMPORTANCE importance;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 事件的重要性 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_MULTIPLIER multiplier;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 指标乘数 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           digits;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 小数位数 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string                         source_url;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 事件发布来源的 URL </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string                         event_code;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 事件代码 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string                         name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 以终端语言显示的事件文本名称 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>重要的是要理解，<code>MqlCalendarEvent</code> 结构体描述的是事件的类型（例如，消费者物价指数，CPI 的发布），而不是可能按季度、每月或其他时间安排发生的特定事件。它包含了事件的一般特征，包括重要性、频率、与经济领域的关系、度量单位、名称和信息来源。至于实际指标和预测指标，这些将在该类型的每个特定事件的日历条目中提供：这些条目存储为 <code>MqlCalendarValue</code> 结构体，我们将在后面讨论。查询支持的事件类型的函数将在后面的章节中介绍。</p><p><code>type</code> 字段中的事件类型指定为 <code>ENUM_CALENDAR_EVENT_TYPE</code> 枚举值之一：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_TYPE_EVENT</code></td><td>事件（会议、演讲等）</td></tr><tr><td><code>CALENDAR_TYPE_INDICATOR</code></td><td>经济指标</td></tr><tr><td><code>CALENDAR_TYPE_HOLIDAY</code></td><td>节假日（周末）</td></tr></tbody></table><p>事件所属的经济领域从 <code>ENUM_CALENDAR_EVENT_SECTOR</code> 枚举中选择：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_SECTOR_NONE</code></td><td>未设置领域</td></tr><tr><td><code>CALENDAR_SECTOR_MARKET</code></td><td>市场，交易所</td></tr><tr><td><code>CALENDAR_SECTOR_GDP</code></td><td>国内生产总值（GDP）</td></tr><tr><td><code>CALENDAR_SECTOR_JOBS</code></td><td>劳动力市场</td></tr><tr><td><code>CALENDAR_SECTOR_PRICES</code></td><td>价格</td></tr><tr><td><code>CALENDAR_SECTOR_MONEY</code></td><td>货币</td></tr><tr><td><code>CALENDAR_SECTOR_TRADE</code></td><td>贸易</td></tr><tr><td><code>CALENDAR_SECTOR_GOVERNMENT</code></td><td>政府</td></tr><tr><td><code>CALENDAR_SECTOR_BUSINESS</code></td><td>商业</td></tr><tr><td><code>CALENDAR_SECTOR_CONSUMER</code></td><td>消费</td></tr><tr><td><code>CALENDAR_SECTOR_HOUSING</code></td><td>住房</td></tr><tr><td><code>CALENDAR_SECTOR_TAXES</code></td><td>税收</td></tr><tr><td><code>CALENDAR_SECTOR_HOLIDAYS</code></td><td>节假日</td></tr></tbody></table><p>事件的频率在 <code>frequency</code> 字段中使用 <code>ENUM_CALENDAR_EVENT_FREQUENCY</code> 枚举来表示：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_FREQUENCY_NONE</code></td><td>未设置发布频率</td></tr><tr><td><code>CALENDAR_FREQUENCY_WEEK</code></td><td>每周</td></tr><tr><td><code>CALENDAR_FREQUENCY_MONTH</code></td><td>每月</td></tr><tr><td><code>CALENDAR_FREQUENCY_QUARTER</code></td><td>每季度</td></tr><tr><td><code>CALENDAR_FREQUENCY_YEAR</code></td><td>每年</td></tr><tr><td><code>CALENDAR_FREQUENCY_DAY</code></td><td>每天</td></tr></tbody></table><p>事件持续时间（<code>time_mode</code>）可以用 <code>ENUM_CALENDAR_EVENT_TIMEMODE</code> 枚举的元素之一来描述：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_TIMEMODE_DATETIME</code></td><td>事件的准确时间已知</td></tr><tr><td><code>CALENDAR_TIMEMODE_DATE</code></td><td>事件持续一整天</td></tr><tr><td><code>CALENDAR_TIMEMODE_NOTIME</code></td><td>未公布时间</td></tr><tr><td><code>CALENDAR_TIMEMODE_TENTATIVE</code></td><td>仅提前知道日期，但不知道事件的准确时间（事后指定时间）</td></tr></tbody></table><p>事件的重要性在 <code>importance</code> 字段中使用 <code>ENUM_CALENDAR_EVENT_IMPORTANCE</code> 枚举来指定：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_IMPORTANCE_NONE</code></td><td>未设置</td></tr><tr><td><code>CALENDAR_IMPORTANCE_LOW</code></td><td>低</td></tr><tr><td><code>CALENDAR_IMPORTANCE_MODERATE</code></td><td>中等</td></tr><tr><td><code>CALENDAR_IMPORTANCE_HIGH</code></td><td>高</td></tr></tbody></table><p>事件值的度量单位在 <code>unit</code> 字段中定义，为 <code>ENUM_CALENDAR_EVENT_UNIT</code> 枚举的成员：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_UNIT_NONE</code></td><td>未设置单位</td></tr><tr><td><code>CALENDAR_UNIT_PERCENT</code></td><td>百分比（%）</td></tr><tr><td><code>CALENDAR_UNIT_CURRENCY</code></td><td>本国货币</td></tr><tr><td><code>CALENDAR_UNIT_HOUR</code></td><td>小时数</td></tr><tr><td><code>CALENDAR_UNIT_JOB</code></td><td>工作岗位数量</td></tr><tr><td><code>CALENDAR_UNIT_RIG</code></td><td>钻机数量</td></tr><tr><td><code>CALENDAR_UNIT_USD</code></td><td>美元</td></tr><tr><td><code>CALENDAR_UNIT_PEOPLE</code></td><td>人数</td></tr><tr><td><code>CALENDAR_UNIT_MORTGAGE</code></td><td>抵押贷款数量</td></tr><tr><td><code>CALENDAR_UNIT_VOTE</code></td><td>投票数</td></tr><tr><td><code>CALENDAR_UNIT_BARREL</code></td><td>桶数</td></tr><tr><td><code>CALENDAR_UNIT_CUBICFEET</code></td><td>立方英尺体积</td></tr><tr><td><code>CALENDAR_UNIT_POSITION</code></td><td>合约中投机头寸的净交易量</td></tr><tr><td><code>CALENDAR_UNIT_BUILDING</code></td><td>建筑物数量</td></tr></tbody></table><p>在某些情况下，经济指标的值需要根据 <code>ENUM_CALENDAR_EVENT_MULTIPLIER</code> 枚举的元素之一使用乘数：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_MULTIPLIER_NONE</code></td><td>未设置乘数</td></tr><tr><td><code>CALENDAR_MULTIPLIER_THOUSANDS</code></td><td>千</td></tr><tr><td><code>CALENDAR_MULTIPLIER_MILLIONS</code></td><td>百万</td></tr><tr><td><code>CALENDAR_MULTIPLIER_BILLIONS</code></td><td>十亿</td></tr><tr><td><code>CALENDAR_MULTIPLIER_TRILLIONS</code></td><td>万亿</td></tr></tbody></table><p>这样，我们已经考虑了用于描述 <code>MqlCalendarEvent</code> 结构体中事件类型的所有特殊数据类型。</p><p>一个单独的日历条目由 <code>MqlCalendarValue</code> 结构体构成。下面给出了它的详细描述，但目前重要的是要注意以下细微之处。<code>MqlCalendarValue</code> 有一个 <code>event_id</code> 字段，它指向事件类型的标识符，即包含 <code>MqlCalendarEvent</code> 结构体中已有的 <code>id</code> 之一。</p><p>正如我们上面看到的，<code>MqlCalendarEvent</code> 结构体又通过 <code>country_id</code> 字段与 <code>MqlCalendarCountry</code> 相关联。因此，一旦将关于特定国家或事件类型的信息输入到日历数据库中，就可以为它们注册任意数量的类似事件。当然，填充数据库是信息提供者的责任，而不是开发者的责任。</p><p>让我们总结一下：系统分别存储三个内部表：</p><ol><li>用于描述国家的 <code>MqlCalendarCountry</code> 结构体表。</li><li>包含事件类型描述的 <code>MqlCalendarEvent</code> 结构体表。</li><li>包含各种类型特定事件指标的 <code>MqlCalendarValue</code> 结构体表。</li></ol><p>通过引用事件类型标识符，从特定事件的记录中消除了信息的重复。例如，CPI 值的每月发布仅引用具有该事件类型一般特征的相同 <code>MqlCalendarEvent</code> 结构体。如果没有不同的表，就需要在每个 CPI 日历条目中重复相同的属性。这种使用标识符字段在数据表格之间建立关系的方法称为关系型方法，我们将在关于 SQLite 的章节中再次讨论它。所有这些都在下面的图表中进行了说明：</p><h3 id="按标识符字段的结构体之间的链接方案" tabindex="-1">按标识符字段的结构体之间的链接方案 <a class="header-anchor" href="#按标识符字段的结构体之间的链接方案" aria-label="Permalink to &quot;按标识符字段的结构体之间的链接方案&quot;">​</a></h3><p>所有表格都存储在内部日历数据库中，当终端连接到服务器时，该数据库会不断更新以保持最新状态。</p><p>日历条目（特定事件）是 <code>MqlCalendarValue</code> 结构体。它们也通过 <code>id</code> 字段中的自己的唯一编号进行标识（三个表中的每一个都有自己的 <code>id</code> 字段）：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlCalendarValue </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong      id;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // 条目 ID </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong      event_id;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 事件类型 ID </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime   time;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // 事件的时间和日期 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime   period;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 事件的报告期 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        revision;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 与报告期相关的已发布指标的修订版 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       actual_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 以百万分之一为单位的实际值或 LONG_MIN </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       prev_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 以百万分之一为单位的上一个值或 LONG_MIN </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       revised_prev_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 以百万分之一为单位的修订后的上一个值或 LONG_MIN </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       forecast_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 以百万分之一为单位的预测值或 LONG_MIN </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_CALENDAR_EVENT_IMPACT impact_type;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 对汇率的潜在影响</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 用于检查值的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HasActualValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 如果 actual_value 字段已填充，则为 true </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HasPreviousValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 如果 prev_value 字段已填充，则为 true </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HasRevisedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果 revised_prev_value 字段已填充，则为 true </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HasForecastValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 如果 forecast_value 字段已填充，则为 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 用于获取值的函数 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetActualValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // actual_value 或如果值未设置则为 nan </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetPreviousValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // prev_value 或如果值未设置则为 nan </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetRevisedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // revised_prev_value 或如果值未设置则为 nan </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetForecastValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // forecast_value 或如果值未设置则为 nan </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>对于每个事件，除了其发布时间（<code>time</code>）之外，还存储以下四个值：</p><ol><li>实际值（<code>actual_value</code>），在新闻发布后立即得知。</li><li>上一个值（<code>prev_value</code>），在上一次发布相同新闻时得知。</li><li>上一个指标的修订值，<code>revised_prev_value</code>（如果自上次发布以来已被修改）。</li><li>预测值（<code>forecast_value</code>）。</li></ol><p>显然，并非所有字段都必须填充。因此，对于未来事件，当前值不存在（尚未得知），并且对过去值的修订也并非总是会发生。此外，所有四个字段仅对定量指标有意义，而日历还会反映监管机构的演讲、会议和节假日。</p><p>一个空字段（无值）由常量 <code>LONG_MIN</code>（-9223372036854775808）表示。如果字段中的值已指定（不等于 <code>LONG_MIN</code>），那么它对应于实际指标值的一百万倍，也就是说，要获得通常（实际）形式的指标，需要将字段值除以 1,000,000。</p><p>为了方便程序员，该结构体定义了 4 个 <code>Has</code> 方法来检查字段是否已填充，以及 4 个 <code>Get</code> 方法，这些方法返回相应字段的值，并已转换为实数，如果字段未填充，则该方法将返回 <code>NaN</code>（非数字）。</p><p>有时，为了获得绝对值（如果算法需要），额外分析 <code>MqlCalendarEvent</code> 结构体中的 <code>multiplier</code> 属性很重要，因为根据 <code>ENUM_CALENDAR_EVENT_MULTIPLIER</code> 枚举，一些值是以倍数单位指定的。此外，<code>MqlCalendarEvent</code> 有一个 <code>digits</code> 字段，它指定了接收到的值中的有效数字位数，以便后续进行正确的格式化（例如，在调用 <code>NormalizeDouble</code> 时）。</p><p>报告期（计算已发布指标的时期）在 <code>period</code> 字段中设置为其第一天。例如，如果指标是按月计算的，那么日期 &#39;2022.05.01 00:00:00&#39; 表示 5 月。时期的持续时间（例如，月、季度、年）在相关结构体 <code>MqlCalendarEvent</code> 的 <code>frequency</code> 字段中定义：该字段的类型是上面描述的特殊 <code>ENUM_CALENDAR_EVENT_FREQUENCY</code> 枚举，以及其他枚举。</p><p>特别有趣的是 <code>impact_type</code> 字段，在新闻发布后，通过比较当前值和预测值，会自动设置相应货币对汇率的影响方向。这种影响可以是正面的（预计货币升值）或负面的（预计货币贬值）。例如，销售额下降幅度超过预期将被标记为具有负面影响，而失业率下降幅度较大则为正面影响。但并非所有事件的这个特征都能明确解释（一些经济指标被认为是相互矛盾的），此外，还应注意变化的相对数值。</p><p>事件对本国货币汇率的潜在影响使用 <code>ENUM_CALENDAR_EVENT_IMPACT</code> 枚举来表示：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>CALENDAR_IMPACT_NA</code></td><td>未说明影响</td></tr><tr><td><code>CALENDAR_IMPACT_POSITIVE</code></td><td>正面影响</td></tr><tr><td><code>CALENDAR_IMPACT_NEGATIVE</code></td><td>负面影响</td></tr></tbody></table><p>日历的另一个重要概念是其变化的事实。不幸的是，没有用于表示变化的特殊结构体。变化唯一的属性是其唯一 ID，这是每次内部日历库发生变化时系统分配的一个整数。</p><p>如你所知，信息提供者会不断修改日历：向其中添加新的即将发生的事件，并修正已发布的指标和预测。因此，跟踪任何编辑非常重要，编辑的发生使得能够检测到周期性增加的变化编号。</p><p>在 MQL5 中无法获取带有特定标识符的编辑时间及其本质。如果有必要，MQL 程序应该自己实现对日历状态的定期查询和记录分析。</p><p>一组 MQL5 函数允许获取有关国家、事件类型和特定日历条目的信息，以及它们的变化。我们将在以下章节中讨论这个问题。</p><p><strong>注意！</strong> 首次访问日历时（如果之前未打开终端工具栏中的“日历”选项卡），内部日历数据库与服务器同步可能需要几秒钟时间。</p><h2 id="获取可用国家的列表和描述" tabindex="-1">获取可用国家的列表和描述 <a class="header-anchor" href="#获取可用国家的列表和描述" aria-label="Permalink to &quot;获取可用国家的列表和描述&quot;">​</a></h2><p>你可以使用 <code>CalendarCountries</code> 函数获取财经日历中会播报事件的完整国家列表。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarCountries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">countries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span></code></pre></div><p>该函数会用 <code>MqlCalendarCountry</code> 结构体填充通过引用传递的 <code>countries</code> 数组。这个数组可以是动态数组，也可以是有足够大小的固定数组。</p><p>若操作成功，函数会返回从服务器获取到的国家描述的数量；若出错，则返回 0。在 <code>_LastError</code> 中可能出现的错误代码里，特别要注意 5401（<code>ERR_CALENDAR_TIMEOUT</code>，请求超时）或者 5400（<code>ERR_CALENDAR_MORE_DATA</code>，若固定数组大小不足以获取所有国家的描述）。在后面这种情况下，系统只会复制能装下的部分。</p><p>下面我们来编写一个简单的脚本 <code>CalendarCountries.mq5</code>，它会获取完整的国家列表并将其记录下来。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarCountry countries[];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarCountries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(countries));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(countries);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是一个示例结果：</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>CalendarCountries(countries)=23 / ok</span></span>
<span class="line"><span>     [id]           [name] [code] [currency] [currency_symbol]       [url_name] [reserved]</span></span>
<span class="line"><span>[ 0]  554 &quot;New Zealand&quot;    &quot;NZ&quot;   &quot;NZD&quot;      &quot;$&quot;               &quot;new-zealand&quot;           ...</span></span>
<span class="line"><span>[ 1]  999 &quot;European Union&quot; &quot;EU&quot;   &quot;EUR&quot;      &quot;€&quot;               &quot;european-union&quot;        ...</span></span>
<span class="line"><span>[ 2]  392 &quot;Japan&quot;          &quot;JP&quot;   &quot;JPY&quot;      &quot;¥&quot;               &quot;japan&quot;                 ...</span></span>
<span class="line"><span>[ 3]  124 &quot;Canada&quot;         &quot;CA&quot;   &quot;CAD&quot;      &quot;$&quot;               &quot;canada&quot;                ...</span></span>
<span class="line"><span>[ 4]   36 &quot;Australia&quot;      &quot;AU&quot;   &quot;AUD&quot;      &quot;$&quot;               &quot;australia&quot;             ...</span></span>
<span class="line"><span>[ 5]  156 &quot;China&quot;          &quot;CN&quot;   &quot;CNY&quot;      &quot;¥&quot;               &quot;china&quot;                 ...</span></span>
<span class="line"><span>[ 6]  380 &quot;Italy&quot;          &quot;IT&quot;   &quot;EUR&quot;      &quot;€&quot;               &quot;italy&quot;                 ...</span></span>
<span class="line"><span>[ 7]  702 &quot;Singapore&quot;      &quot;SG&quot;   &quot;SGD&quot;      &quot;R$&quot;              &quot;singapore&quot;             ...</span></span>
<span class="line"><span>[ 8]  276 &quot;Germany&quot;        &quot;DE&quot;   &quot;EUR&quot;      &quot;€&quot;               &quot;germany&quot;               ...</span></span>
<span class="line"><span>[ 9]  250 &quot;France&quot;         &quot;FR&quot;   &quot;EUR&quot;      &quot;€&quot;               &quot;france&quot;                ...</span></span>
<span class="line"><span>[10]   76 &quot;Brazil&quot;         &quot;BR&quot;   &quot;BRL&quot;      &quot;R$&quot;              &quot;brazil&quot;                ...</span></span>
<span class="line"><span>[11]  484 &quot;Mexico&quot;         &quot;MX&quot;   &quot;MXN&quot;      &quot;Mex$&quot;            &quot;mexico&quot;                ...</span></span>
<span class="line"><span>[12]  710 &quot;South Africa&quot;   &quot;ZA&quot;   &quot;ZAR&quot;      &quot;R&quot;               &quot;south-africa&quot;          ...</span></span>
<span class="line"><span>[13]  344 &quot;Hong Kong&quot;      &quot;HK&quot;   &quot;HKD&quot;      &quot;HK$&quot;             &quot;hong-kong&quot;             ...</span></span>
<span class="line"><span>[14]  356 &quot;India&quot;          &quot;IN&quot;   &quot;INR&quot;      &quot;₹&quot;               &quot;india&quot;                 ...</span></span>
<span class="line"><span>[15]  578 &quot;Norway&quot;         &quot;NO&quot;   &quot;NOK&quot;      &quot;Kr&quot;              &quot;norway&quot;                ...</span></span>
<span class="line"><span>[16]    0 &quot;Worldwide&quot;      &quot;WW&quot;   &quot;ALL&quot;      &quot;&quot;                &quot;worldwide&quot;             ...</span></span>
<span class="line"><span>[17]  840 &quot;United States&quot;  &quot;US&quot;   &quot;USD&quot;      &quot;$&quot;               &quot;united-states&quot;         ...</span></span>
<span class="line"><span>[18]  826 &quot;United Kingdom&quot; &quot;GB&quot;   &quot;GBP&quot;      &quot;£&quot;               &quot;united-kingdom&quot;        ...</span></span>
<span class="line"><span>[19]  756 &quot;Switzerland&quot;    &quot;CH&quot;   &quot;CHF&quot;      &quot;₣&quot;               &quot;switzerland&quot;           ...</span></span>
<span class="line"><span>[20]  410 &quot;South Korea&quot;    &quot;KR&quot;   &quot;KRW&quot;      &quot;₩&quot;               &quot;south-korea&quot;           ...</span></span>
<span class="line"><span>[21]  724 &quot;Spain&quot;          &quot;ES&quot;   &quot;EUR&quot;      &quot;€&quot;               &quot;spain&quot;                 ...</span></span>
<span class="line"><span>[22]  752 &quot;Sweden&quot;         &quot;SE&quot;   &quot;SEK&quot;      &quot;Kr&quot;              &quot;sweden&quot;                ...</span></span></code></pre></div><p>需要着重注意的是，标识符 0（代码为 &quot;WW&quot;，伪货币为 &quot;ALL&quot;）对应的是全球性事件（涉及多个国家，例如 G7、G20 会议），并且货币 &quot;EUR&quot; 与财经日历中可用的多个欧盟国家相关联（可以看到，并非整个欧元区的国家都有展示）。此外，欧盟本身有一个通用标识符 999。</p><p>如果你对某个特定国家感兴趣，可以依据 ISO 3166 - 1 标准通过数字代码来查看其是否可用。特别是在上面的日志中，这些代码显示在第一列（<code>id</code> 字段）。</p><p>要通过 <code>id</code> 参数中指定的 ID 获取某个国家的描述，你可以使用 <code>CalendarCountryById</code> 函数。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarCountryById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果操作成功，函数会返回 <code>true</code> 并填充 <code>country</code> 结构体的各个字段。</p><p>如果未找到该国家，函数会返回 <code>false</code>，并且在 <code>_LastError</code> 中会得到错误代码 5402（<code>ERR_CALENDAR_NO_DATA</code>）。</p><p>关于该函数的使用示例，请参考“按国家或货币获取事件记录”部分。</p><h3 id="按国家和货币查询事件类型" tabindex="-1">按国家和货币查询事件类型 <a class="header-anchor" href="#按国家和货币查询事件类型" aria-label="Permalink to &quot;按国家和货币查询事件类型&quot;">​</a></h3><p>每个国家的经济事件和节假日日历都有其自身特点。MQL 程序可以查询特定国家内的事件类型，以及与特定货币相关的事件类型。当几个国家使用同一种货币时，查询与货币相关的事件类型就显得很重要，例如，大多数欧盟成员国就是这种情况。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarEventByCountry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> country</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span></code></pre></div><p><code>CalendarEventByCountry</code> 函数会用日历中针对由两位字母国家代码（根据 ISO 3166-1 alpha-2 标准）指定的国家的所有事件类型描述，填充通过引用传递的 <code>MqlCalendarEvent</code> 结构数组。我们在上一节的日志中看到过这样的代码示例：<code>EU</code> 代表欧盟，<code>US</code> 代表美国，<code>DE</code> 代表德国，<code>CN</code> 代表中国，等等。</p><p>接收数组可以是动态数组，也可以是大小足够的固定数组。</p><p>该函数返回接收到的描述数量，如果出错则返回 0。特别是，如果固定数组无法容纳所有事件，该函数会用可用数据中能容纳的部分填充数组，并设置 <code>_LastError</code> 代码，其值等于 <code>CALENDAR_MORE_DATA</code>（5400）。也可能出现内存分配错误（4004，<code>ERR_NOT_ENOUGH_MEMORY</code>）或来自服务器的日历请求超时（5401，<code>ERR_CALENDAR_TIMEOUT</code>）。</p><p>如果具有给定代码的国家不存在，将会出现 <code>INTERNAL_ERROR</code>（4001）。</p><p>通过指定 <code>NULL</code> 或空字符串 <code>&quot;&quot;</code> 来代替 <code>country</code>，你可以获取所有国家的完整事件列表。</p><p>我们使用简单的脚本 <code>CalendarEventKindsByCountry.mq5</code> 来测试该函数的性能。它只有一个输入参数，即我们感兴趣的国家的代码。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string CountryCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>接下来，通过调用 <code>CalendarEventByCountry</code> 来请求事件类型，如果成功，会将得到的数组记录到日志中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarEvent events[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventByCountry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CountryCode, events)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Event kinds for country: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, CountryCode);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(events);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是一个结果示例（由于行较长，为了在书中发布，人为地将其分为 2 个块：第一个块包含 <code>MqlCalendarEvent</code> 结构的数字字段，第二个块包含字符串字段）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>CalendarEventByCountry(CountryCode,events)=26 / ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Event kinds for country: HK</span></span>
<span class="line"><span></span></span>
<span class="line"><span>          [id] [type] [sector] [frequency] [time_mode] [country_id] [unit] [importance] [multiplier] [digits] »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 0] 344010001      1        5           2           0          344      6            1            3        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 1] 344010002      1        5           2           0          344      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 2] 344020001      1        4           2           0          344      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 3] 344020002      1        2           3           0          344      1            3            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 4] 344020003      1        2           3           0          344      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 5] 344020004      1        6           2           0          344      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 6] 344020005      1        6           2           0          344      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 7] 344020006      1        6           2           0          344      2            2            3        3 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 8] 344020007      1        9           2           0          344      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 9] 344020008      1        3           2           0          344      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[10] 344030001      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[11] 344030002      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[12] 344030003      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[13] 344030004      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[14] 344030005      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[15] 344030006      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[16] 344030007      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[17] 344030008      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[18] 344030009      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[19] 344030010      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[20] 344030011      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[21] 344030012      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[22] 344030013      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[23] 344030014      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[24] 344030015      2       12           0           1          344      0            0            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[25] 344500001      1        8           2           0          344      0            1            0        1 »</span></span></code></pre></div><p>日志的后续部分（右侧片段）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>    »                      [source_url]                        [event_code]                                  [name]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 0]» &quot;https://www.hkma.gov.hk/eng/&quot;    &quot;foreign-exchange-reserves&quot;         &quot;Foreign Exchange Reserves&quot;            </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 1]» &quot;https://www.hkma.gov.hk/eng/&quot;    &quot;hkma-m3-money-supply-yy&quot;           &quot;HKMA M3 Money Supply y/y&quot;             </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 2]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;cpi-yy&quot;                            &quot;CPI y/y&quot;                              </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 3]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;gdp-qq&quot;                            &quot;GDP q/q&quot;                              </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 4]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;gdp-yy&quot;                            &quot;GDP y/y&quot;                              </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 5]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;exports-mm&quot;                        &quot;Exports y/y&quot;                          </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 6]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;imports-mm&quot;                        &quot;Imports y/y&quot;                          </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 7]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;trade-balance&quot;                     &quot;Trade Balance&quot;                        </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 8]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;retail-sales-yy&quot;                   &quot;Retail Sales y/y&quot;                     </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 9]» &quot;https://www.censtatd.gov.hk/en/&quot; &quot;unemployment-rate-3-months&quot;        &quot;Unemployment Rate 3-Months&quot;           </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[10]» &quot;https://publicholidays.hk/&quot;      &quot;new-years-day&quot;                     &quot;New Year&#39;s Day&quot;                       </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[11]» &quot;https://publicholidays.hk/&quot;      &quot;lunar-new-year&quot;                    &quot;Lunar New Year&quot;                       </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[12]» &quot;https://publicholidays.hk/&quot;      &quot;ching-ming-festival&quot;               &quot;Ching Ming Festival&quot;                  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[13]» &quot;https://publicholidays.hk/&quot;      &quot;good-friday&quot;                       &quot;Good Friday&quot;                          </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[14]» &quot;https://publicholidays.hk/&quot;      &quot;easter-monday&quot;                     &quot;Easter Monday&quot;                        </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[15]» &quot;https://publicholidays.hk/&quot;      &quot;birthday-of-buddha&quot;                &quot;The Birthday of the Buddha&quot;           </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[16]» &quot;https://publicholidays.hk/&quot;      &quot;labor-day&quot;                         &quot;Labor Day&quot;                            </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[17]» &quot;https://publicholidays.hk/&quot;      &quot;tuen-ng-festival&quot;                  &quot;Tuen Ng Festival&quot;                     </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[18]» &quot;https://publicholidays.hk/&quot;      &quot;hksar-establishment-day&quot;           &quot;HKSAR Establishment Day&quot;              </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[19]» &quot;https://publicholidays.hk/&quot;      &quot;day-following-mid-autumn-festival&quot; &quot;The Day Following Mid-Autumn Festival&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[20]» &quot;https://publicholidays.hk/&quot;      &quot;national-day&quot;                      &quot;National Day&quot;                         </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[21]» &quot;https://publicholidays.hk/&quot;      &quot;chung-yeung-festival&quot;              &quot;Chung Yeung Festival&quot;                 </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[22]» &quot;https://publicholidays.hk/&quot;      &quot;christmas-day&quot;                     &quot;Christmas Day&quot;                        </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[23]» &quot;https://publicholidays.hk/&quot;      &quot;first-weekday-after-christmas-day&quot; &quot;The First Weekday After Christmas Day&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[24]» &quot;https://publicholidays.hk/&quot;      &quot;day-following-good-friday&quot;         &quot;The Day Following Good Friday&quot;        </span></span>
<span class="line"><span></span></span>
<span class="line"><span>[25]» &quot;https://www.markiteconomics.com&quot; &quot;nikkei-pmi&quot;                        &quot;S&amp;P Global PMI&quot;</span></span></code></pre></div><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarEventByCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> currency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarEvent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">events</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span></code></pre></div><p><code>CalendarEventByCurrency</code> 函数会用日历中与指定货币相关的所有事件类型描述，填充传递的 <code>events</code> 数组。所有外汇交易员都知道货币的三字母标识。</p><p>如果指定了无效的货币代码，该函数将返回 0（无错误）并返回一个空数组。</p><p>通过指定 <code>NULL</code> 或空字符串 <code>&quot;&quot;</code> 来代替 <code>currency</code>，你可以获取日历事件的完整列表。</p><p>我们使用脚本 <code>CalendarEventKindsByCurrency.mq5</code> 来测试该函数。输入参数指定货币代码。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string Currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CNY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在 <code>OnStart</code> 处理函数中，我们请求事件并将它们输出到日志中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarEvent events[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventByCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Currency, events)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Event kinds for currency: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Currency);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(events);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是一个结果示例（带有缩写）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>CalendarEventByCurrency(Currency,events)=40 / ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Event kinds for currency: CNY</span></span>
<span class="line"><span></span></span>
<span class="line"><span>          [id] [type] [sector] [frequency] [time_mode] [country_id] [unit] [importance] [multiplier] [digits] »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 0] 156010001      1        4           2           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 1] 156010002      1        4           2           0          156      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 2] 156010003      1        4           2           0          156      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 3] 156010004      1        2           3           0          156      1            3            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 4] 156010005      1        2           3           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 5] 156010006      1        9           2           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 6] 156010007      1        8           2           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 7] 156010008      1        8           2           0          156      0            3            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 8] 156010009      1        8           2           0          156      0            3            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ 9] 156010010      1        8           2           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[10] 156010011      0        5           0           0          156      0            2            0        0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[11] 156010012      1        3           2           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[12] 156010013      1        8           2           0          156      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[13] 156010014      1        8           2           0          156      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[14] 156010015      1        8           2           0          156      0            3            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[15] 156010016      1        8           2           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[16] 156010017      1        9           2           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[17] 156010018      1        2           3           0          156      1            2            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[18] 156020001      1        6           2           3          156      6            2            3        2 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[19] 156020002      1        6           2           3          156      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[20] 156020003      1        6           2           3          156      1            1            0        1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[21] 156020004      1        6           2           3          156      2            2            3        2 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[22] 156020005      1        6           2           3          156      1            1            0        1 »</span></span></code></pre></div><p>[23] 156020006 1 6 2 3 156 1 1 0 1 »</p><p>...</p><p>Right fragment.</p><pre><code>»                        [source_url]                                 [event_code]                                       [name]
</code></pre><p>[ 0]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;cpi-mm&quot; &quot;CPI m/m&quot;</p><p>[ 1]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;cpi-yy&quot; &quot;CPI y/y&quot;</p><p>[ 2]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;ppi-yy&quot; &quot;PPI y/y&quot;</p><p>[ 3]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;gdp-qq&quot; &quot;GDP q/q&quot;</p><p>[ 4]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;gdp-yy&quot; &quot;GDP y/y&quot;</p><p>[ 5]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;retail-sales-yy&quot; &quot;Retail Sales y/y&quot;</p><p>[ 6]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;industrial-production-yy&quot; &quot;Industrial Production y/y&quot;</p><p>[ 7]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;manufacturing-pmi&quot; &quot;Manufacturing PMI&quot;</p><p>[ 8]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;non-manufacturing-pmi&quot; &quot;Non-Manufacturing PMI&quot;</p><p>[ 9]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;fixed-asset-investment-yy&quot; &quot;Fixed Asset Investment y/y&quot;</p><p>[10]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;nbs-press-conference-on-economic-situation&quot; &quot;NBS Press Conference on Economic Situation&quot;</p><p>[11]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;unemployment-rate&quot; &quot;Unemployment Rate&quot;</p><p>[12]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;industrial-profit-yy&quot; &quot;Industrial Profit y/y&quot;</p><p>[13]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;industrial-profit-ytd-yy&quot; &quot;Industrial Profit YTD y/y&quot;</p><p>[14]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;composite-pmi&quot; &quot;Composite PMI&quot;</p><p>[15]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;industrial-production-ytd-yy&quot; &quot;Industrial Production YTD y/y&quot;</p><p>[16]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;retail-sales-ytd-yy&quot; &quot;Retail Sales YTD y/y&quot;</p><p>[17]» &quot;<a href="http://www.stats.gov.cn/english/" target="_blank" rel="noreferrer">http://www.stats.gov.cn/english/</a>&quot; &quot;gdp-ytd-yy&quot; &quot;GDP YTD y/y&quot;</p><p>[18]» &quot;<a href="http://english.customs.gov.cn/" target="_blank" rel="noreferrer">http://english.customs.gov.cn/</a>&quot; &quot;trade-balance-usd&quot; &quot;Trade Balance USD&quot;</p><p>[19]» &quot;<a href="http://english.customs.gov.cn/" target="_blank" rel="noreferrer">http://english.customs.gov.cn/</a>&quot; &quot;imports-usd-yy&quot; &quot;Imports USD y/y&quot;</p><p>[20]» &quot;<a href="http://english.customs.gov.cn/" target="_blank" rel="noreferrer">http://english.customs.gov.cn/</a>&quot; &quot;exports-usd-yy&quot; &quot;Exports USD y/y&quot;</p><p>[21]» &quot;<a href="http://english.customs.gov.cn/" target="_blank" rel="noreferrer">http://english.customs.gov.cn/</a>&quot; &quot;trade-balance&quot; &quot;Trade Balance&quot;</p><p>[22]» &quot;<a href="http://english.customs.gov.cn/" target="_blank" rel="noreferrer">http://english.customs.gov.cn/</a>&quot; &quot;imports-yy&quot; &quot;Imports y/y&quot;</p><p>[23]» &quot;<a href="http://english.customs.gov.cn/" target="_blank" rel="noreferrer">http://english.customs.gov.cn/</a>&quot; &quot;exports-yy&quot; &quot;Exports y/y&quot;</p><p>...</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>细心的读者会注意到，事件类型标识符包含国家代码、新闻来源编号以及在该来源内的序列号（编号从 1 开始）。所以，事件类型标识符的一般格式是：\`CCCSSNNNN\`，其中 \`CCC\` 是国家代码，\`SS\` 是来源，\`NNNN\` 是编号。例如，\`156020001\` 是中国的第二个来源的第一条新闻，\`344030010\` 是中国香港的第三个来源的第十条新闻。唯一的例外是全球新闻，对于全球新闻，“国家” 代码不是 \`000\` 而是 \`1000\`。</span></span></code></pre></div><h2 id="按-id-获取事件描述" tabindex="-1">按 ID 获取事件描述 <a class="header-anchor" href="#按-id-获取事件描述" aria-label="Permalink to &quot;按 ID 获取事件描述&quot;">​</a></h2><p>通常情况下，实际的 MQL 程序会请求当前或即将发生的日历事件，并按时间范围、国家、货币或其他标准进行筛选。我们尚未讨论的用于此目的的 API 函数会返回 <code>MqlCalendarValue</code> 结构，该结构中仅存储事件标识符，而不是事件描述。因此，如果你需要提取完整的信息，<code>CalendarEventById</code> 函数可能会很有用。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>bool CalendarEventById(ulong id, MqlCalendarEvent &amp;event)</span></span></code></pre></div><p><code>CalendarEventById</code> 函数通过事件的 ID 获取该事件的描述。该函数会返回一个表示成功或错误的指示信息。</p><p>下一节将给出使用此函数的一个示例。</p><h2 id="按国家或货币获取事件记录" tabindex="-1">按国家或货币获取事件记录 <a class="header-anchor" href="#按国家或货币获取事件记录" aria-label="Permalink to &quot;按国家或货币获取事件记录&quot;">​</a></h2><p>在日历中针对给定的日期范围查询各种特定事件，并按国家或货币进行筛选。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarValueHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MqlCalendarValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, datetime </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, datetime to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>CalendarValueHistory</code> 函数会将时间范围在 <code>from</code> 和 <code>to</code> 之间的日历条目填充到通过引用传递的 <code>values</code> 数组中。这两个参数都可以包含日期和时间。<code>from</code> 值包含在时间间隔内，但 <code>to</code> 值不包含。换句话说，该函数选择 <code>MqlCalendarValue</code> 结构体类型的日历条目，其 <code>time</code> 属性满足以下复合条件：<code>from &lt;= time &lt; to</code>。</p><p>必须指定开始时间 <code>from</code>，而结束时间 <code>to</code> 是可选的：如果省略 <code>to</code> 或将其设置为 0，则所有未来事件都会被复制到数组中。</p><p>除了 <code>to</code> 为 0 的情况，<code>to</code> 的时间应该大于 <code>from</code>。当 <code>from</code> 和 <code>to</code> 都为 0 时，是用于查询所有可用事件（包括过去和未来事件）的特殊组合。</p><p>如果接收数组是动态数组，将自动为其分配内存。如果数组是固定大小的，复制的条目数量将不会超过数组的大小。</p><p><code>country</code> 和 <code>currency</code> 参数允许按国家或货币对记录进行额外的筛选。<code>country</code> 参数接受两个字母的 ISO 3166-1 alpha-2 国家代码（例如，&quot;DE&quot;、&quot;FR&quot;、&quot;EU&quot;），<code>currency</code> 参数接受三个字母的货币名称（例如，&quot;EUR&quot;、&quot;CNY&quot;）。</p><p>任何参数的默认值 <code>NULL</code> 或空字符串 <code>&quot;&quot;</code> 都等同于不存在相应的筛选条件。</p><p>如果同时指定了两个筛选条件，则仅选择那些同时满足国家和货币这两个条件的事件值。如果日历中包含有多种货币的国家，并且每种货币也在多个国家流通，这种筛选方式就会很有用。目前日历中没有这样的事件。要获取欧元区国家的事件，只需指定特定国家的代码或 &quot;EU&quot;，并假设货币为 &quot;EUR&quot; 即可。</p><p>该函数返回复制的元素数量，并可能设置错误代码。特别是，如果超过了从服务器请求的超时时间，<code>_LastError</code> 中会得到错误代码 5401（<code>ERR_CALENDAR_TIMEOUT</code>）。如果固定数组无法容纳所有记录，代码将等于 5400（<code>ERR_CALENDAR_MORE_DATA</code>），但数组仍会被填充。在为动态数组分配内存时，有可能出现错误 4004（<code>ERR_NOT_ENOUGH_MEMORY</code>）。</p><p><strong>注意！</strong> 数组中元素的顺序可能与时间顺序不同，你必须按时间对记录进行排序。</p><p>使用 <code>CalendarValueHistory</code> 函数，我们可以像这样查询即将发生的事件：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarValue values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>然而，使用这段代码，我们得到的表格信息不足，其中事件名称、重要性和货币代码隐藏在 <code>MqlCalendarValue::event_id</code> 字段的事件 ID 后面，并且间接隐藏在 <code>MqlCalendarEvent::country_id</code> 字段的国家标识符后面。为了使信息输出对用户更友好，应该通过事件代码请求事件的描述，从该描述中获取国家代码，并获取其属性。让我们在示例脚本 <code>CalendarForDates.mq5</code> 中展示这一点。</p><p>在输入参数中，我们将提供输入国家代码和货币以进行筛选的功能。默认情况下，查询欧盟的事件。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string CountryCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EU&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string Currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>事件的日期范围将自动计算为过去和未来的一段时间。这段“时间”也将由用户从三个选项中选择：一天、一周或一个月。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DAY_LONG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WEEK_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  DAY_LONG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MONTH_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DAY_LONG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YEAR_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MONTH_LONG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_CALENDAR_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SCOPE_DAY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DAY_LONG,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SCOPE_WEEK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WEEK_LONG,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SCOPE_MONTH </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MONTH_LONG,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SCOPE_YEAR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> YEAR_LONG,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_SCOPE Scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SCOPE_DAY;</span></span></code></pre></div><p>让我们定义自己的结构体 <code>MqlCalendarRecord</code>，它派生自 <code>MqlCalendarValue</code>，并向其中添加字段，以便通过相关结构体的链接（标识符）填充属性，从而方便展示。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlCalendarRecord: public MqlCalendarValue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string importances</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string importance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string currency;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string code;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actual, previous, revised, forecast;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string MqlCalendarRecord::importances</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;None&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Low&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Medium&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;High&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在添加的字段中，有表示重要性的字符串（<code>importances</code> 静态数组中的一个值）、事件名称、国家和货币，以及四个 <code>double</code> 格式的值。实际上，这是为了在打印时进行可视化展示而对信息的重复。稍后我们将为日历准备一个更高级的“包装器”。</p><p>为了填充对象，我们需要一个参数化构造函数，它接受原始的 <code>MqlCalendarValue</code> 结构体。在通过 <code>=</code> 运算符将所有继承的字段隐式复制到新对象后，我们调用专门准备的 <code>extend</code> 方法。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   MqlCalendarRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   MqlCalendarRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlCalendarValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      this </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>在 <code>extend</code> 方法中，我们通过事件标识符获取事件的描述。然后，根据事件描述中的国家标识符，获取包含国家属性的结构体。之后，我们可以从接收到的 <code>MqlCalendarEvent</code> 和 <code>MqlCalendarCountry</code> 结构体中填充添加字段的前半部分。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarEvent event;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      CalendarEventById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event_id, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarCountry country;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      CalendarCountryById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.country_id, country);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      importance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> importances</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[event.importance];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> country.currency;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> country.code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarValue value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> this;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetActualValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      previous </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetPreviousValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      revised </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetRevisedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      forecast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetForecastValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>接下来，我们调用内置的 <code>Get</code> 方法来填充四个 <code>double</code> 类型的字段，这些字段用于存储金融指标。</p><p>现在我们可以在主 <code>OnStart</code> 处理程序中使用新的结构体。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarValue values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarRecord records</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime from </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scope;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scope;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values, from, to, CountryCode, Currency)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i]));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Near past and future calendar records (extended): &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这里，通过调用 <code>CalendarValueHistory</code>，根据输入参数中设置的当前条件填充标准的 <code>MqlCalendarValue</code> 结构体数组。接下来，将所有元素转移到 <code>MqlCalendarRecord</code> 数组中。此外，在创建对象时，它们会用额外的信息进行扩展。最后，将事件数组输出到日志中。</p><p>日志记录相当长。首先，让我们展示左边一半的内容，如果我们打印标准的 <code>MqlCalendarValue</code> 结构体数组，看到的就是这些内容。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>CalendarValueHistory(values,from,to,CountryCode,Currency)=6 / ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Near past and future calendar records (extended): </span></span>
<span class="line"><span></span></span>
<span class="line"><span>      [id] [event_id]              [time]            [period] [revision] [actual_value]         [prev_value] [revised_prev_value]     [forecast_value] [impact_type]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[0] 162723  999020003 2022.06.23 03:00:00 1970.01.01 00:00:00    0 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808             0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[1] 162724  999020003 2022.06.24 03:00:00 1970.01.01 00:00:00    0 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808             0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[2] 168518  999010034 2022.06.24 11:00:00 1970.01.01 00:00:00    0 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808             0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[3] 168515  999010031 2022.06.24 13:10:00 1970.01.01 00:00:00    0 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808             0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[4] 168509  999010014 2022.06.24 14:30:00 1970.01.01 00:00:00    0 -9223372036854775808 -9223372036854775808 -9223372036854775808 -9223372036854775808             0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[5] 161014  999520001 2022.06.24 22:30:00 2022.06.21 00:00:00    0 -9223372036854775808             -6000000 -9223372036854775808 -9223372036854775808             0</span></span></code></pre></div><p>这是带有名称、重要性和含义“解码”的后半部分内容。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>CalendarValueHistory(values,from,to,CountryCode,Currency)=6 / ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Near past and future calendar records (extended):</span></span>
<span class="line"><span></span></span>
<span class="line"><span>     [importance]                                                [name] [currency] [code] [actual] [previous] [revised] [forecast]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[0]  &quot;High&quot;       &quot;EU Leaders Summit&quot;                                   &quot;EUR&quot;      &quot;EU&quot;        nan        nan       nan        nan</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[1]  &quot;High&quot;       &quot;EU Leaders Summit&quot;                                   &quot;EUR&quot;      &quot;EU&quot;        nan        nan       nan        nan</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[2]  &quot;Medium&quot;     &quot;ECB Supervisory Board Member McCaul Speech&quot;          &quot;EUR&quot;      &quot;EU&quot;        nan        nan       nan        nan</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[3]  &quot;Medium&quot;     &quot;ECB Supervisory Board Member Fernandez-Bollo Speech&quot; &quot;EUR&quot;      &quot;EU&quot;        nan        nan       nan        nan</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[4]  &quot;Medium&quot;     &quot;ECB Vice President de Guindos Speech&quot;                &quot;EUR&quot;      &quot;EU&quot;        nan        nan       nan        nan</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[5]  &quot;Low&quot;        &quot;CFTC EUR Non-Commercial Net Positions&quot;               &quot;EUR&quot;      &quot;EU&quot;        nan   -6.00000       nan        nan</span></span></code></pre></div><h2 id="获取特定类型的事件记录" tabindex="-1">获取特定类型的事件记录 <a class="header-anchor" href="#获取特定类型的事件记录" aria-label="Permalink to &quot;获取特定类型的事件记录&quot;">​</a></h2><p>如果有必要，MQL 程序能够请求特定类型的事件：要做到这一点，只需提前知道事件标识符即可，例如，使用“按国家和货币查询事件类型”部分中介绍的 <code>CalendarEventByCountry</code> 或 <code>CalendarEventByCurrency</code> 函数。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarValueHistoryByEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ulong</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">datetime</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">datetime</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>CalendarValueHistoryByEvent</code> 函数会用由 <code>id</code> 标识符所指示的特定类型的事件记录来填充通过引用传递的数组。<code>from</code> 和 <code>to</code> 参数允许你限制搜索事件的日期范围。</p><p>如果未指定可选参数 <code>to</code>，那么从 <code>from</code> 时间开始往后直到未来的所有日历条目都将被放入数组中。要查询所有过去的事件，将 <code>from</code> 设置为 0。如果 <code>from</code> 和 <code>to</code> 参数都为 0，则会返回所有的历史事件和已安排的事件。在所有其他情况下，当 <code>to</code> 不等于 0 时，它必须大于 <code>from</code>。</p><p><code>values</code> 数组可以是动态数组（此时函数会根据数据量自动扩展或缩小它），也可以是固定大小的数组（此时只有能容纳的部分会被复制到数组中）。</p><p>该函数返回复制的元素数量。</p><p>作为一个示例，考虑脚本 <code>CalendarStatsByEvent.mq5</code>，它会计算在给定的时间范围内，对于给定的国家或货币，不同类型事件的统计信息（出现频率）。</p><p>分析条件在输入变量中指定。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string CountryOrCurrency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EU&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_SCOPE Scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SCOPE_YEAR;</span></span></code></pre></div><p>根据 <code>CountryOrCurrency</code> 字符串的长度，它会被解释为国家代码（2 个字符）或货币代码（3 个字符）。</p><p>为了收集统计信息，我们将声明一个结构体；它的字段将存储事件类型的标识符和名称、其重要性以及此类事件的计数器。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarEventStats</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string importances[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string importance;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::importances[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;None&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Low&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Medium&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;High&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在 <code>OnStart</code> 函数中，我们首先使用 <code>CalendarEventByCountry</code> 或 <code>CalendarEventByCurrency</code> 函数请求指定历史深度以及未来的所有各类事件，然后，在遍历 <code>events</code> 数组中接收到的事件描述的循环中，针对每个事件 ID 调用 <code>CalendarValueHistoryByEvent</code> 函数。在这个应用中，我们对 <code>values</code> 数组的内容不感兴趣，因为我们只需要知道它们的数量。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarEvent events[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarValue values[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   CalendarEventStats stats[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime from </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scope;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scope;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CountryOrCurrency) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventByCountry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CountryOrCurrency, events));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventByCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CountryOrCurrency, events));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(events); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistoryByEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(events[i].id, values, from, to))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CalendarEventStats event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {events[i].id, events[i].name,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            CalendarEventStats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::importances[events[i].importance], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values)};</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats, event);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   SORT_STRUCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CalendarEventStats, stats, count);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayReverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>函数调用成功后，我们填充 <code>CalendarEventStats</code> 结构体并将其添加到结构体数组 <code>stats</code> 中。接下来，我们按照我们已经知道的方式对结构体进行排序（<code>SORT_STRUCT</code> 宏在“数组中的比较、排序和搜索”部分有描述）。</p><p>使用默认设置运行该脚本会在日志中生成类似如下的内容（已缩写）。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>CalendarEventByCountry(CountryOrCurrency,events)=82 / ok</span></span>
<span class="line"><span>          [id]                                                [name] [importance] [count]</span></span>
<span class="line"><span>[ 0] 999520001 &quot;CFTC EUR Non-Commercial Net Positions&quot;               &quot;Low&quot;             79</span></span>
<span class="line"><span>[ 1] 999010029 &quot;ECB President Lagarde Speech&quot;                        &quot;High&quot;            69</span></span>
<span class="line"><span>[ 2] 999010035 &quot;ECB Executive Board Member Elderson Speech&quot;          &quot;Medium&quot;          37</span></span>
<span class="line"><span>[ 3] 999030027 &quot;Core CPI&quot;                                            &quot;Low&quot;             36</span></span>
<span class="line"><span>[ 4] 999030026 &quot;CPI&quot;                                                 &quot;Low&quot;             36</span></span>
<span class="line"><span>[ 5] 999030025 &quot;CPI excl. Energy and Unprocessed Food y/y&quot;           &quot;Low&quot;             36</span></span>
<span class="line"><span>[ 6] 999030024 &quot;CPI excl. Energy and Unprocessed Food m/m&quot;           &quot;Low&quot;             36</span></span>
<span class="line"><span>[ 7] 999030010 &quot;Core CPI m/m&quot;                                        &quot;Medium&quot;          36</span></span>
<span class="line"><span>[ 8] 999030013 &quot;CPI y/y&quot;                                             &quot;Low&quot;             36</span></span>
<span class="line"><span>[ 9] 999030012 &quot;Core CPI y/y&quot;                                        &quot;Low&quot;             36</span></span>
<span class="line"><span>[10] 999040006 &quot;Consumer Confidence Index&quot;                           &quot;Low&quot;             36</span></span>
<span class="line"><span>[11] 999030011 &quot;CPI m/m&quot;                                             &quot;Medium&quot;          36</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>[65] 999010008 &quot;ECB Economic Bulletin&quot;                               &quot;Medium&quot;           8</span></span>
<span class="line"><span>[66] 999030023 &quot;Wage Costs y/y&quot;                                      &quot;Medium&quot;           6</span></span>
<span class="line"><span>[67] 999030009 &quot;Labour Cost Index&quot;                                   &quot;Low&quot;              6</span></span>
<span class="line"><span>[68] 999010025 &quot;ECB Bank Lending Survey&quot;                             &quot;Low&quot;              6</span></span>
<span class="line"><span>[69] 999010030 &quot;ECB Supervisory Board Member af Jochnick Speech&quot;     &quot;Medium&quot;           4</span></span>
<span class="line"><span>[70] 999010022 &quot;ECB Supervisory Board Member Hakkarainen Speech&quot;     &quot;Medium&quot;           3</span></span>
<span class="line"><span>[71] 999010028 &quot;ECB Financial Stability Review&quot;                      &quot;Medium&quot;           3</span></span>
<span class="line"><span>[72] 999010009 &quot;ECB Targeted LTRO&quot;                                   &quot;Medium&quot;           2</span></span>
<span class="line"><span>[73] 999010036 &quot;ECB Supervisory Board Member Tuominen Speech&quot;        &quot;Medium&quot;           1</span></span></code></pre></div><p>请注意，总共接收到了 82 种类型的事件，然而，在统计数组中，我们只有 74 种。这是因为如果在指定的日期范围内没有任何类型的事件，<code>CalendarValueHistoryByEvent</code> 函数会返回 <code>false</code>（失败），并且 <code>_LastError</code> 中的错误代码为 0。在上述测试中，有 8 个这样的条目，从理论上讲它们是存在的，但在这一年中从未出现过。</p><h2 id="按-id-读取事件记录" tabindex="-1">按 ID 读取事件记录 <a class="header-anchor" href="#按-id-读取事件记录" aria-label="Permalink to &quot;按 ID 读取事件记录&quot;">​</a></h2><p>了解了近期的事件日程安排后，交易员可以相应地调整他们的交易机器人。日历 API 中没有用于自动跟踪新闻发布的函数或事件（这里的 “事件” 是指类似于 <code>OnTick</code> 那样用于处理新金融信息的函数，比如 <code>OnCalendar</code>）。算法必须以任何选定的频率自行完成这项任务。特别是，你可以使用前面讨论过的函数之一（例如 <code>CalendarValueHistoryByEvent</code>、<code>CalendarValueHistory</code>）来找出所需事件的标识符，然后调用 <code>CalendarValueById</code> 来获取 <code>MqlCalendarValue</code> 结构中字段的当前状态。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarValueById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ulong</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>该函数用关于特定事件的当前信息填充通过引用传递的结构。</p><p>该函数的结果表示成功（<code>true</code>）或错误（<code>false</code>）。</p><p>我们创建一个简单的无缓冲区指标 <code>CalendarRecordById.mq5</code>，它将在未来找到最近的 “金融指标” 类型（即数值指标）的事件，并在定时器上轮询其状态。当新闻发布时，数据将会改变（指标的 “实际” 值将变得已知），并且该指标将显示一个警报。</p><p>轮询日历的频率在输入变量中设置。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimerSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>我们在 <code>OnInit</code> 中启动定时器。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   EventSetTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TimerSeconds);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了方便地将事件描述输出到日志中，我们使用 <code>MqlCalendarRecord</code> 结构，我们在脚本 <code>CalendarForDates.mq5</code> 的示例中已经了解过这个结构。</p><p>为了存储新闻信息的初始状态，我们描述 <code>track</code> 结构。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarValue track;</span></span></code></pre></div><p>当该结构为空时（并且 <code>id</code> 字段中为 <code>0</code>），程序必须查询即将发生的事件，并在其中找到最接近的 <code>CALENDAR_TYPE_INDICATOR</code> 类型的事件，并且该事件的当前值尚不可知。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">track.id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarValue values[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DAY_LONG </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            MqlCalendarEvent event;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            CalendarEventById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values[i].event_id, event);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_TYPE_INDICATOR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">values[i].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HasActualValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               track </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> values[i];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               PrintFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Started monitoring </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%lld</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, track.id);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               StructPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(track), ARRAYPRINT_HEADER);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>找到的事件被复制到 <code>track</code> 并输出到日志中。在那之后，每次调用 <code>OnTimer</code> 都归结为将关于该事件的更新信息获取到 <code>update</code> 结构中，该结构使用 <code>track.id</code> 标识符传递给 <code>CalendarValueById</code>。接下来，使用辅助函数 <code>StructCompare</code>（基于 <code>StructToCharArray</code> 和 <code>ArrayCompare</code>，请参阅完整的源代码）比较原始结构和新结构。任何差异都会导致打印出新的状态（预测可能已经改变），并且如果出现当前值，定时器将停止。要开始等待下一条新闻，需要重新初始化这个指标：这个指标是用于演示的，为了根据新闻列表控制情况，我们稍后将开发一个更实用的过滤器类。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarValue update;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(track.id, update))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fabs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StructCompare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(track, update)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;News </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%lld</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> changed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, track.id));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            PrintFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New state of </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%lld</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, track.id);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            StructPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarRecord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(update), ARRAYPRINT_HEADER);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(update.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HasActualValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Timer stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               EventKillTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               track </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> update;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> track.time)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         Comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Forthcoming event time: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, track.time,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;, remaining: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Timing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(track.time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         Comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Forthcoming event time: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, track.time,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;, late for: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Timing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> track.time)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在等待事件发生时，该指标会显示一条注释，其中包含新闻发布的预期时间以及距离发布还有多长时间（或者已经延迟了多长时间）。</p><p><strong>对即将发布的新闻的预期或过期情况的注释</strong></p><p><strong>关于等待下一条新闻或新闻延迟的注释</strong></p><p>需要注意的是，新闻可能会比预定日期早一点或晚一点发布。在对历史数据进行新闻策略测试时，这会带来一些问题，因为终端中以及通过 MQL5 API 更新日历条目的时间并未提供。我们将在下一节中尝试部分解决这个问题。</p><p>以下是该指标产生的带有间隔的日志输出片段：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>CalendarValueHistory(values,TimeCurrent(),TimeCurrent()+(60*60*24)*3)=186 / ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Started monitoring 156045</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  [id] [event_id]              [time]            [period] [revision] »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>156045  840020013 2022.06.27 15:30:00 2022.05.01 00:00:00          0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>»       [actual_value] [prev_value] [revised_prev_value] [forecast_value] [impact_type] »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>» -9223372036854775808       400000 -9223372036854775808                0             0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>» [importance]                     [name] [currency] [code] [actual] [previous] [revised] [forecast]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>» &quot;Medium&quot;     &quot;Durable Goods Orders m/m&quot; &quot;USD&quot;      &quot;US&quot;        nan    0.40000       nan    0.00000</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Alert: News 156045 changed</span></span>
<span class="line"><span></span></span>
<span class="line"><span>New state of 156045</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  [id] [event_id]              [time]            [period] [revision] »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>156045  840020013 2022.06.27 15:30:00 2022.05.01 00:00:00          0 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>» [actual_value] [prev_value] [revised_prev_value] [forecast_value] [impact_type] »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>»         700000       400000 -9223372036854775808                0             1 »</span></span>
<span class="line"><span></span></span>
<span class="line"><span>» [importance]                     [name] [currency] [code] [actual] [previous] [revised] [forecast]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>» &quot;Medium&quot;     &quot;Durable Goods Orders m/m&quot; &quot;USD&quot;      &quot;US&quot;    0.70000    0.40000       nan    0.00000</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Timer stopped</span></span></code></pre></div><p>更新后的新闻具有 <code>actual_value</code> 值。</p><p>为了在测试期间不用等待太长时间，建议在主要市场的工作时间内运行这个指标，此时新闻发布的密度较高。</p><p><code>CalendarValueById</code> 函数不是唯一可以用于监控日历变化的函数，而且可能也不是最灵活的函数。在接下来的部分中，我们将研究其他几种方法。</p><h2 id="按国家或货币跟踪事件变化" tabindex="-1">按国家或货币跟踪事件变化 <a class="header-anchor" href="#按国家或货币跟踪事件变化" aria-label="Permalink to &quot;按国家或货币跟踪事件变化&quot;">​</a></h2><p>正如在日历基本概念部分所提到的，平台通过一些内部方式记录所有事件的变化情况。每种状态都由一个变化标识符（change_id）来表征。在 MQL5 函数中，有两个函数可以让你找到这个标识符（在任意时间点），然后请求之后发生变化的日历条目。其中一个函数是 <code>CalendarValueLast</code>，我们将在本节讨论它。另一个函数 <code>CalendarValueLastByEvent</code> 将在下一节讨论。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>int CalendarValueLast(ulong &amp;change_id, MqlCalendarValue &amp;values[],</span></span>
<span class="line"><span>  const string country = NULL, const string currency = NULL)</span></span></code></pre></div><p><code>CalendarValueLast</code> 函数有两个作用：获取最后已知的日历变化标识符 <code>change_id</code>，并使用自上次由 <code>change_id</code> 中传入的 ID 所表示的修改以来的已修改记录填充 <code>values</code> 数组。换句话说，<code>change_id</code> 参数既作为输入也作为输出。这就是为什么它是一个引用，并且需要指定一个变量。</p><p>如果我们向函数中输入的 <code>change_id</code> 等于 0，那么该函数会用当前的标识符填充这个变量，但不会填充数组。</p><p>你可以选择使用参数 <code>country</code> 和 <code>currency</code>，通过国家和货币来设置对记录的筛选条件。</p><p>该函数返回复制的日历条目的数量。由于在第一种操作模式（<code>change_id = 0</code>）下数组不会被填充，所以返回 0 并不表示错误。如果自指定的更改以来日历没有被修改，我们也可能得到 0。因此，要检查是否有错误，应该分析 <code>_LastError</code>。</p><p>所以使用这个函数的常见方式是循环检查日历的变化情况。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>ulong change = 0;</span></span>
<span class="line"><span>MqlCalendarValue values[];</span></span>
<span class="line"><span>while(!IsStopped())</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span> // 传入我们已知的最后一个标识符，如果出现新的标识符则获取它</span></span>
<span class="line"><span>   if(CalendarValueLast(change, values))</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span> // 分析新增和已更改的记录</span></span>
<span class="line"><span>      ArrayPrint(values);</span></span>
<span class="line"><span>      ... </span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   Sleep(1000);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这可以在一个循环中进行，也可以通过定时器或其他事件触发。</p><p>标识符在不断增加，但它们可能会不按顺序，也就是说，会跳过一些值。</p><p>需要注意的是，每个日历条目始终只存在于一个最新状态中：MQL5 不提供变化历史记录。通常情况下，这不是一个问题，因为每条新闻的生命周期是标准的：提前很长时间添加到数据库中，并在事件发生时补充相关数据。然而，在实际情况中，可能会出现各种偏差：修改预测值、调整时间或修改数值。通过 MQL5 API 从日历历史记录中无法确切知道记录在什么时间以及哪些内容发生了更改。因此，那些基于即时情况做出决策的交易系统将需要独立保存变化历史记录，并将其整合到智能交易系统中以便在测试器中运行。</p><p>使用 <code>CalendarValueLast</code> 函数，我们可以创建一个有用的服务程序 <code>CalendarChangeSaver.mq5</code>，它将以指定的时间间隔检查日历是否有变化，如果有变化，则将变化标识符与当前服务器时间一起保存到文件中。这将允许进一步使用文件中的信息，以便更真实地在日历历史记录上测试智能交易系统。当然，这将需要组织整个日历数据库的导出/导入，我们将逐步处理这个问题。</p><p>让我们提供输入变量来指定文件名和轮询间隔（以毫秒为单位）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>input string Filename = &quot;calendar.chn&quot;;</span></span>
<span class="line"><span>input int PeriodMsc = 1000;</span></span></code></pre></div><p>在 <code>OnStart</code> 处理程序的开头，我们打开二进制文件进行写入操作，确切地说是进行追加写入（如果文件已经存在）。这里不检查现有文件的格式，因此在嵌入到实际应用程序中时应该添加保护措施。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>void OnStart()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   ulong change = 0, last = 0;</span></span>
<span class="line"><span>   int count = 0;</span></span>
<span class="line"><span>   int handle = FileOpen(Filename,</span></span>
<span class="line"><span>      FILE_WRITE | FILE_READ | FILE_SHARE_WRITE | FILE_SHARE_READ | FILE_BIN);</span></span>
<span class="line"><span>   if(handle == INVALID_HANDLE)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      PrintFormat(&quot;Can&#39;t open file &#39;%s&#39; for writing&quot;, Filename);</span></span>
<span class="line"><span>      return;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   const ulong p = FileSize(handle);</span></span>
<span class="line"><span>   if(p &gt; 0)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      PrintFormat(&quot;Resuming file %lld bytes&quot;, p);</span></span>
<span class="line"><span>      FileSeek(handle, 0, SEEK_END);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   Print(&quot;Requesting start ID...&quot;);</span></span>
<span class="line"><span>   ...</span></span></code></pre></div><p>这里我们需要稍微岔开一下话题。</p><p>每次日历发生变化时，至少必须将一对 8 字节的整数写入文件中：当前时间（datetime）和新闻 ID（ulong），但可能会同时有多个记录发生变化。因此，除了日期之外，已更改记录的数量会被打包到第一个数字中。考虑到日期值适合存储在 0x7FFFFFFFF 范围内，因此高 3 个字节未被使用。正是在两个最高有效字节（左偏移 48 位）中放置了该服务在相应时间戳之后将写入的标识符数量。<code>PACK_DATETIME_COUNTER</code> 宏创建一个 “扩展” 日期，另外两个宏 <code>DATETIME</code> 和 <code>COUNTER</code>，我们在以后（由另一个程序）读取变化存档时会用到。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>#define PACK_DATETIME_COUNTER(D,C) (D | (((ulong)(C)) &lt;&lt; 48))</span></span>
<span class="line"><span>#define DATETIME(A) ((datetime)((A) &amp; 0x7FFFFFFFF))</span></span>
<span class="line"><span>#define COUNTER(A)  ((ushort)((A) &gt;&gt; 48))</span></span></code></pre></div><p>现在让我们回到主要的服务代码。在每隔 <code>PeriodMsc</code> 毫秒激活一次的循环中，我们使用 <code>CalendarValueLast</code> 请求变化情况。如果有变化，我们将当前服务器时间和接收到的标识符数组写入文件。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>   while(!IsStopped())</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      if(!TerminalInfoInteger(TERMINAL_CONNECTED))</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         Print(&quot;Waiting for connection...&quot;);</span></span>
<span class="line"><span>         Sleep(PeriodMsc);</span></span>
<span class="line"><span>         continue;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      MqlCalendarValue values[];</span></span>
<span class="line"><span>      const int n = CalendarValueLast(change, values);</span></span>
<span class="line"><span>      if(n &gt; 0)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         string records = &quot;[&quot; + Description(values[0]);</span></span>
<span class="line"><span>         for(int i = 1; i &lt; n; ++i)</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            records += &quot;,&quot; + Description(values[i]);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>         records += &quot;]&quot;;</span></span>
<span class="line"><span>         Print(&quot;New change ID: &quot;, change, &quot; &quot;,</span></span>
<span class="line"><span>            TimeToString(TimeTradeServer(), TIME_DATE | TIME_SECONDS), &quot;\\n&quot;, records);</span></span>
<span class="line"><span>         FileWriteLong(handle, PACK_DATETIME_COUNTER(TimeTradeServer(), n));</span></span>
<span class="line"><span>         for(int i = 0; i &lt; n; ++i)</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            FileWriteLong(handle, values[i].id);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>         FileFlush(handle);</span></span>
<span class="line"><span>         ++count;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      else if(_LastError == 0)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         if(!last &amp;&amp; change)</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            Print(&quot;Start change ID obtained: &quot;, change);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      last = change;</span></span>
<span class="line"><span>      Sleep(PeriodMsc);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   PrintFormat(&quot;%d records added&quot;, count);</span></span>
<span class="line"><span>   FileClose(handle);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>为了方便展示每个新闻事件的信息，我们编写了一个辅助函数 <code>Description</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>string Description(const MqlCalendarValue &amp;value)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   MqlCalendarEvent event;</span></span>
<span class="line"><span>   MqlCalendarCountry country;</span></span>
<span class="line"><span>   CalendarEventById(value.event_id, event);</span></span>
<span class="line"><span>   CalendarCountryById(event.country_id, country);</span></span>
<span class="line"><span>   return StringFormat(&quot;%lld (%s/%s @ %s)&quot;,</span></span>
<span class="line"><span>      value.id, country.code, event.name, TimeToString(value.time));</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这样，日志不仅会显示标识符，还会显示国家代码、新闻标题和计划发布时间。</p><p>假设该服务应该运行相当长的时间，以便收集足够用于测试的信息（几天、几周、几个月）。不幸的是，就像订单簿一样，平台没有提供现成的订单簿或日历编辑历史记录，所以它们的收集完全取决于 MQL 程序的开发者。</p><p>让我们看看该服务的实际运行情况。在日志的下一个片段（时间范围为 2022 年 6 月 28 日 15:30 - 16:00）中，一些新闻事件涉及遥远的未来（它们包含 <code>prev_value</code> 字段的值，该字段也是同名当前事件的 <code>actual_value</code> 字段）。然而，还有其他更重要的事情：新闻发布的实际时间可能与计划时间有很大差异，有时会相差几分钟。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Requesting start ID...</span></span>
<span class="line"><span>Start change ID obtained: 86358784</span></span>
<span class="line"><span>New change ID: 86359040 2022.06.28 15:30:42</span></span>
<span class="line"><span>[155955 (US/Wholesale Inventories m/m @ 2022.06.28 15:30)]</span></span>
<span class="line"><span>New change ID: 86359296 2022.06.28 15:30:45</span></span>
<span class="line"><span>[155956 (US/Wholesale Inventories m/m @ 2022.07.08 17:00)]</span></span>
<span class="line"><span>New change ID: 86359552 2022.06.28 15:30:48</span></span>
<span class="line"><span>[156117 (US/Goods Trade Balance @ 2022.06.28 15:30)]</span></span>
<span class="line"><span>New change ID: 86359808 2022.06.28 15:30:51</span></span>
<span class="line"><span>[156118 (US/Goods Trade Balance @ 2022.07.27 15:30)]</span></span>
<span class="line"><span>New change ID: 86360064 2022.06.28 15:30:54</span></span>
<span class="line"><span>[156231 (US/Retail Inventories m/m @ 2022.06.28 15:30)]</span></span>
<span class="line"><span>New change ID: 86360320 2022.06.28 15:30:57</span></span>
<span class="line"><span>[156232 (US/Retail Inventories m/m @ 2022.07.15 17:00)]</span></span>
<span class="line"><span>New change ID: 86360576 2022.06.28 15:31:00</span></span>
<span class="line"><span>[156255 (US/Retail Inventories excl. Autos m/m @ 2022.06.28 15:30)]</span></span>
<span class="line"><span>New change ID: 86360832 2022.06.28 15:31:03</span></span>
<span class="line"><span>[156256 (US/Retail Inventories excl. Autos m/m @ 2022.07.15 17:00)]</span></span>
<span class="line"><span>New change ID: 86361088 2022.06.28 15:31:07</span></span>
<span class="line"><span>[155956 (US/Wholesale Inventories m/m @ 2022.07.08 17:00)]</span></span>
<span class="line"><span>New change ID: 86361344 2022.06.28 15:31:10</span></span>
<span class="line"><span>[156118 (US/Goods Trade Balance @ 2022.07.27 15:30)]</span></span>
<span class="line"><span>New change ID: 86361600 2022.06.28 15:31:13</span></span>
<span class="line"><span>[156232 (US/Retail Inventories m/m @ 2022.07.15 17:00)]</span></span>
<span class="line"><span>New change ID: 86362368 2022.06.28 15:36:47</span></span>
<span class="line"><span>[158534 (US/Challenger Job Cuts y/y @ 2022.07.07 14:30)]</span></span>
<span class="line"><span>New change ID: 86362624 2022.06.28 15:51:23</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>New change ID: 86364160 2022.06.28 16:01:39</span></span>
<span class="line"><span>[154531 (US/HPI m/m @ 2022.06.28 16:00)]</span></span>
<span class="line"><span>New change ID: 86364416 2022.06.28 16:01:42</span></span>
<span class="line"><span>[154532 (US/HPI m/m @ 2022.07.26 16:00)]</span></span>
<span class="line"><span>New change ID: 86364672 2022.06.28 16:01:46</span></span>
<span class="line"><span>[154543 (US/HPI y/y @ 2022.06.28 16:00)]</span></span>
<span class="line"><span>New change ID: 86364928 2022.06.28 16:01:49</span></span>
<span class="line"><span>[154544 (US/HPI y/y @ 2022.07.26 16:00)]</span></span>
<span class="line"><span>New change ID: 86365184 2022.06.28 16:01:54</span></span>
<span class="line"><span>[154561 (US/HPI @ 2022.06.28 16:00)]</span></span>
<span class="line"><span>New change ID: 86365440 2022.06.28 16:01:58</span></span>
<span class="line"><span>[154571 (US/HPI @ 2022.07.26 16:00)]</span></span>
<span class="line"><span>New change ID: 86365696 2022.06.28 16:02:01</span></span>
<span class="line"><span>[154532 (US/HPI m/m @ 2022.07.26 16:00)]</span></span>
<span class="line"><span>New change ID: 86365952 2022.06.28 16:02:05</span></span>
<span class="line"><span>[154544 (US/HPI y/y @ 2022.07.26 16:00)]</span></span>
<span class="line"><span>New change ID: 86366208 2022.06.28 16:02:09</span></span>
<span class="line"><span>[154571 (US/HPI @ 2022.07.26 16:00)]</span></span></code></pre></div><p>当然，这并不是对所有类型的交易策略都很重要，而只是对那些在市场中快速交易的策略重要。对于它们来说，创建的日历编辑存档可以为新闻智能交易系统提供更准确的测试。我们将在以后讨论如何将日历 “连接” 到测试器，但现在，我们将展示如何读取接收到的文件。</p><p>我们将使用脚本 <code>CalendarChangeReader.mq5</code> 来演示所讨论的功能。在实践中，给定的源代码应该放置在智能交易系统中。</p><p>输入变量允许你设置要读取的文件名和扫描的开始日期。如果服务继续运行（写入文件），你需要将文件以不同的名称复制到另一个文件夹（在示例脚本中，文件被重命名）。如果 <code>Start</code> 参数为空，对新闻变化的读取将从当前日期的开始处进行。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>input string Filename = &quot;calendar2.chn&quot;;</span></span>
<span class="line"><span>input datetime Start;</span></span></code></pre></div><p>描述了 <code>ChangeState</code> 结构，用于存储有关个别编辑的信息。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>struct ChangeState</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   datetime dt;</span></span>
<span class="line"><span>   ulong ids[];</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   ChangeState(): dt(LONG_MAX) {}</span></span>
<span class="line"><span>   ChangeState(const datetime at, ulong &amp;_ids[])</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      dt = at;</span></span>
<span class="line"><span>      ArraySwap(ids, _ids);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   void operator=(const ChangeState &amp;other)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      dt = other.dt;</span></span>
<span class="line"><span>      ArrayCopy(ids, other.ids);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>};</span></span></code></pre></div><p>它在 <code>ChangeFileReader</code> 类中使用，该类完成了读取文件的大部分工作，并为调用者提供适合特定时间点的变化信息。</p><p>文件句柄作为参数传递给构造函数，测试的开始时间也是如此。在 <code>readState</code> 方法中执行读取文件并为一次日历编辑填充 <code>ChangeState</code> 结构的操作。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>class ChangeFileReader</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   const int handle;</span></span>
<span class="line"><span>   ChangeState current;</span></span>
<span class="line"><span>   const ChangeState zero;</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>public:</span></span>
<span class="line"><span>   ChangeFileReader(const int h, const datetime start = 0): handle(h)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      if(readState())</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         if(start)</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            ulong dummy[];</span></span>
<span class="line"><span>            check(start, dummy, true); // 找到开始时间之后的第一次编辑 </span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   bool readState()</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      if(FileIsEnding(handle)) return false;</span></span>
<span class="line"><span>      ResetLastError();</span></span>
<span class="line"><span>      const ulong v = FileReadLong(handle);</span></span>
<span class="line"><span>      current.dt = DATETIME(v);</span></span>
<span class="line"><span>      ArrayFree(current.ids);</span></span>
<span class="line"><span>      const int n = COUNTER(v);</span></span>
<span class="line"><span>      for(int i = 0; i &lt; n; ++i)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         PUSH(current.ids, FileReadLong(handle));</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      return _LastError == 0;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>方法\`check\`会读取文件，直到出现未来的下一次编辑。在这种情况下，自上次调用该方法以来的所有先前（按时间戳）编辑都会被放入输出数组\`records\`中。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   bool check(datetime now, ulong &amp;records[], const bool fastforward = false)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      if(current.dt &gt; now) return false;</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      ArrayFree(records);</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      if(!fastforward)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         ArrayCopy(records, current.ids);</span></span>
<span class="line"><span>         current = zero;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      while(readState() &amp;&amp; current.dt &lt;= now)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         if(!fastforward) ArrayInsert(records, current.ids, ArraySize(records));</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      return true;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>以下是在\`OnStart\`中使用该类的方式：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>void OnStart()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   const long day = 60 * 60 * 24;</span></span>
<span class="line"><span>   datetime now = Start? Start : (datetime)(TimeCurrent() / day * day);</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   int handle = FileOpen(Filename,</span></span>
<span class="line"><span>      FILE_READ | FILE_SHARE_WRITE | FILE_SHARE_READ | FILE_BIN);</span></span>
<span class="line"><span>   if(handle == INVALID_HANDLE)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      PrintFormat(&quot;Can&#39;t open file &#39;%s&#39; for reading&quot;, Filename);</span></span>
<span class="line"><span>      return;</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   ChangeFileReader reader(handle, now);</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   // 逐步读取，在这个演示中人为地增加了时间\`now\`</span></span>
<span class="line"><span>   while(!FileIsEnding(handle))</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      // 在实际应用中，每次\`tick\`都可以调用\`reader.check\`</span></span>
<span class="line"><span>      ulong records[];</span></span>
<span class="line"><span>      if(reader.check(now, records))</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         Print(now);          // 输出时间</span></span>
<span class="line"><span>         ArrayPrint(records); // 已更改新闻的ID数组</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      now += 60; // 每次增加1分钟，可以按秒增加</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   FileClose(handle);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>以下是该脚本针对与之前日志片段中服务保存的相同日历变化的结果：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.06.28 15:31:00</span></span>
<span class="line"><span>155955 155956 156117 156118 156231 156232 156255</span></span>
<span class="line"><span>2022.06.28 15:32:00</span></span>
<span class="line"><span>156256 155956 156118 156232</span></span>
<span class="line"><span>2022.06.28 15:37:00</span></span>
<span class="line"><span>158534</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>2022.06.28 16:02:00</span></span>
<span class="line"><span>154531 154532 154543 154544 154561 154571</span></span>
<span class="line"><span>2022.06.28 16:03:00</span></span>
<span class="line"><span>154532 154544 154571</span></span>
<span class="line"><span></span></span>
<span class="line"><span>相同的标识符在虚拟时间中以与在线时相同的延迟重现，尽管在这里你可以看到四舍五入到1分钟的情况，这是因为我们在循环中设置了这样大小的人为步长。从理论上讲，出于效率考虑，我们可以将检查推迟到\`ChangeState current\`结构中存储的时间。所附的源代码定义了\`getState\`方法来获取这个时间。</span></span></code></pre></div><h2 id="按事件类型跟踪事件变化" tabindex="-1">按事件类型跟踪事件变化 <a class="header-anchor" href="#按事件类型跟踪事件变化" aria-label="Permalink to &quot;按事件类型跟踪事件变化&quot;">​</a></h2><p>MQL5 API 允许你不仅可以按整个日历的总体情况、按国家或货币来请求最近的变化，还能在更窄的范围内，确切地说，针对特定的事件类型来进行请求。</p><p>从理论上讲，可以说内置函数提供了根据几个基本条件对事件进行筛选的功能：时间、国家、货币或事件类型。对于其他属性，例如重要性或经济领域，你需要实现自己的筛选方法，我们稍后会处理这个问题。目前，让我们先介绍 <code>CalendarValueLastByEvent</code> 函数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarValueLastByEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ulong </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ulong </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">change_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MqlCalendarValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>该函数会将自 <code>change_id</code> 以来发生的、具有 <code>id</code> 标识符的特定类型的事件记录填充到通过引用传递的 <code>values</code> 数组中。<code>change_id</code> 参数既是输入参数也是输出参数：调用代码在其中传入日历过去状态的标识，之后请求变化；当控制权返回时，该函数会将日历数据库当前状态的标识写入 <code>change_id</code>。下次调用该函数时应使用这个值。</p><p>如果在 <code>change_id</code> 中传入 <code>null</code>，则该函数不会填充数组，而只是通过 <code>change_id</code> 参数返回数据库的当前状态。</p><p>数组可以是动态的（此时它将自动根据数据量进行调整），也可以是固定大小的（如果其大小不足，将仅复制能容纳的数据）。</p><p>该函数的输出值等于复制到 <code>values</code> 数组中的元素数量。如果没有变化或者指定了 <code>change_id = 0</code>，该函数将返回 0。</p><p>要检查是否有错误，需分析内置的 <code>_LastError</code> 变量。一些可能的错误代码如下：</p><ul><li>4004 - <code>ERR_NOT_ENOUGH_MEMORY</code>（内存不足，无法完成请求）。</li><li>5401 - <code>ERR_CALENDAR_TIMEOUT</code>（请求超时）。</li><li>5400 - <code>ERR_CALENDAR_MORE_DATA</code>（固定数组的大小不足以获取所有值）。</li></ul><p>我们不会为 <code>CalendarValueLastByEvent</code> 给出单独的示例。相反，让我们转向一个更复杂但有需求的任务，即根据新闻属性的任意条件查询和筛选日历条目，在这个任务中会涉及到所有的“日历” API 函数。这将是下一节的主题。</p><h2 id="按多个条件过滤事件" tabindex="-1">按多个条件过滤事件 <a class="header-anchor" href="#按多个条件过滤事件" aria-label="Permalink to &quot;按多个条件过滤事件&quot;">​</a></h2><p>从本章前面的部分我们了解到，MQL5 API 允许根据多个条件来请求财经日历事件：</p><ul><li>按国家（<code>CalendarValueHistory</code>，<code>CalendarValueLast</code>）</li><li>按频率（<code>CalendarValueHistory</code>，<code>CalendarValueLast</code>）</li><li>按事件类型 ID（<code>CalendarValueHistoryByEvent</code>，<code>CalendarValueLastByEvent</code>）</li><li>按时间范围（<code>CalendarValueHistory</code>，<code>CalendarValueHistoryByEvent</code>）</li><li>按自上次日历轮询以来的变化（<code>CalendarValueLast</code>，<code>CalendarValueLastByEvent</code>）</li><li>按特定新闻的 ID（<code>CalendarValueById</code>）</li></ul><p>这可以总结为以下函数表（在所有 <code>CalendarValue</code> 函数中，这里仅缺少用于获取一个特定值的 <code>CalendarValueById</code> 函数）：</p><table tabindex="0"><thead><tr><th>条件</th><th>时间范围</th><th>上次变化</th><th>国家</th><th>货币</th><th>事件</th></tr></thead><tbody><tr><td>函数</td><td><code>CalendarValueHistory</code></td><td><code>CalendarValueLast</code></td><td><code>CalendarValueHistory</code></td><td><code>CalendarValueHistory</code></td><td><code>CalendarValueHistoryByEvent</code></td></tr><tr><td></td><td></td><td></td><td><code>CalendarValueLast</code></td><td><code>CalendarValueLast</code></td><td><code>CalendarValueLastByEvent</code></td></tr></tbody></table><p>这样的工具包涵盖了主要的，但并非所有流行的日历分析场景。因此，在实践中，经常需要在 MQL5 中实现自定义的过滤机制，特别是包括按以下条件请求事件：</p><ul><li>多个国家</li><li>多种货币</li><li>多种类型的事件</li><li>事件的任意属性值（重要性、经济部门、报告期、类型、是否有预测、对汇率的估计影响、事件名称中的子字符串等）</li></ul><p>为了解决这些问题，我们创建了 <code>CalendarFilter</code> 类（<code>CalendarFilter.mqh</code>）。</p><p>由于内置 API 函数的特性，一些新闻属性比其他属性具有更高的优先级。这包括国家、货币和日期范围。它们可以在类的构造函数中指定，然后相应的属性不能在过滤条件中动态更改。</p><p>这是因为后续该过滤类将扩展新闻缓存功能，以便能够从测试器中读取数据，而构造函数的初始条件实际上定义了缓存上下文，在该上下文中可以进行进一步的过滤。例如，如果我们在创建对象时指定国家代码“EU”，那么显然通过它请求关于美国或巴西的新闻是没有意义的。日期范围也是类似的情况：在构造函数中指定它将使得无法接收该范围之外的新闻。</p><p>我们也可以在没有初始条件的情况下创建一个对象（因为所有构造函数参数都是可选的），然后它将能够在整个日历数据库（截至保存时）中缓存和过滤新闻。</p><p>此外，由于现在国家和货币几乎是唯一显示的（欧盟和欧元除外），它们通过单个参数 <code>context</code> 传递给构造函数：如果指定一个长度为 2 个字符的字符串，则表示国家代码（或国家组合），如果长度为 3 个字符，则表示货币代码。对于代码“EU”和“EUR”，欧元区是“EU”的一个子集（在有正式条约的国家范围内）。在特殊情况下，如果对非欧元区的欧盟国家感兴趣，也可以用“EU”上下文来描述它们。如果需要，可以使用我们稍后将介绍的方法动态地向过滤器添加关于这些国家（保加利亚列弗、匈牙利福林、丹麦克朗、冰岛克朗、波兰兹罗提、罗马尼亚列伊、克罗地亚库纳、捷克克朗、瑞典克朗）货币新闻的更窄条件。然而，由于一些特殊情况，不能保证这样的新闻会进入日历。</p><p>让我们开始研究这个类：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarFilter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 构造函数中设置的初始（可选）条件，不变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string context;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 国家和货币</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime from, to;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 日期范围</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fixedDates;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 如果在构造函数中传递了“from”/“to”，则它们不能更改</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 专用选择器（国家/货币/事件类型标识符）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string country[], currency[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong ids[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarValue values[];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 过滤结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      fixedDates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currency, context);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 即使 context 为 NULL，我们也将其用于轮询整个日历基础</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country, context);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CalendarFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> datetime</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> datetime</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_context), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_from), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_to)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>为国家和货币分配了两个数组：<code>country</code> 和 <code>currency</code>。如果在创建对象时它们没有从 <code>context</code> 中填充，那么 MQL 程序将能够添加多个国家或货币的条件，以便对它们执行组合新闻查询。</p><p>为了存储所有其他新闻属性的条件，在 <code>CalendarFilter</code> 对象中描述了 <code>selectors</code> 数组，其第二维等于 3。我们可以说这是一种表，其中每行有 3 列。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectors[][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // [0] - 属性, [1] - 值, [2] - 条件</span></span></code></pre></div><p>在第 0 个索引处，将存储新闻属性标识符。由于这些属性分布在三个基础表（<code>MqlCalendarCountry</code>，<code>MqlCalendarEvent</code>，<code>MqlCalendarValue</code>）中，它们使用广义枚举 <code>ENUM_CALENDAR_PROPERTY</code>（<code>CalendarDefines.mqh</code>）的元素来描述。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ENUM_CALENDAR_PROPERTY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                      // +/- 表示支持字段过滤</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_COUNTRY_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // -ulong</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_COUNTRY_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // -string</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_COUNTRY_CODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // +string (2 个字符)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_COUNTRY_CURRENCY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // +string (3 个字符)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_COUNTRY_GLYPH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // -string (1 个字符)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_COUNTRY_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // -string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // +ulong (事件类型 ID)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // +ENUM_CALENDAR_EVENT_TYPE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_SECTOR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // +ENUM_CALENDAR_EVENT_SECTOR</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_FREQUENCY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +ENUM_CALENDAR_EVENT_FREQUENCY</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_TIMEMODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // +ENUM_CALENDAR_EVENT_TIMEMODE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_UNIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // +ENUM_CALENDAR_EVENT_UNIT</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_IMPORTANCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // +ENUM_CALENDAR_EVENT_IMPORTANCE</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_MULTIPLIER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // +ENUM_CALENDAR_EVENT_MULTIPLIER</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_DIGITS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // -uint</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_SOURCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // +string (&quot;http[s]://&quot;)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_CODE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // -string</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_EVENT_NAME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // +string (4+ 个字符或通配符 &#39;*&#39;)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // -ulong</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_TIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // +datetime</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_PERIOD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // +datetime (类似 long)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_REVISION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +int</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_ACTUAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // +long</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_PREVIOUS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +long</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_REVISED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // +long</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_FORECAST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +long</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_IMPACT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // +ENUM_CALENDAR_EVENT_IMPACT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_RECORD_PREVISED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +非标准 (如果有则为 previous 或 revised)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   CALENDAR_PROPERTY_CHANGE_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // -ulong (保留)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>索引 1 将存储与新闻记录选择条件进行比较的值。例如，如果你想按经济部门设置过滤器，那么我们在 <code>selectors[i][0]</code> 中写入 <code>CALENDAR_PROPERTY_EVENT_SECTOR</code>，并在 <code>selectors[i][1]</code> 中写入标准枚举 <code>ENUM_CALENDAR_EVENT_SECTOR</code> 的一个值。</p><p>最后，最后一列（第 2 个索引下）保留用于将选择器值与新闻中的属性值进行比较的操作：所有支持的操作都总结在 <code>IS</code> 枚举中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   EQUAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   NOT_EQUAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   GREATER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   LESS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   OR_EQUAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>我们在 <code>TradeFilter.mqh</code> 中看到过类似的方法。因此，我们不仅能够设置值的相等条件，还能设置不等式或大于/小于关系的条件。例如，很容易想象对 <code>CALENDAR_PROPERTY_EVENT_IMPORTANCE</code> 字段的过滤，它应该大于 <code>CALENDAR_IMPORTANCE_LOW</code>（这是标准 <code>ENUM_CALENDAR_EVENT_IMPORTANCE</code> 枚举的一个元素），这意味着选择中等和高重要性的新闻。</p><p>专门为日历定义的下一个枚举是 <code>ENUM_CALENDAR_SCOPE</code>。由于日历过滤通常与时间跨度相关，这里列出了最常被请求的时间跨度。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DAY_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     (60 * 60 * 24)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WEEK_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">DAY_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> * 7)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MONTH_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">DAY_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> * 30)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QUARTER_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MONTH_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> * 3)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YEAR_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">MONTH_LONG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> * 12)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ENUM_CALENDAR_SCOPE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   SCOPE_DAY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DAY_LONG,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 天</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   SCOPE_WEEK</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WEEK_LONG,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 周</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   SCOPE_MONTH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MONTH_LONG,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 月</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   SCOPE_QUARTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QUARTER_LONG,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 季度</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   SCOPE_YEAR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> YEAR_LONG,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 年</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>所有枚举都放在一个单独的头文件 <code>CalendarDefines.mqh</code> 中。</p><p>但让我们回到 <code>CalendarFilter</code> 类。<code>selectors</code> 数组的类型是 <code>long</code>，这适合存储几乎所有涉及类型的值：枚举、日期和时间、标识符、整数，甚至经济指标值，因为它们在日历中以长整数形式存储（为实际值的百万分之一）。然而，对于字符串属性该怎么办呢？</p><p>这个问题通过使用字符串数组 <code>stringCache</code> 来解决，过滤条件中提到的所有字符串都将添加到该数组中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarFilter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string stringCache[];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // “selectors”中所有行的缓存</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>然后，我们可以轻松地在 <code>selectors[i][1]</code> 中存储 <code>stringCache</code> 数组中元素的索引，而不是字符串值。</p><p>为了用过滤条件填充 <code>selectors</code> 数组，提供了几个 <code>let</code> 方法，特别是对于枚举类型：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarFilter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 这里处理所有枚举类型的字段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CalendarFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQUAL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EXPAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selectors);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 根据类型 E，返回 ENUM_CALENDAR_PROPERTY 元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>对于指标的实际值：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 这里处理以下字段：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // CALENDAR_PROPERTY_RECORD_ACTUAL, CALENDAR_PROPERTY_RECORD_PREVIOUS,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // CALENDAR_PROPERTY_RECORD_REVISED, CALENDAR_PROPERTY_RECORD_FORECAST,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 以及 CALENDAR_PROPERTY_RECORD_PERIOD (作为 long)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CalendarFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ENUM_CALENDAR_PROPERTY</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQUAL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EXPAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selectors);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> property;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>对于字符串：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 这里可以找到所有字符串属性的条件（缩写）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CalendarFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IS</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQUAL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wildcard </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(find, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(find) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wildcard)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 如果初始上下文与国家不同，我们可以用国家补充它，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 否则过滤器将被忽略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               country[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> find;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将“所有国家”缩小到一个（可能会添加更多）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country, find);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 只有当初始上下文中没有该货币时，我们才能设置货币过滤器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currency, find);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EXPAND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selectors);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringCache, find);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(find, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(find, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_SOURCE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">               selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_NAME;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringCache) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            selectors[n][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>在字符串的方法重载中，请注意，长度为 2 或 3 个字符的字符串（如果它们没有模板星号“<em>”，“</em>” 是任意字符序列的替代）分别落入国家和符号数组中，所有其他字符串都被视为名称或新闻来源的片段，并且这两个字段都涉及 <code>stringCache</code> 和 <code>selectors</code>。</p><p>该类还以特殊方式支持按事件类型（标识符）进行过滤。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong ids[];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 过滤后的事件类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CalendarFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ulong</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ids, event);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>因此，优先级过滤器（在 <code>selectors</code> 数组之外处理）的数量不仅包括国家、货币和日期范围，还包括事件类型标识符。这样的设计决策是因为这些参数可以作为输入传递给某些日历 API 函数。我们将所有其他新闻属性作为结构体数组（<code>MqlCalendarValue</code>，<code>MqlCalendarEvent</code>，<code>MqlCalendarCountry</code>）中的输出字段值获取。正是根据它们，我们将按照 <code>selectors</code> 数组中的规则进行额外的过滤。</p><p>所有 <code>let</code> 方法都返回一个指向对象的指针，这允许对它们的调用进行链式操作。例如，像这样：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CalendarFilter f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CALENDAR_IMPORTANCE_LOW, GREATER)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 重要和中等重要的新闻</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CALENDAR_TIMEMODE_DATETIME)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 仅具有确切时间的事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 几个国家，或者，从中选择...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;USD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GBP&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...几种货币（但两个条件不会同时生效）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MONTH_LONG, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WEEK_LONG)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 围绕当前时间的日期范围</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LONG_MIN, CALENDAR_PROPERTY_RECORD_FORECAST, NOT_EQUAL)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 有预测</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;farm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 按新闻标题进行全文搜索</span></span></code></pre></div><p>国家和货币条件理论上可以组合。然而，请注意，只能为国家或货币设置多个值，而不能同时为两者设置。在当前实现中，上下文的这两个方面之一（两者中的任意一个）仅支持一个值或不支持任何值（即对其没有过滤）。例如，如果选择了货币 EUR，则只能在德国和法国（国家代码“DE”和“FR”）中缩小新闻的搜索上下文。结果，欧洲央行和欧盟统计局的新闻将被丢弃，特别是意大利和西班牙的新闻也会被丢弃。然而，在这种情况下，指示 EUR 是多余的，因为德国和法国没有其他货币。</p><p>由于该类使用内置函数，其中参数国家和货币是通过逻辑与操作应用于新闻的，所以要检查过滤条件的一致性。</p><p>在调用代码设置过滤条件后，需要根据这些条件选择新闻。这就是公共方法 <code>select</code> 要做的事情（简化后给出）。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayFree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ids))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 事件类型标识符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ids); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            MqlCalendarValue temp[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistoryByEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ids[i], temp, from, to)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         ArrayCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, temp, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 多个国家或货币，选择数量较多的那个作为基础，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 仅使用较小数组的第一个元素</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currency))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currency) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currency[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            MqlCalendarValue temp[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(temp, from, to, country[i], c)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               ArrayCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, temp, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> country[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currency); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            MqlCalendarValue temp[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(temp, from, to, c, currency[i])))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">               ArrayCopy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, temp, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">               ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      SORT_STRUCT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MqlCalendarValue, result, time);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>根据填充了哪个优先级属性数组，该方法会调用不同的 API 函数来轮询日历：</p><ul><li>如果 <code>ids</code> 数组被填充，则针对所有标识符循环调用 <code>CalendarValueHistoryByEvent</code>。</li><li>如果 <code>country</code> 数组被填充且其大小大于 <code>currency</code> 数组，则调用 <code>CalendarValueHistory</code> 并循环遍历各个国家。</li><li>如果 <code>currency</code> 数组被填充且其大小大于或等于 <code>country</code> 数组，则调用 <code>CalendarValueHistory</code> 并循环遍历各个货币。</li></ul><p>每次函数调用都会填充一个 <code>MqlCalendarValue</code> 结构体的临时数组 <code>temp[]</code>，该数组会依次累加到 <code>result</code> 参数数组中。在根据主要条件（日期、国家、货币、标识符）将所有相关新闻写入 <code>result</code> 数组后（如果有的话），辅助方法 <code>filter</code> 就会发挥作用，它会根据 <code>selectors</code> 中的条件对数组进行过滤。在 <code>select</code> 方法的最后，新闻项会按时间顺序排序，这可能会因组合“日历”函数的多个查询结果而被打乱。排序是使用 <code>SORT_STRUCT</code> 宏实现的，该宏在“数组中的比较、排序和搜索”部分有讨论。</p><p>对于新闻数组的每个元素，<code>filter</code> 方法会调用工作方法 <code>match</code>，该方法返回一个布尔值，指示新闻是否符合过滤条件。如果不符合，该元素将从数组中移除。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result[i]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ArrayRemove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, i, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>最后，<code>match</code> 方法会分析我们的 <code>selectors</code> 数组，并将其与传入的 <code>MqlCalendarValue</code> 结构体的字段进行比较。以下是简化后的代码：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarEvent event;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.event_id, event)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 遍历所有过滤条件，除了国家、货币、日期、ID，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 这些在调用 Calendar 函数时已经使用过了</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selectors, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      string text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 从新闻或其描述中获取字段值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_TYPE:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.type;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_SECTOR:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.sector;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_TIMEMODE:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.time_mode;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_IMPORTANCE:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.importance;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_SOURCE:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.source_url;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_EVENT_NAME:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_RECORD_IMPACT:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.impact_type;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_RECORD_ACTUAL:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.actual_value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_RECORD_PREVIOUS:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.prev_value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_RECORD_REVISED:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.revised_prev_value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_RECORD_PREVISED:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 之前的值或修订后的值（如果有）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.revised_prev_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LONG_MIN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.revised_prev_value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.prev_value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_PROPERTY_RECORD_FORECAST:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.forecast_value;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将值与过滤条件进行比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 数值字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((IS)selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQUAL:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(field, selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NOT_EQUAL:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(field, selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GREATER:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(field, selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LESS:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(field, selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 字符串字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string find </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringCache[(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((IS)selectors[j][</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQUAL:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, find)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NOT_EQUAL:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, find)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GREATER:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, find)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LESS:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text, find)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>equal</code> 和 <code>greater</code> 方法几乎完全复制了我们之前使用过滤类开发中的那些方法。</p><p>至此，过滤问题基本得到了解决，即 MQL 程序可以按以下方式使用 <code>CalendarFilter</code> 对象：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CalendarFilter f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 一系列对 let 方法的调用以设置过滤条件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarValue records[]; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>实际上，<code>select</code> 方法还可以做一些其他重要的事情，我们将其留作独立的可选研究内容。</p><p>首先，在得到的新闻列表中，最好以某种方式在过去和未来的新闻之间插入一个分隔符（定界符），以便用户能够注意到它。从理论上讲，这个功能对于日历来说极其重要，但由于某种原因，在 MetaTrader 5 用户界面和 mql5.com 网站上都不可用。我们的实现能够在过去和未来的新闻之间插入一个空结构体，我们应该直观地显示它（我们将在下面处理这个问题）。</p><p>其次，结果数组的大小可能会相当大（特别是在选择设置的初始阶段），因此 <code>select</code> 方法还额外提供了限制数组大小（<code>limit</code>）的功能。这是通过移除离当前时间最远的元素来实现的。</p><p>所以，完整的方法原型如下：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> delimiter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>默认情况下，不插入分隔符且数组不会被截断。</p><p>在前面几段中，我们提到了过滤的一个额外子任务，即对结果数组进行可视化。<code>CalendarFilter</code> 类有一个特殊的方法 <code>format</code>，它将传入的 <code>MqlCalendarValue &amp;data[]</code> 结构体数组转换为人类可读的字符串数组 <code>string &amp;result[]</code>。该方法的代码可以在附加文件 <code>CalendarFilter.mqh</code> 中找到。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ENUM_CALENDAR_PROPERTY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> padding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> header</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>我们想要显示的 <code>MqlCalendarValue</code> 字段在 <code>props</code> 数组中指定。回想一下，<code>ENUM_CALENDAR_PROPERTY</code> 枚举包含来自所有三个相关日历结构体的字段，因此 MQL 程序不仅可以自动显示特定事件记录中的经济指标，还可以显示其名称、特征、国家或货币代码。所有这些都是由 <code>format</code> 方法实现的。</p><p>输出结果数组中的每一行都包含一个字段值（数字、描述、枚举元素）的文本表示。结果数组的大小等于输入（<code>data</code> 中）的结构体数量与显示的字段数量（<code>props</code> 中）的乘积。可选参数 <code>header</code> 允许在输出数组的开头添加一行字段（列）名称。<code>padding</code> 参数控制在文本中生成额外的空格，以便在等宽字体中方便地显示表格（例如，在杂志中）。</p><p><code>CalendarFilter</code> 类还有另一个重要的公共方法：<code>update</code>。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]);</span></span></code></pre></div><p>它的结构几乎完全与 <code>select</code> 方法相同。然而，该方法不是调用 <code>CalendarValueHistoryByEvent</code> 和 <code>CalendarValueHistory</code> 函数，而是调用 <code>CalendarValueLastByEvent</code> 和 <code>CalendarValueLast</code> 函数。该方法的目的很明显：它向日历查询符合过滤条件的最新更改。但为了使其正常运行，它需要一个更改 ID。这个类中确实定义了这样一个字段：第一次填充它是在 <code>select</code> 方法内部。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarFilter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong change;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> delimiter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      change </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarValue dummy[];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      CalendarValueLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(change, dummy);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p><code>CalendarFilter</code> 类的一些细微之处仍然“隐藏在幕后”，但我们将在接下来的部分中讨论其中的一些内容。</p><p>让我们测试一下过滤器的实际效果：首先在一个简单的脚本 <code>CalendarFilterPrint.mq5</code> 中进行测试，然后在一个更实用的指标 <code>CalendarMonitor.mq5</code> 中进行测试。</p><p>在脚本的输入参数中，你可以设置上下文（国家代码或货币）、时间范围、用于按事件名称进行全文搜索的字符串，以及限制得到的新闻表格的大小。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string Context;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 上下文（国家 - 2 个字符，货币 - 3 个字符，空 - 无过滤）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_SCOPE Scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SCOPE_MONTH;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string Text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;farm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>根据这些参数，创建一个全局过滤对象。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarFilter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>然后，在 <code>OnStart</code> 中，我们配置一些额外的常量条件（事件的中等和高重要性）以及存在预测（该字段不等于 <code>LONG_MIN</code>），并将搜索字符串传递给该对象。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CALENDAR_IMPORTANCE_LOW, GREATER)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LONG_MIN, CALENDAR_PROPERTY_RECORD_FORECAST, NOT_EQUAL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Text);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 支持使用 &#39;*&#39; 进行替换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 注意：长度为 2 或 3 且没有 &#39;*&#39; 的字符串将分别被视为国家或货币代码</span></span></code></pre></div><p>接下来，调用 <code>select</code> 方法，并使用 <code>format</code> 方法将得到的 <code>MqlCalendarValue</code> 结构体数组格式化为一个有 9 列的表格。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarValue records[];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 应用过滤条件并获取结果</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Limit))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_CALENDAR_PROPERTY props[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_RECORD_TIME,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_COUNTRY_CURRENCY,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_EVENT_NAME,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_EVENT_IMPORTANCE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_RECORD_ACTUAL,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_RECORD_FORECAST,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_RECORD_PREVISED,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_RECORD_IMPACT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         CALENDAR_PROPERTY_EVENT_SECTOR,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 输出格式化后的结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      string result[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records, props, result, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubArrayCombine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; | &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p, p));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>表格的单元格被连接成行并输出到日志中。</p><p>使用默认设置（即对于所有国家和货币，事件名称中包含“farm”部分且为中等和高重要性），你可以得到类似这样的日程安排。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Selecting calendar records...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>country[i]= / ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>calendarValueHistory(temp,from,to,country[i],c)=2372 / ok</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Filtering 2372 records</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Got 9 records</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            TIME | CUR⁞ |                          NAME | IMPORTAN⁞ | ACTU⁞ | FORE⁞ | PREV⁞ |   IMPACT | SECT⁞</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.06.02 15:15 |  USD | ADP Nonfarm Employment Change |      HIGH |  +128 |  -225 |  +202 | POSITIVE |  JOBS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.06.02 15:30 |  USD |      Nonfarm Productivity q/q |  MODERATE |  -7.3 |  -7.5 |  -7.5 | POSITIVE |  JOBS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.06.03 15:30 |  USD |              Nonfarm Payrolls |      HIGH |  +390 |   -19 |  +436 | POSITIVE |  JOBS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.06.03 15:30 |  USD |      Private Nonfarm Payrolls |  MODERATE |  +333 |    +8 |  +405 | POSITIVE |  JOBS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.06.09 08:30 |  EUR |          Nonfarm Payrolls q/q |  MODERATE |  +0.3 |  +0.3 |  +0.3 |       NA |  JOBS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>               – |    – |                             – |         – |     – |     – |     – |        – |     –</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.07.07 15:15 |  USD | ADP Nonfarm Employment Change |      HIGH |  +nan |  -263 |  +128 |       NA |  JOBS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.07.08 15:30 |  USD |              Nonfarm Payrolls |      HIGH |  +nan |  -229 |  +390 |       NA |  JOBS</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2022.07.08 15:30 |  USD |      Private Nonfarm Payrolls |  MODERATE |  +nan |   +51 |  +333 |       NA |  JOBS</span></span></code></pre></div><p>现在让我们来看一下指标 <code>CalendarMonitor.mq5</code>。它的目的是根据指定的过滤器向用户在图表上显示当前选择的事件。为了可视化表格，我们将使用已经熟悉的记分牌类（<code>Tableau.mqh</code>，请参阅“未来订单的保证金计算”部分）。该指标没有缓冲区和图表。</p><p>输入参数允许你设置时间窗口的范围（<code>scope</code>），以及 <code>CalendarFilter</code> 对象的全局上下文，即 <code>Context</code> 中的货币或国家代码（默认为空，即无限制），或者使用布尔标志 <code>UseChartCurrencies</code>。它默认是启用的，建议使用它以便自动接收构成图表工作工具的那些货币的新闻。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string Context;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 上下文（国家 - 2 个字符，货币 - 3 个字符，空 - 所有）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_SCOPE Scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SCOPE_WEEK;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UseChartCurrencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>可以对事件类型、部门和严重程度应用额外的过滤器。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_EVENT_TYPE_EXT Type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TYPE_ANY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_EVENT_SECTOR_EXT Sector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SECTOR_ANY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_EVENT_IMPORTANCE_EXT Importance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IMPORTANCE_MODERATE;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 重要性（至少）</span></span></code></pre></div><p><code>Importance</code> 设置选择的下限，而不是精确匹配。因此，<code>IMPORTANCE_MODERATE</code> 的默认值将不仅捕获中等重要性，还会捕获高重要性。</p><p>细心的读者会注意到，这里使用了一些不熟悉的枚举：<code>ENUM_CALENDAR_EVENT_TYPE_EXT</code>、<code>ENUM_CALENDAR_EVENT_SECTOR_EXT</code>、<code>ENUM_CALENDAR_EVENT_IMPORTANCE_EXT</code>。它们在前面提到的 <code>CalendarDefines.mqh</code> 文件中，并且几乎与类似的内置枚举一一对应。唯一的区别是，它们添加了一个表示“任意”值的元素。我们需要定义这些枚举，以便简化条件的输入：现在每个字段的过滤器都可以通过下拉列表进行配置，在下拉列表中可以选择其中一个值，或者关闭过滤器。如果没有添加这个枚举元素，我们就必须在界面中为每个字段输入一个逻辑“开/关”标志。</p><p>此外，输入参数还允许通过事件中是否存在实际指标、预测指标和先前指标来查询事件，以及通过搜索文本字符串（<code>Text</code>）来查询事件。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string Text;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_HAS_VALUE HasActual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_ANY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_HAS_VALUE HasForecast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_ANY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_HAS_VALUE HasPrevious </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_ANY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input ENUM_CALENDAR_HAS_VALUE HasRevised </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_ANY;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><code>CalendarFilter</code> 对象和 <code>tableau</code> 对象在全局级别进行声明。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarFilter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AutoPtr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Tableau</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t;</span></span></code></pre></div><p>请注意，过滤器只创建一次，而表格由一个自动选择器表示，并将根据接收到的数据大小动态重新创建。</p><p>在 <code>OnInit</code> 中，根据输入参数通过连续调用 <code>let</code> 方法来进行过滤器设置。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLoaded</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INIT_FAILED;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UseChartCurrencies)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_Symbol, SYMBOL_CURRENCY_BASE);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string profit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_Symbol, SYMBOL_CURRENCY_PROFIT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profit)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(profit);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TYPE_ANY)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ENUM_CALENDAR_EVENT_TYPE)Type);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SECTOR_ANY)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ENUM_CALENDAR_EVENT_SECTOR)Sector);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Importance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IMPORTANCE_ANY)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ENUM_CALENDAR_EVENT_IMPORTANCE)(Importance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), GREATER);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Text))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Text);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HasActual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_ANY)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LONG_MIN, CALENDAR_PROPERTY_RECORD_ACTUAL,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            HasActual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HAS_SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NOT_EQUAL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQUAL);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    EventSetTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INIT_SUCCEEDED;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>最后，启动一个秒级定时器。所有工作都在 <code>OnTimer</code> 中实现。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnTimer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_CALENDAR_PROPERTY props[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 表格列</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_RECORD_TIME,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_COUNTRY_CURRENCY,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_EVENT_NAME,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_EVENT_IMPORTANCE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_RECORD_ACTUAL,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_RECORD_FORECAST,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_RECORD_PREVISED,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_RECORD_IMPACT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        CALENDAR_PROPERTY_EVENT_SECTOR,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MqlCalendarValue records[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scope, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeCurrent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scope);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 每次都移动时间窗口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ulong trackID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChangeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trackID)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果状态已经被移除，检查是否有变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 按过滤器请求变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 如果有变化，通知用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            string result[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records, props, result);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubArrayCombine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; | &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p, p));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 继续往下执行以更新表格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(trackID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getChangeID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 日历没有变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 按过滤器请求完整的新闻集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Limit);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在图表上显示新闻表格</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string result[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records, props, result, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t[].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getRows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tableau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CALT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(records) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, p,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            TBL_CELL_HEIGHT_AUTO, TBL_CELL_WIDTH_AUTO,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Corner, Margins, FontSize, FontName, FontName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; Bold&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            TBL_FLAG_ROW_0_HEADER,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            BackgroundColor, BackgroundTransparency);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string hints[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    t[].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, hints);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果我们在 EURUSD 图表上以默认设置运行该指标，我们可以得到以下画面。</p><h2 id="将日历数据库传输到测试器中" tabindex="-1">将日历数据库传输到测试器中 <a class="header-anchor" href="#将日历数据库传输到测试器中" aria-label="Permalink to &quot;将日历数据库传输到测试器中&quot;">​</a></h2><p>日历仅在线上对 MQL 程序可用，因此测试新闻交易策略会带来一些困难。其中一个解决方案是自主创建日历的特定镜像，也就是缓存，然后在测试器中使用它。缓存存储技术有多种，例如文件或嵌入式 SQLite 数据库。在本节中，我们将展示使用文件的实现方式。</p><p>在任何情况下，使用日历缓存时，请记住它对应于特定的时间点 X。在 X 之前发生的所有 “旧” 事件（财务报告）中，实际值已经设置好了；而在之后的事件（相对于 X 的 “未来” 事件）中，没有实际值，并且在出现新的、更新的缓存副本之前也不会有实际值。换句话说，在时间点 X 之后测试指标和智能交易系统是没有意义的。至于 X 之前的部分，应该避免提前查看，也就是说，在每条特定新闻发布时间之前不要读取当前指标。</p><p><strong>注意</strong>！在终端中请求日历数据时，所有事件的时间都是根据服务器的当前时区来报告的，包括可能的 “夏令时” 调整（通常这意味着时间戳增加 1 小时）。这使得新闻发布时间与在线报价时间同步。然而，过去的时钟调整（半年前、一年前或更久以前）仅在报价中显示，而不在日历事件中显示。整个日历数据库是根据服务器的当前时区通过 MQL5 读取的。因此，任何创建的日历存档将包含那些在存储时处于相同夏令时模式（开启或关闭）下发生的事件的正确时间戳。对于处于 “相反” 半年中的事件，在读取存档后需要自行进行一小时的调整。在下面的示例中，省略了这种情况。</p><p>我们将缓存类命名为 <code>CalendarCache</code> 并将其放在名为 <code>CalendarCache.mqh</code> 的文件中。我们需要将日历数据库的所有 3 个表（<code>MqlCalendarCountry</code>、<code>MqlCalendarEvent</code>、<code>MqlCalendarValue</code>）保存到文件中。MQL5 提供了 <code>FileWriteArray</code> 和 <code>FileReadArray</code> 函数（请参阅 “写入和读取数组”），它们可以直接将简单结构的数组写入文件或从文件中读取。然而，在我们的情况中，3 个结构中有 2 个不是简单结构，因为它们有字符串字段。因此，我们需要一种单独存储字符串的机制，类似于我们在 <code>CalendarFilter</code> 类中已经使用过的机制（那里有一个字符串数组 <code>stringCache</code>，并且在过滤器中指明了来自该数组的所需字符串的索引）。</p><p>为了避免在一个 “字典” 中混淆来自不同 “日历” 结构的字符串，我们将准备一个模板类 <code>StringRef</code>：类型参数 <code>T</code> 将是任何一种 <code>MqlCalendar</code> 结构。这将为我们提供一个用于国家的单独字符串缓存，以及一个用于事件类型的单独字符串缓存。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringRef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string cache[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   StringRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache, s);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         cache[index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache[index];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         FileWriteInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache[i]));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         FileWriteString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, cache[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReadInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         PUSH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cache, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileReadString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileReadInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::cache[];</span></span></code></pre></div><p>字符串通过使用 <code>operator=</code> 存储在缓存数组中，并使用 <code>operator[]</code> 从中提取（带有一个始终被省略的虚拟索引）。每个对象仅存储字符串在数组中的索引。缓存数组被声明为 <code>static</code>，因此它将累积一个 <code>T</code> 结构的所有字符串字段。有需要的人可以更改缓存方法，使得结构的每个字段都有自己的数组，但这对我们来说并不重要。</p><p>将数组写入文件和从文件中读取是由一对静态方法 <code>save</code> 和 <code>load</code> 来执行的：这两个方法都将文件句柄作为参数。</p><p>考虑到 <code>StringRef</code> 类，让我们描述一些结构，这些结构复制了标准日历结构，但使用 <code>StringRef</code> 对象代替了字符串字段。例如，对于 <code>MqlCalendarCountry</code>，我们得到 <code>MqlCalendarCountryRef</code>。标准结构和修改后的结构通过重载的 <code>=</code> 和 <code>[]</code> 操作符以类似的方式相互复制。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MqlCalendarCountryRef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ulong id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   StringRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   StringRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   StringRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currency;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   StringRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currency_symbol;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   StringRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url_name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.code;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.currency;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      currency_symbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.currency_symbol;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      url_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.url_name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   MqlCalendarCountry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> operator</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarCountry r;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      r.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      r.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      r.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> code[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      r.currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currency[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      r.currency_symbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currency_symbol[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      r.url_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url_name[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>请注意，第一种方法的赋值操作符有来自 <code>StringRef</code> 的重载 <code>=</code>，由于这个原因，所有字符串都进入了数组 <code>StringRef&lt;MqlCalendarCountry&gt;::cache</code>。在第二种方法中，<code>[]</code> 操作符无形地调用以获取字符串的地址，并直接从 <code>StringRef</code> 返回存储在缓存数组中该地址处的字符串。</p><p><code>MqlCalendarEventRef</code> 结构以类似的方式定义，但其中只有 3 个字段（<code>source_url</code>、<code>event_code</code>、<code>name</code>）需要将 <code>string</code> 类型替换为 <code>StringRef&lt;MqlCalendarEvent&gt;</code>。<code>MqlCalendarValue</code> 结构不需要这样的转换，因为它里面没有字符串字段。</p><p>准备阶段到此结束，现在可以进入主要的缓存类 <code>CalendarCache</code>。</p><p>从一般考虑以及为了与已经开发的 <code>CalendarFilter</code> 类兼容，让我们描述缓存中的字段，这些字段指定了上下文（国家或货币）、存储事件的日期范围以及缓存生成的时刻（时间 X，变量 <code>t</code>）。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalendarCache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string context;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime from, to;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   CalendarCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> datetime</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _from</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> datetime</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> _to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_context), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_from), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_to), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>实际上，在从日历创建缓存时设置限制并没有太大意义。完整的缓存可能更实用，因为它的大小并非关键因素，截至 2022 年年中，其大小约为几十兆字节（这包括 2007 年以来的历史数据以及计划到 2024 年的事件）。然而，对于功能经过人为简化的演示程序，限制可能会很有用。</p><p>显然，在缓存中应该提供日历结构的数组来存储所有数据。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarValue values[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarEvent events[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlCalendarCountry countries[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>最初，它们通过 <code>update</code> 方法从日历数据库中填充。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      string country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         country </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Reading online calendar base...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarValueHistory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values, from, to, country, currency))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (currency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventByCurrency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currency, events)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarEventByCountry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(country, events)))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         ||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalendarCountries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(countries)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // object is not ready, t = 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeTradeServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)t;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p><code>t</code> 字段是缓存是否有效的标志，包含填充数组的时间。</p><p>填充后的缓存对象可以使用 <code>save</code> 方法写入文件。在文件开头，有一个头 <code>CALENDAR_CACHE_HEADER</code> —— 即字符串 <code>&quot;MQL5 Calendar Cache\\r\\nv.1.0\\r\\n&quot;</code>，这使得在读取时可以确保格式正确。接下来，该方法保存 <code>context</code>、<code>from</code>、<code>to</code> 和 <code>t</code> 变量，以及 <code>values</code> 数组 “原样” 保存。在数组本身之前，我们写下它的大小以便在读取时恢复它。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlDateTime mdt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      TimeToStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t, mdt);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) filename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;calendar-&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         StringFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%04d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%02d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%02d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%02d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%02d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.cal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         mdt.year, mdt.mon, mdt.day, mdt.hour, mdt.min);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileOpen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename, FILE_WRITE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FILE_BIN));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INVALID_HANDLE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, CALENDAR_CACHE_HEADER);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, context, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, from);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, to);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, t);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, values);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span></span></code></pre></div><p>对于 <code>events</code> 和 <code>countries</code> 数组，我们使用带有 “<code>Ref</code>” 后缀的包装结构。辅助方法 <code>store</code> 将 <code>events</code> 数组转换为简单结构 <code>erefs</code> 的数组，在这个数组中，字符串被替换为字符串字典 <code>StringRef&lt;MqlCalendarEvent&gt;</code> 中的数字。这样的简单结构已经可以用通常的方式写入文件，但为了后续读取，还需要保存字典中的所有字符串（调用 <code>StringRef&lt;MqlCalendarEvent&gt; ::save(handle)</code>）。国家结构以相同的方式转换并保存到文件中。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarEventRef erefs[];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(erefs, events);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(erefs));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, erefs);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      StringRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarCountryRef crefs[];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(crefs, countries);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(crefs));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileWriteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, crefs);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      StringRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarCountry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>前面提到的 <code>store</code> 方法相当简单：在其中，通过对元素的循环，在 <code>MqlCalendarEventRef</code> 或 <code>MqlCalendarCountryRef</code> 结构中执行重载的赋值操作符。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array[], T2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">origin[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origin));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origin); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         array[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>为了将接收到的文件加载到缓存对象中，编写了一个镜像方法 <code>load</code>。它以相同的顺序将文件中的数据读取到变量和数组中，同时对事件类型和国家的字符串字段进行反向转换。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> filename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Loading calendar cache &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, filename);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileOpen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(filename, FILE_READ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FILE_BIN));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INVALID_HANDLE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReadString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CALENDAR_CACHE_HEADER));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CALENDAR_CACHE_HEADER) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // not our format</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReadString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)) context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      from </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (datetime)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileReadLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      to </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (datetime)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileReadLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (datetime)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileReadLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Calendar cache interval: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, from, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, to);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Calendar cache saved at: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, t);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReadInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileReadArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, values, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarEventRef erefs[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReadInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileReadArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, erefs, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      StringRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      restore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(events, erefs);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MqlCalendarCountryRef crefs[];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileReadInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileReadArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle, crefs, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      StringRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlCalendarCountry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      restore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(countries, crefs);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FileClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handle);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // something else will be here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>辅助方法 <code>restore</code> 使用 <code>MqlCalendarEventRef</code> 或 <code>MqlCalendarCountryRef</code> 结构中 <code>[]</code> 操作符的重载，通过行号逐行获取字符串本身，并将其赋值给标准的 <code>MqlCalendarEvent</code> 或 <code>MqlCalendarCountry</code> 结构。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> restore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">array[], T2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">origin[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origin));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origin); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         array[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin[i][];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>在这个阶段，我们已经可以编写一个基于 <code>CalendarCache</code> 类的简单测试指标，在在线图表上运行它，并将其与日历缓存一起保存到文件中。然后，可以从测试器中的指标副本加载该文件，并获取完整的事件集。然而，对于实际开发来说，这还不够。</p><p>事实上，为了快速访问数据，需要提供索引，这是编程中一个众所周知的概念，我们将在后面关于数据库的章节中讨论。理论上，我们可以使用内置的 SQLite 引擎来存储缓存，然后我们将 “免费” 获得索引，但这一点我们后面再谈。</p><p>如果我们想象如何在我们的缓存中有效地实现标准日历函数的类似功能，就很容易理解索引的要点。例如，在 <code>CalendarValueById</code> 函数中传递了事件 ID。直接枚举 <code>values</code> 数组中的记录会非常耗时。因此，需要用一些 “数据结构” 来补充数组，以便优化搜索。“数据结构” 加了引号，因为这里不是指编程语言意义上的 <code>struct</code>，而是一般意义上的数据构造架构。它可以由不同的部分组成，并基于不同的组织原则。当然，额外的数据会占用内存，但用内存换取速度是编程中常见的方法。</p><p>最简单的索引解决方案是一个单独的二维数组，按升序排序，以便可以使用 <code>ArrayBsearch</code> 函数快速搜索。第二维有两个元素就足够了：索引为 <code>[i][0]</code> 的值（用于排序）包含标识符，索引为 <code>[i][1]</code> 的值包含在结构数组中的序号位置。</p><p>另一个常用的概念是哈希，它是将初始值转换为一些键（哈希值，整数）的过程，这样可以使碰撞（不同初始数据的键匹配）的数量最小化。键的基本属性是其值接近均匀随机分布，因此它们可以用作预分配数组中的索引。为原始数据的单个元素计算哈希函数是一个快速的过程，实际上会得出元素本身的地址。例如，著名的哈希表数据结构就遵循这个原则。</p><p>如果两个原始值确实得到了相同的哈希值（尽管这种情况很少见），它们会在其键的列表中排列，并且会在列表中进行顺序搜索。然而，由于哈希函数的选择使得匹配的数量很少，通常在计算完哈希值后搜索就能命中目标。</p><p>为了演示，我们将在 <code>CalendarCache</code> 类中使用两种方法：哈希和二分搜索。</p><p>MetaTrader 5 软件包包括一组用于创建哈希表的类（<code>MQL5/Include/Generic/HashMap.mqh</code>），但我们将使用自己更简单的实现，其中只保留了使用哈希函数的原理。</p><p><strong>通过哈希进行数据索引的方案</strong></p><p><strong>通过哈希进行数据索引的方案</strong></p><p>在我们的情况下，只对日历对象的标识符进行哈希就足够了。我们选择的哈希函数必须将标识符转换为特殊数组内的索引：标识符在 “日历” 结构数组中的位置将存储在具有该索引的单元格中。对于国家、事件类型和特定新闻，会根据其自身的</p><h2 id="日历交易" tabindex="-1">日历交易 <a class="header-anchor" href="#日历交易" aria-label="Permalink to &quot;日历交易&quot;">​</a></h2><p>有许多新闻交易策略：包括使用市价单或挂单的策略，有对金融指标（价格走势方向）进行分析的策略，也有不进行此类分析的策略（捕捉波动性）。此外，在许多其他交易系统中插入反新闻过滤器也是很有用的。由于 MQL5 日历在测试器中不可用，所以很难对所有这样的程序进行优化和调试。然而，借助上一节开发的缓存，我们可以改善这种情况。</p><p>让我们尝试创建一个智能交易系统（EA），它将根据新闻发布对价格的影响评估来进入市场。刚刚使用指标 <code>CalendarMonitorCached.mq5</code> 创建了缓存文件 “xyz.cal”。</p><p>请记住，缓存中的日历数据总是对应于保存时的状态，在读取时需要谨慎：对于未来的事件，实际指标是未知的，而且更遥远的事件甚至可能根本不存在。在下一次优化或测试之前，你应该定期更新日历缓存文件。</p><p>如果有必要，还需要考虑一年中的夏令时（DST）时间设置：如果事件的夏令时模式与保存日历存档时的夏令时不同，你将需要把时间向前或向后调整 1 小时。你可以通过选择不采用夏令时的经纪商，或者构建时间框架大于 H1 的策略来避免这些麻烦。</p><p>智能交易系统 <code>CalendarTrading.mq5</code> 将只对以下新闻事件进行交易：</p><ul><li>与图表的工作品种相关；</li><li>属于金融指标类型（即定量指标）；</li><li>具有高度重要性；</li><li>刚刚收到指标的当前值。</li></ul><p>最后一点很重要，因为对于有预测值和实际值的指标，系统会相应地设置 <code>impact_type</code> 字段的值：它将作为交易信号（指示进入市场的方向）。</p><p>新闻发布的确切时间，通常与 <code>MqlCalendarValue::time</code> 字段中输入的计划时间不一致。日历不会记录这个时间，并且在缓存中也无法获取。在这方面，新闻策略测试的准确性可能会受到影响。如果你想让分析和决策更接近在线交易过程，可以使用 <code>CalendarChangeSaver.mq5</code> 这样的服务来积累新闻发布统计数据，并将其嵌入到缓存中。</p><p>默认情况下，交易以最小手数进行，止损和止盈水平设置为指定的点数距离。所有这些都反映在输入参数中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>input double Volume;               // 交易量（0 = 最小手数）</span></span>
<span class="line"><span>input int Distance2SLTP = 500;     // 到止损/止盈的点数距离（0 = 无）</span></span>
<span class="line"><span>input uint MultiplePositions = 25;</span></span></code></pre></div><p>对于对冲账户，我们允许同时存在多个头寸，默认值是 25。这是推荐的测试环境，因为它允许你独立评估对不同类型新闻进行并行交易的盈利能力（每个头寸是独立创建的，不会导致因其他新闻而平仓）。另一方面，只持有一个头寸会自动平衡不同新闻的冲突信号。</p><p>可选地，该智能交易系统支持对新闻类型标识符的过滤，以及通过标题进行文本搜索。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>sinput ulong EventID;</span></span>
<span class="line"><span>sinput string Text;</span></span></code></pre></div><p>这对于未来对特定新闻的研究可能会很有用。</p><p>在全局层面，通过对新闻的分析处理和头寸跟踪来描述对象指针。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>AutoPtr&lt;CalendarFilter&gt; fptr;</span></span>
<span class="line"><span>AutoPtr&lt;CalendarCache&gt; cache;</span></span>
<span class="line"><span>AutoPtr&lt;TrailingStop&gt; trailing[];</span></span></code></pre></div><p>当前工作品种的操作模式和货币对存储在相应的变量中。为了简化示例，假设它用于外汇市场（在其他市场上，你将进行单一货币的交易 —— 即行情代码的报价货币）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>const bool Hedging =</span></span>
<span class="line"><span>   AccountInfoInteger(ACCOUNT_MARGIN_MODE) == ACCOUNT_MARGIN_MODE_RETAIL_HEDGING;</span></span>
<span class="line"><span>const string Base = SymbolInfoString(_Symbol, SYMBOL_CURRENCY_BASE);</span></span>
<span class="line"><span>const string Profit = SymbolInfoString(_Symbol, SYMBOL_CURRENCY_PROFIT);</span></span></code></pre></div><p>在 <code>OnInit</code> 处理程序中，我们加载日历缓存并按上述方式配置过滤器。在线图表上允许不存在缓存：此时智能交易系统以实战模式运行，直接与日历交互。在测试器中，如果没有缓存文件，智能交易系统将无法启动。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>int OnInit()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   cache = new CalendarCache(&quot;xyz.cal&quot;, true);</span></span>
<span class="line"><span>   if(cache[].isLoaded())</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      fptr = new CalendarFilterCached(cache[]);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   else</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      if(!MQLInfoInteger(MQL_TESTER))</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         Print(&quot;Calendar cache file not found, fall back to online mode&quot;);</span></span>
<span class="line"><span>         fptr = new CalendarFilter();</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      else</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         Print(&quot;Can&#39;t proceed in the tester without calendar cache file&quot;);</span></span>
<span class="line"><span>         return INIT_FAILED;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   CalendarFilter *f = fptr[];</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   if(!f.isLoaded()) return INIT_FAILED;</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   // 如果设置了特定类型的事件，我们只关注它</span></span>
<span class="line"><span>   if(EventID &gt; 0) f.let(EventID);</span></span>
<span class="line"><span>   else</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      // 否则关注当前品种货币相关的新闻</span></span>
<span class="line"><span>      f.let(Base);</span></span>
<span class="line"><span>      if(Base != Profit)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         f.let(Profit);</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      // 金融指标、高重要性、实际值</span></span>
<span class="line"><span>      f.let(CALENDAR_TYPE_INDICATOR);</span></span>
<span class="line"><span>      f.let(LONG_MIN, CALENDAR_PROPERTY_RECORD_FORECAST, NOT_EQUAL);</span></span>
<span class="line"><span>      f.let(CALENDAR_IMPORTANCE_HIGH);</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>      if(StringLen(Text)) f.let(Text);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   f.describe();</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   if(Distance2SLTP)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      ArrayResize(trailing, Hedging &amp;&amp; MultiplePositions? MultiplePositions : 1);</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   // 检查新闻过滤器并通过第二个定时器开始基于它进行交易</span></span>
<span class="line"><span>   EventSetTimer(1);</span></span>
<span class="line"><span>   return INIT_SUCCEEDED;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在 <code>OnTimer</code> 处理程序中，我们根据配置的过滤器请求新闻的变化。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>void OnTimer()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   CalendarFilter *f = fptr[];</span></span>
<span class="line"><span>   MqlCalendarValue records[];</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   f.let(TimeTradeServer() - SCOPE_DAY, TimeTradeServer() + SCOPE_DAY);</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>   if(f.update(records)) // 找到经过过滤的变化</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      // 将已更改新闻的属性输出到日志</span></span>
<span class="line"><span>      static const ENUM_CALENDAR_PROPERTY props[] =</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_RECORD_TIME,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_COUNTRY_CURRENCY,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_COUNTRY_CODE,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_EVENT_NAME,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_EVENT_IMPORTANCE,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_RECORD_ACTUAL,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_RECORD_FORECAST,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_RECORD_PREVISED,</span></span>
<span class="line"><span>         CALENDAR_PROPERTY_RECORD_IMPACT,</span></span>
<span class="line"><span>      };</span></span>
<span class="line"><span>      static const int p = ArraySize(props);</span></span>
<span class="line"><span>      string result[];</span></span>
<span class="line"><span>      f.format(records, props, result);</span></span>
<span class="line"><span>      for(int i = 0; i &lt; ArraySize(result) / p; ++i)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         Print(SubArrayCombine(result, &quot; | &quot;, i * p, p));</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      ...</span></span></code></pre></div><p>当检测到合适的变化时，它们会按如下方式记录到日志中（下面是实际日志的一个片段），记录了时间、货币、国家、名称、当前值和预测值、先前值以及信号的理论解释：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Filtering 5 records</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2021.02.16 13:00 | EUR | EU | Employment Change q/q | HIGH | +0.3 | -0.4 | +1.0 | POSITIVE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2021.02.16 13:00 | EUR | EU | GDP q/q | HIGH | -0.6 | -0.7 | -0.7 | POSITIVE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>instant buy 0.01 EURUSD at 1.21638 sl: 1.21138 tp: 1.22138 (1.21637 / 1.21638 / 1.21637)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>deal #64 buy 0.01 EURUSD at 1.21638 done (based on order #64)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Filtering 3 records</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2021.07.06 12:05 | EUR | DE | ZEW Economic Sentiment Indicator | HIGH | +63.3 | +84.1 | +79.8 | NEGATIVE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>instant sell 0.01 EURUSD at 1.18473 sl: 1.18973 tp: 1.17973 (1.18473 / 1.18474 / 1.18473)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>deal #265 sell 0.01 EURUSD at 1.18473 done (based on order #265)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>...</span></span></code></pre></div><p>新闻对价格的潜在影响应该根据 <code>impact_type</code> 字段的评估来计算。这里需要注意的是，我们有两种货币：基础货币和报价货币。当新闻对基础货币有积极影响时，预计汇率会上升，如果是负面影响，汇率将会下降。对于报价货币，情况则相反：积极影响应该会增加货币对中第二种货币的价格，这意味着汇率下降，而负面影响会导致汇率上升。下面的代码片段使用 <code>sign</code> 变量计算了这种标准化的价格运动方向。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>      static const int impacts[3] = {0, +1, -1};</span></span>
<span class="line"><span>      int impact = 0;</span></span>
<span class="line"><span>      string about = &quot;&quot;;</span></span>
<span class="line"><span>      ulong lasteventid = 0;</span></span>
<span class="line"><span>      for(int i = 0; i &lt; ArraySize(records); ++i)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         int sign = result[i * p + 1] == Profit? -1 : +1;</span></span>
<span class="line"><span>         impact += sign * impacts[records[i].impact_type];</span></span>
<span class="line"><span>         about += StringFormat(&quot;%+lld &quot;, sign * (long)records[i].event_id);</span></span>
<span class="line"><span>         lasteventid = records[i].event_id;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      if(impact == 0) return; // 无信号</span></span>
<span class="line"><span>      ...</span></span></code></pre></div><p>通常会同时出现多个新闻发布，所以有必要累积所有新闻的评级。这是在 <code>impact</code> 变量中完成的。由于我们的策略只过滤单个、最高重要性的新闻，所以来自这些新闻的所有单个信号只是简单相加，没有权重系数。<code>about</code> 字符串变量用于为即将进行的交易评论准备文本：在那里会提到导致该交易的事件标识符。</p><p>如果机器人在净值账户上启动，或者达到了允许的最大头寸数量，我们将关闭一个头寸。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>      PositionFilter positions;</span></span>
<span class="line"><span>      ulong tickets[];</span></span>
<span class="line"><span>      positions.let(POSITION_SYMBOL, _Symbol).select(tickets);</span></span>
<span class="line"><span>      const int n = ArraySize(tickets);</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      if(n &gt;= (int)(Hedging? MultiplePositions : 1))</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         MqlTradeRequestSync position;</span></span>
<span class="line"><span>         position.close(_Symbol) &amp;&amp; position.completed();</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      ...</span></span></code></pre></div><p>现在可以根据信号开一个新头寸。事件标识符被设置为 “魔术” 数字，这将使我们以后能够在不同类型新闻的背景下分析交易的财务表现。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>      MqlTradeRequestSync request;</span></span>
<span class="line"><span>      request.magic = lasteventid;</span></span>
<span class="line"><span>      request.comment = about;</span></span>
<span class="line"><span>      const double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);</span></span>
<span class="line"><span>      const double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);</span></span>
<span class="line"><span>      const double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);</span></span>
<span class="line"><span>      ulong ticket = 0;</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      if(impact &gt; 0)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         ticket = request.buy(Lot, 0,</span></span>
<span class="line"><span>            Distance2SLTP? ask - point * Distance2SLTP : 0,</span></span>
<span class="line"><span>            Distance2SLTP? ask + point * Distance2SLTP : 0);</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      else if(impact &lt; 0)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         ticket = request.sell(Lot, 0,</span></span>
<span class="line"><span>            Distance2SLTP? bid + point * Distance2SLTP : 0,</span></span>
<span class="line"><span>            Distance2SLTP? bid - point * Distance2SLTP : 0);</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      if(ticket &amp;&amp; request.completed() &amp;&amp; Distance2SLTP)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         for(int i = 0; i &lt; ArraySize(trailing); ++i)</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            if(trailing[i][] == NULL) // 寻找用于头寸跟踪对象的空闲槽位</span></span>
<span class="line"><span>            {</span></span>
<span class="line"><span>               trailing[i] = new TrailingStop(ticket, Distance2SLTP, Distance2SLTP / 50);</span></span>
<span class="line"><span>               break;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>当报价数据更新（tick）时，我们为所有头寸移动止损位。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>void OnTick()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   for(int i = 0; i &lt; ArraySize(trailing); ++i)</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      if(trailing[i][])</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         if(!trailing[i][].trail()) // 头寸已平仓</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            trailing[i] = NULL; // 释放对象和槽位</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>现在到了最有趣的部分。多亏了测试器，不仅可以总体上分析新闻策略的成功与否，还可以按特定新闻进行细分分析。相应的模块在我们的 <code>OnTester</code> 处理程序中实现。数据收集是使用交易过滤器完成的。从它那里得到交易元组数组，该数组报告了每笔交易的利润、掉期、佣金和魔术数字，我们在三个 <code>MapArray</code> 对象中累积结果：它们分别为每个魔术数字计算利润、亏损和交易数量。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double OnTester()</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>   Print(&quot;Trade profits by calendar events:&quot;);</span></span>
<span class="line"><span>   HistorySelect(0, LONG_MAX);</span></span>
<span class="line"><span>   DealFilter filter;</span></span>
<span class="line"><span>   int props[] = {DEAL_PROFIT, DEAL_SWAP, DEAL_COMMISSION, DEAL_MAGIC};</span></span>
<span class="line"><span>   filter.let(DEAL_TYPE, (1 &lt;&lt; DEAL_TYPE_BUY) | (1 &lt;&lt; DEAL_TYPE_SELL), IS::OR_BITWISE)</span></span>
<span class="line"><span>      .let(DEAL_ENTRY, (1 &lt;&lt; DEAL_ENTRY_OUT) | (1 &lt;&lt; DEAL_ENTRY_INOUT) | (1 &lt;&lt; DEAL_ENTRY_OUT_BY),</span></span>
<span class="line"><span>      IS::OR_BITWISE);</span></span>
<span class="line"><span>   Tuple4&lt;double, double, double, ulong&gt; trades[];</span></span>
<span class="line"><span>   MapArray&lt;ulong,double&gt; profits;</span></span>
<span class="line"><span>   MapArray&lt;ulong,double&gt; losses;</span></span>
<span class="line"><span>   MapArray&lt;ulong,int&gt; counts;</span></span>
<span class="line"><span>   if(filter.select(props, trades))</span></span>
<span class="line"><span>   {</span></span>
<span class="line"><span>      for(int i = 0; i &lt; ArraySize(trades); ++i)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         counts.inc((ulong)trades[i]._4);</span></span>
<span class="line"><span>         const double payout = trades[i]._1 + trades[i]._2 + trades[i]._3;</span></span>
<span class="line"><span>         if(payout &gt;= 0)</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            profits.inc((ulong)trades[i]._4, payout);</span></span>
<span class="line"><span>            losses.inc((ulong)trades[i]._4, 0);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>         else</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            profits.inc((ulong)trades[i]._4, 0);</span></span>
<span class="line"><span>            losses.inc((ulong)trades[i]._4, payout);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>      ...</span></span></code></pre></div><p>结果，我们得到一个表格，逐行显示每种类型事件的统计信息：其标识符、国家、货币、总利润或亏损、交易数量（新闻数量）、利润系数和事件名称。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>      for(int i = 0; i &lt; profits.getSize(); ++i)</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>         MqlCalendarEvent event;</span></span>
<span class="line"><span>         MqlCalendarCountry country;</span></span>
<span class="line"><span>         const ulong keyId = profits.getKey(i);</span></span>
<span class="line"><span>         if(cache[].calendarEventById(keyId, event)</span></span>
<span class="line"><span>            &amp;&amp; cache[].calendarCountryById(event.country_id, country))</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            PrintFormat(&quot;%lld %s %s %+.2f [%d] (PF:%.2f) %s&quot;,</span></span>
<span class="line"><span>               event.id, country.code, country.currency,</span></span>
<span class="line"><span>               profits[keyId] + losses[keyId], counts[keyId],</span></span>
<span class="line"><span>               profits[keyId] / (losses[keyId] != 0? -losses[keyId] : DBL_MIN),</span></span>
<span class="line"><span>               event.name);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>         else</span></span>
<span class="line"><span>         {</span></span>
<span class="line"><span>            Print(&quot;undefined &quot;, DoubleToString(profits.getValue(i), 2));</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   return 0;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>为了测试这个想法，让我们在 2021 年初（到 2022 年年中）期间，对 EURUSD 货币对运行这个智能交易系统。下面是一个带有 <code>OnTester</code> 打印输出的日志片段。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Trade profits by calendar events:</span></span>
<span class="line"><span>840040001 US USD -21.81 [17] (PF:0.53) ISM Manufacturing PMI</span></span>
<span class="line"><span>840190001 US USD -10.95 [17] (PF:0.69) ADP Nonfarm Employment Change</span></span>
<span class="line"><span>840200001 US USD -67.09 [78] (PF:0.60) EIA Crude Oil Stocks Change</span></span>
<span class="line"><span>999030003 EU EUR +14.13 [19] (PF:1.46) Retail Sales m/m</span></span>
<span class="line"><span>840040003 US USD -17.12 [18] (PF:0.59) ISM Non-Manufacturing PMI</span></span>
<span class="line"><span>840030016 US USD -1.20 [19] (PF:0.97) Nonfarm Payrolls</span></span>
<span class="line"><span>840030021 US USD +5.25 [14] (PF:1.21) JOLTS Job Openings</span></span>
<span class="line"><span>840020010 US USD -14.63 [17] (PF:0.63) Retail Sales m/m</span></span>
<span class="line"><span>276070001 DE EUR -22.71 [17] (PF:0.47) ZEW Economic Sentiment Indicator</span></span>
<span class="line"><span>840020005 US USD +10.76 [18] (PF:1.37) Building Permits</span></span>
<span class="line"><span>840120001 US USD -20.78 [17] (PF:0.49) Existing Home Sales</span></span>
<span class="line"><span>276030003 DE EUR +18.57 [17] (PF:1.87) Ifo Business Climate</span></span>
<span class="line"><span>840180002 US USD -3.22 [14] (PF:0.89) CB Consumer Confidence Index</span></span>
<span class="line"><span>840020014 US USD -8.74 [16] (PF:0.74) Core Durable Goods Orders m/m</span></span>
<span class="line"><span>840020008 US USD -14.54 [16] (PF:0.63) New Home Sales</span></span>
<span class="line"><span>250010005 FR EUR +0.66 [10] (PF:1.03) GDP q/q</span></span>
<span class="line"><span>840010007 US USD +0.99 [15] (PF:1.04) GDP q/q</span></span>
<span class="line"><span>840120003 US USD +4.53 [18] (PF:1.15) Pending Home Sales m/m</span></span>
<span class="line"><span>276010008 DE EUR -0.72 [10] (PF:0.97) GDP q/q</span></span>
<span class="line"><span>999030016 EU EUR -14.04 [14] (PF:0.59) GDP q/q</span></span>
<span class="line"><span>999030001 EU EUR +1.30 [2] (PF:1.35) Employment Change q/q</span></span></code></pre></div><p>结果并不是非常令人印象深刻。不过，新闻交易充满了主观性。首先，对新闻实际价值对汇率影响的理论评估，可能与市场大众的情绪预期或额外的信息背景（这些信息不在日历范围内且无法量化）有所不同。其次，我们已经提到过新闻实际发布时间的不准确性。第三，我们的策略是以最简单的形式实现的，没有分析价格的前期走势（可能存在消息泄露，并且新闻在之前就已经被市场消化了）。</p><p>总体而言，这次测试发现，交易员们青睐的非农就业报告或国内生产总值（GDP）报告并不能保证交易成功，至少在我们的默认设置下是这样。接下来，需要按照常规方式分析每一笔交易，找出问题所在，选择合适的参数，并改进算法，特别是要添加一个时间调整模块，用于处理服务器时区夏令时的切换。</p><p>同时，这种技术本身运行良好，我们可以先尝试选择最有可能成功的新闻。例如，我们选取新闻 276030003（德国 IFO 商业景气指数）。将其设置到 <code>EventID</code> 中，我们将得到以下报告，与我们计算的指标相符。</p><p>基于德国 IFO 商业景气指数新闻的测试器交易报告</p><p>基于德国 IFO 商业景气指数新闻的测试器交易报告</p><p>你也可以尝试对一组类似的事件进行交易。特别是，如果只想对（不同国家的）GDP 新闻做出反应，可以在 <code>Text</code> 变量中输入字符串 “<em>GDP</em>”。添加星号是因为如果不添加，一个 3 字符的字符串会被过滤器类视为一种货币。除了 2 字符（国家代码）或 3 字符（货币代码）之外，任何长度的字符串都可以按原样指定，例如 “farm”、“Nonfarm”、“Sales” —— 过滤器会将它们作为名称的子字符串进行搜索，并且区分大小写。</p>`,448)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
