import{_ as s,c as a,aI as e,o as t}from"./chunks/framework.b7dag8kZ.js";const n="/images/mq5_programming_for_traders/MQL5-Programming-for-Traders-10-1.png",c=JSON.parse('{"title":"错误修复与调试","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/welcome/error_fixing_and_debugging"}],["meta",{"property":"og:title","content":"错误修复与调试"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/welcome/error_fixing_and_debugging.md","filePath":"mq5_programming_for_traders/welcome/error_fixing_and_debugging.md","lastUpdated":1745411614000}'),l={name:"mq5_programming_for_traders/welcome/error_fixing_and_debugging.md"};function h(r,i,p,k,o,d){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="错误修复与调试" tabindex="-1">错误修复与调试 <a class="header-anchor" href="#错误修复与调试" aria-label="Permalink to &quot;错误修复与调试&quot;">​</a></h1><p>程序设计艺术不仅需要指导程序执行任务，还需防范潜在错误。由于多种不明显因素影响程序行为，后者更为困难。错误可能出现在不同阶段，分为以下几类：</p><h2 id="错误类型" tabindex="-1">错误类型 <a class="header-anchor" href="#错误类型" aria-label="Permalink to &quot;错误类型&quot;">​</a></h2><ol><li><p><strong>编译错误</strong><br> 编译器检查到不符合语法的源代码时返回，最易修复。</p></li><li><p><strong>运行时错误</strong><br> 程序运行中出现的异常（如除零、访问越界数组元素等），特定输入条件下触发，较难发现。</p></li><li><p><strong>设计错误</strong><br> 导致程序无提示崩溃（如无限循环），定位和复现最困难。</p></li><li><p><strong>隐藏错误</strong><br> 程序看似正常运行但输出错误结果，微小偏差可能难以察觉。</p></li></ol><h2 id="案例分析-数组越界问题" tabindex="-1">案例分析：数组越界问题 <a class="header-anchor" href="#案例分析-数组越界问题" aria-label="Permalink to &quot;案例分析：数组越界问题&quot;">​</a></h2><p>以下问题代码会导致数组越界：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages[hour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><p>当<code>hour</code>值超出范围时，索引可能超过数组长度3。</p><h3 id="调试步骤" tabindex="-1">调试步骤 <a class="header-anchor" href="#调试步骤" aria-label="Permalink to &quot;调试步骤&quot;">​</a></h3><ol><li>使用MetaEditor调试器（F5启动实时调试）</li><li>设置参数<code>GreetingHour=100</code>复现错误</li><li>调试器显示错误位置：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>严重错误：数组越界</span></span>
<span class="line"><span>是否进入调试器？</span></span></code></pre></div></li><li>检查变量发现<code>hour/8=12</code>，超出数组索引范围[0-2]</li></ol><p><img src="`+n+`" alt=""></p><h3 id="问题修复" tabindex="-1">问题修复 <a class="header-anchor" href="#问题修复" aria-label="Permalink to &quot;问题修复&quot;">​</a></h3><p>使用模运算符保证索引有效：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> hour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  string messages[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;早安&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;午安&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;晚安&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages[hour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 24</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 先模24再除8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>改进措施：</p><ol><li>将输入参数类型改为<code>uint</code>防止负数</li><li>添加参数说明提示有效范围：</li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GreetingHour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 问候时间（0-23）</span></span></code></pre></div><h2 id="调试技巧" tabindex="-1">调试技巧 <a class="header-anchor" href="#调试技巧" aria-label="Permalink to &quot;调试技巧&quot;">​</a></h2><ul><li><strong>变量监视</strong>：在调试面板添加表达式（如<code>hour%24/8</code>）查看实时值</li><li><strong>调用栈检查</strong>：查看函数调用链定位问题来源</li><li><strong>分步调试</strong>：逐行执行观察程序流程</li></ul><h2 id="函数设计原则" tabindex="-1">函数设计原则 <a class="header-anchor" href="#函数设计原则" aria-label="Permalink to &quot;函数设计原则&quot;">​</a></h2><ul><li><strong>独立性</strong>：函数应避免依赖外部变量，通过参数传递数据</li><li><strong>可重用性</strong>：函数应设计为可在不同上下文中复用</li><li><strong>输入验证</strong>：对参数进行有效性检查并给出友好提示</li></ul><p>通过合理使用调试工具和规范的编码实践，可以有效提升程序的健壮性和可维护性。</p>`,22)]))}const E=s(l,[["render",h]]);export{c as __pageData,E as default};
