import{_ as i,c as a,aI as n,o as l}from"./chunks/framework.b7dag8kZ.js";const o=JSON.parse('{"title":"面向对象OOP","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mt5_quick_start/advance_konwledge/oop"}],["meta",{"property":"og:title","content":"面向对象OOP"}]]},"headers":[],"relativePath":"mt5_quick_start/advance_konwledge/oop.md","filePath":"mt5_quick_start/advance_konwledge/oop.md","lastUpdated":1745411614000}'),h={name:"mt5_quick_start/advance_konwledge/oop.md"};function t(e,s,p,k,r,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="面向对象oop" tabindex="-1">面向对象OOP <a class="header-anchor" href="#面向对象oop" aria-label="Permalink to &quot;面向对象OOP&quot;">​</a></h1><h2 id="一、面向对象-vs-面向过程" tabindex="-1">一、面向对象 vs 面向过程 <a class="header-anchor" href="#一、面向对象-vs-面向过程" aria-label="Permalink to &quot;一、面向对象 vs 面向过程&quot;">​</a></h2><p>掌握这部分内容后，才能理解下一章“如何在一个EA中运行多个策略”。此前未讲解，是因为知识点较为抽象，但随着学员职业多样化，理解OOP的需求也在增加。科班出身的开发者可能更容易理解，非科班学员尽量掌握——OOP是强大的编程思想，能让代码更简洁、易复用、可扩展，但在EA这种小规模开发中场景较少，大家量力而行。</p><h3 id="_1-面向过程" tabindex="-1">1. 面向过程 <a class="header-anchor" href="#_1-面向过程" aria-label="Permalink to &quot;1. 面向过程&quot;">​</a></h3><p>注重“过程”，将任务拆分为按顺序执行的方法，所有方法执行完毕即完成任务。<br><strong>举例：开车</strong></p><ul><li>步骤：进入车辆 → 启动车辆 → 操作方向盘 → 行驶 → 停止 → 熄火 → 离开车辆</li><li>特点：按流程顺序调用独立方法。</li></ul><h3 id="_2-面向对象" tabindex="-1">2. 面向对象 <a class="header-anchor" href="#_2-面向对象" aria-label="Permalink to &quot;2. 面向对象&quot;">​</a></h3><p>注重“对象”，将任务涉及的事物抽象为对象，通过对象的方法协作完成任务。<br><strong>举例：开车</strong></p><ul><li>对象：“人”和“车”</li><li>人拥有的方法：拧钥匙（启动车辆）、掌控方向盘</li><li>车拥有的方法：启动、行驶、停止</li><li>执行：创建对象 → 按顺序调用对象的方法</li><li>特点：先抽象对象，再通过对象交互解决问题。小规模问题中可能显得复杂，但适合复杂场景。</li></ul><h2 id="二、类-class-的核心概念" tabindex="-1">二、类（Class）的核心概念 <a class="header-anchor" href="#二、类-class-的核心概念" aria-label="Permalink to &quot;二、类（Class）的核心概念&quot;">​</a></h2><p>类是OOP的基础，用于组织代码和数据。以下通过<code>Strategy</code>类示例拆分知识点：</p><h3 id="_1-类的结构" tabindex="-1">1. 类的结构 <a class="header-anchor" href="#_1-类的结构" aria-label="Permalink to &quot;1. 类的结构&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MagicNum;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // EA编号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SlType;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 止损方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SlParam;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 止损依据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  string CurrentSymbol;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 当前品种</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ENUM_TIMEFRAMES TimeFrame;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 时间周期</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BbPeriod;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              //  bb周期</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slBBandsRange;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> efficiencyRatio;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpMagicNum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpSlType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpSlParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           string</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpCurrentSymbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENUM_TIMEFRAMES</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpTimeFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpBbPeriod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpSlBBandsRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> InpefficiencyRatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MagicNum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpMagicNum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SlType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpSlType;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    SlParam </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpSlParam;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CurrentSymbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpCurrentSymbol;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    TimeFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpTimeFrame;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    BbPeriod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpBbPeriod;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    slBBandsRange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpSlBBandsRange;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    efficiencyRatio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InpefficiencyRatio;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> barsTotal;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> point;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initBalance;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handle;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> upperBuffer[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseBuffer[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lowerBuffer[];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MqlTick currentTick;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> efficiencyRatioHandle;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> efficencyRatioBuffer[];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnInitEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnTickEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnDeinitEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h4 id="_1-成员变量" tabindex="-1">（1）成员变量 <a class="header-anchor" href="#_1-成员变量" aria-label="Permalink to &quot;（1）成员变量&quot;">​</a></h4><ul><li><strong>私有成员（<code>private</code>）</strong>：仅类内部可访问</li><li><strong>公有成员（<code>public</code>）</strong>：类内外均可访问</li></ul><h4 id="_2-构造函数" tabindex="-1">（2）构造函数 <a class="header-anchor" href="#_2-构造函数" aria-label="Permalink to &quot;（2）构造函数&quot;">​</a></h4><ul><li>特殊成员函数，创建对象（<code>new Strategy(...)</code>）时自动调用，用于初始化成员变量。</li><li>必须传递构造函数定义的参数，否则编译报错。</li></ul><h4 id="_3-成员函数" tabindex="-1">（3）成员函数 <a class="header-anchor" href="#_3-成员函数" aria-label="Permalink to &quot;（3）成员函数&quot;">​</a></h4><ul><li>类内定义的函数，如<code>OnInitEvent</code>、<code>OnTicketEvent</code>，实现具体逻辑。</li></ul><h3 id="_2-封装与访问权限" tabindex="-1">2. 封装与访问权限 <a class="header-anchor" href="#_2-封装与访问权限" aria-label="Permalink to &quot;2. 封装与访问权限&quot;">​</a></h3><ul><li><strong>封装</strong>：将数据（成员变量）和操作（成员函数）封装到类中，通过<code>private</code>/<code>public</code>控制访问。 <ul><li><code>private</code>：隐藏内部细节，外部不可直接访问（需通过类内公共方法间接操作）。</li><li><code>public</code>：对外暴露的接口，允许外部调用。</li></ul></li><li><strong>示例</strong>：</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Strategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">102</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AUDUSD.C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,PERIOD_H3,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="三、oop在ea中的应用-封装策略" tabindex="-1">三、OOP在EA中的应用：封装策略 <a class="header-anchor" href="#三、oop在ea中的应用-封装策略" aria-label="Permalink to &quot;三、OOP在EA中的应用：封装策略&quot;">​</a></h2><h3 id="_1-传统ea-vs-面向对象ea" tabindex="-1">1. 传统EA vs 面向对象EA <a class="header-anchor" href="#_1-传统ea-vs-面向对象ea" aria-label="Permalink to &quot;1. 传统EA vs 面向对象EA&quot;">​</a></h3><ul><li><strong>传统EA</strong>：参数通过<code>input</code>修饰，全局变量直接暴露，逻辑分散在全局函数中。</li><li><strong>面向对象EA</strong>： <ul><li>将策略逻辑封装到类中，<code>input</code>参数转为类的公有成员或构造函数参数。</li><li>全局变量转为类的私有成员，通过类方法访问。</li><li>系统回调函数（如<code>OnInit</code>、<code>OnTick</code>、<code>OnDeinit</code>）转为类的成员函数，由外部调用。</li></ul></li></ul><h3 id="_2-封装优势" tabindex="-1">2. 封装优势 <a class="header-anchor" href="#_2-封装优势" aria-label="Permalink to &quot;2. 封装优势&quot;">​</a></h3><ul><li><strong>代码复用</strong>：多个策略可继承同一个基类，复用公共逻辑。</li><li><strong>多策略管理</strong>：一个EA中创建多个策略对象（如<code>Strategy1</code>、<code>Strategy2</code>），独立管理各自状态和逻辑，避免全局变量冲突。</li></ul><h2 id="四、总结与建议" tabindex="-1">四、总结与建议 <a class="header-anchor" href="#四、总结与建议" aria-label="Permalink to &quot;四、总结与建议&quot;">​</a></h2><ul><li><strong>抽象概念</strong>：封装、继承、多态等需系统学习，短期理解困难很正常。</li><li><strong>应用场景</strong>：若需在一个EA中运行多个策略，按固定模式封装类；若无此需求，可跳过OOP，优先掌握基础开发。</li><li><strong>目标</strong>：通过类的封装，为后续多策略管理奠定基础，代码结构更清晰、可扩展。</li></ul>`,29)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
