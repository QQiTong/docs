import{_ as i,c as a,aI as n,o as t}from"./chunks/framework.b7dag8kZ.js";const g=JSON.parse('{"title":"注释 标识符 保留字","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mt5_quick_start/basic_grammar/"}],["meta",{"property":"og:title","content":"注释 标识符 保留字"}]]},"headers":[],"relativePath":"mt5_quick_start/basic_grammar/index.md","filePath":"mt5_quick_start/basic_grammar/index.md","lastUpdated":1745411614000}'),e={name:"mt5_quick_start/basic_grammar/index.md"};function l(h,s,p,k,r,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="注释-标识符-保留字" tabindex="-1">注释 标识符 保留字 <a class="header-anchor" href="#注释-标识符-保留字" aria-label="Permalink to &quot;注释 标识符 保留字&quot;">​</a></h1><p>MQL5编程语言的三大基础语法：<strong>注释</strong>、<strong>标识符</strong>和<strong>保留字</strong>。这三个知识点是编写EA的基石，需熟练掌握。</p><h2 id="一、注释" tabindex="-1">一、注释 <a class="header-anchor" href="#一、注释" aria-label="Permalink to &quot;一、注释&quot;">​</a></h2><p><strong>作用</strong>：在代码中添加说明性文字，帮助程序员理解逻辑，不影响程序执行。<br><strong>分类</strong>：</p><ol><li><strong>单行注释</strong>：以<code>//</code>开头，仅作用于当前行。<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是单行注释，解释变量初始化  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myVariable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><strong>多行注释</strong>：以<code>/*</code>开头，<code>*/</code>结尾，可跨越多行。<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">这是多行注释  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">可用于解释复杂逻辑或函数功能  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 函数内部代码  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p><strong>最佳实践</strong>：</p><ul><li>量化EA代码量较小，可选择性添加注释；</li><li>工程性项目必须详细注释，避免后期难以维护；</li><li>注释需简洁明了，避免冗余。</li></ul><h2 id="二、标识符" tabindex="-1">二、标识符 <a class="header-anchor" href="#二、标识符" aria-label="Permalink to &quot;二、标识符&quot;">​</a></h2><p><strong>定义</strong>：用于给变量、函数、类等命名的符号。<br><strong>命名规则</strong>：</p><ol><li><strong>允许字符</strong>： <ul><li>字母（A-Z、a-z）</li><li>数字（0-9）</li><li>下划线（<code>_</code>）</li></ul></li><li><strong>禁止规则</strong>： <ul><li>不能以数字开头（如<code>1name</code>非法，<code>name1</code>合法）；</li><li>区分大小写（<code>MyVariable</code>和<code>myVariable</code>是不同标识符）；</li><li>不能与<strong>保留字</strong>冲突。</li></ul></li><li><strong>示例</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 合法标识符  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string myString;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age_18;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TotalProfit;</span></span></code></pre></div></li></ol><p><strong>常见命名习惯</strong>：</p><ul><li><strong>驼峰命名法</strong>（推荐）：<code>camelCase</code></li><li><strong>下划线命名法</strong>：<code>snake_case</code></li><li><strong>匈牙利命名法</strong>（可选）：<code>iCounter</code>（前缀表示类型）</li></ul><h2 id="三、保留字" tabindex="-1">三、保留字 <a class="header-anchor" href="#三、保留字" aria-label="Permalink to &quot;三、保留字&quot;">​</a></h2><p><strong>定义</strong>：MQL5语言预定义的具有特殊含义的单词，禁止作为标识符使用。<br><strong>分类与示例</strong>：</p><ol><li><strong>数据类型</strong>：<code>bool</code>、<code>float</code>、<code>int</code>、<code>string</code>、<code>datetime</code>等。</li><li><strong>运算符与控制结构</strong>：<code>if</code>、<code>else</code>、<code>for</code>、<code>while</code>、<code>break</code>、<code>return</code>等。</li><li><strong>访问修饰符</strong>：<code>private</code>、<code>protected</code>、<code>public</code>。</li><li><strong>特殊关键字</strong>：<code>true</code>、<code>false</code>、<code>this</code>、<code>template</code>。</li><li><strong>预处理指令</strong>：<code>#define</code>、<code>#include</code>、<code>#ifdef</code>。</li></ol><p><strong>完整保留字列表</strong>（参考）：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 数据类型  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, string, datetime, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运算符与控制结构  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">if, else, for, while, break, continue, return, switch, case  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 访问修饰符  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 特殊关键字  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">true, false, this, template  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 预处理指令  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#define, #include, #ifdef, #ifndef, #endif</span></span></code></pre></div><p><strong>快速区分方法</strong>：</p><ul><li><strong>颜色识别</strong>：在MetaEditor中，保留字默认显示为<strong>蓝色</strong>，标识符为<strong>黑色</strong>。</li><li><strong>编译错误</strong>：若使用保留字命名，编译时会报错：<code>&#39;int&#39; : identifier is reserved</code>。</li></ul><h2 id="四、实战案例与注意事项" tabindex="-1">四、实战案例与注意事项 <a class="header-anchor" href="#四、实战案例与注意事项" aria-label="Permalink to &quot;四、实战案例与注意事项&quot;">​</a></h2><ol><li><strong>错误示例</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 错误：int是保留字  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string String </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 错误：String是保留字（MQL5中string小写）</span></span></code></pre></div></li><li><strong>正确示例</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myInt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string myString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><strong>颜色验证</strong>： <ul><li>打开MetaEditor，输入保留字（如<code>int</code>），观察其颜色是否为蓝色；</li><li>输入自定义标识符（如<code>myVariable</code>），颜色应为黑色。</li></ul></li></ol>`,21)]))}const c=i(e,[["render",l]]);export{g as __pageData,c as default};
