import{_ as s}from"./chunks/options_icon.B5aFtIHS.js";import{_ as a}from"./chunks/ai_assistant_settings.CTSMHfXT.js";import{_ as t}from"./chunks/settings_debug.Ct2eI7Lx.js";import{_ as e,c as l,ag as n,o as p}from"./chunks/framework.CCnnzLsu.js";const r="/metaeditor/settings.png",h="/metaeditor/settings_general.png",o="/metaeditor/settings_colors.png",k="/metaeditor/settings_font.png",d="/metaeditor/settings_styler.png",c="/metaeditor/settings_compilers.png",m="/metaeditor/settings_mql5community.png",Q=JSON.parse('{"title":"MetaEditor设置","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/metaeditor/welcome/settings"}],["meta",{"property":"og:title","content":"MetaEditor设置"}]]},"headers":[],"relativePath":"metaeditor/welcome/settings.md","filePath":"metaeditor/welcome/settings.md","lastUpdated":1744293048000}'),g={name:"metaeditor/welcome/settings.md"};function E(y,i,u,f,_,b){return p(),l("div",null,i[0]||(i[0]=[n('<h1 id="metaeditor设置" tabindex="-1">MetaEditor设置 <a class="header-anchor" href="#metaeditor设置" aria-label="Permalink to &quot;MetaEditor设置&quot;">​</a></h1><p>MetaEditor 提供多种设置，有助您在开发环境中方便地自定义您的工作。 若要打开设置，请点击<img src="'+s+'" alt="选项..."> 位于 <a href="/metaeditor/main_menu/main_menu_tools">工具</a> 菜单当中的 &quot;选项...&quot; (Ctrl+O)。</p><p><img src="'+r+'" alt="MetaEditor设置"></p><p>所有设置都根据它们的工作性质分组在若干选项卡中:</p><ul><li><a href="#common">常规</a> ― 常规代码编辑设置: 选卡大小，自动完成，自动名称列表，等等。</li><li><a href="#color">颜色</a> ― 用于高亮显示 MQL4/MQL5 语言语法的颜色。</li><li><a href="#font">字体</a> ― 在 MetaEditor 中的文本输入设置。</li><li><a href="#styler">样式器</a> ― 设置源代码样式自动化。</li><li><a href="#compiler">编译器</a> ― 设置多语言项目的外部编译</li><li><a href="#ai_assistant">AI Assistant</a> ― AI Assistant编码助手集成设置。</li><li><a href="#debug">调试</a> ― 程序 <a href="/metaeditor/development/debug">调试</a> 设置。</li><li><a href="#mql5community">MQL5 社区</a> ― 配置访问 MQL5 社区独有服务的连接，包括 <a href="/metaeditor/mql5storage/">MQL5 存储</a>。</li></ul><h2 id="common" tabindex="-1">常规 <a class="header-anchor" href="#common" aria-label="Permalink to &quot;常规{#common}&quot;">​</a></h2><p>此选项卡包括常规代码编辑设置: 选项卡大小，自动完成，名称自动列表，等等。</p><p><img src="'+h+'" alt="常规"></p><p>该窗口包含以下参数:</p><ul><li>制表 ― 按 Tab 键时插入的字符数。</li><li>插入空格 ― 启用/禁用将制表符替换为空格。</li><li>字符串索引 ― 在代码编辑窗口中启用/禁用行号。</li><li>自动缩进 ― 启用/禁用自动缩进，当移动到下一个字符串时根据前一个字符串缩进。</li><li>自动参数 ― 当您输入时，启用/禁用自动打开 <a href="/metaeditor/development/intelligent_management#info">函数签名</a> 提示。</li><li>自动列表名 ― 在输入函数名称的第一个字符时，启用/禁用自动打开内置和自定义函数的可滚动 <a href="/metaeditor/development/intelligent_management#substitute">列表名</a>。</li><li>&quot;n&quot; 字符之后名称列表 ― 设置自动名称列表的触发字符数。</li><li>插入 () 并封闭 } ] ) &#39; &quot; ― 在输入函数后自动插入起始括号和封闭括号。</li><li>高亮当前行 ― 启用时，编辑窗口中的当前代码行将以灰色高亮显示。</li><li>高亮匹配括号 ― 启用时，鼠标光标位于匹配括号之间时，将高亮显示匹配括号的背景。</li><li>启用剪贴板历史 ― <a href="/metaeditor/development/intelligent_management#clipboard">剪贴板历史</a>可以更快地处理源代码。如果不需要，您可以禁用此功能。</li></ul><div class="tip custom-block"><p class="custom-block-title">温馨提醒</p><p>建议在转换到其它编辑器时不要禁用 &quot;插入空格&quot; 选项以便保存代码格式。</p></div><h2 id="color" tabindex="-1">颜色 <a class="header-anchor" href="#color" aria-label="Permalink to &quot;颜色{#color}&quot;">​</a></h2><p>&quot;颜色&quot; 选项卡配置在编辑源代码时，MQL4/MQL5 语言语法的高亮显示。</p><p><img src="'+o+'" alt="颜色"></p><p>元素块允许您选择 MQL4/MQL5 语言语法元素，而左边的部分管理它们的显示: 前景，背景。 设置下方的块示意如何在代码编辑窗口中显示此元素的示例。 点击重置则全部语法高亮设置重置为默认值。</p><p>使用这个选项，可以为代码编辑窗口选择配色方案预设：浅色（默认）、深色和蓝色。为了便于夜间操作，您可以自定义编辑器，而无需手动配置编辑器视图。这情况下，只需选择深色配色方案。</p><h2 id="font" tabindex="-1">字体 <a class="header-anchor" href="#font" aria-label="Permalink to &quot;字体{#font}&quot;">​</a></h2><p>此选项卡配置在编辑窗口中代码显示的字体，字号和样式。</p><p><img src="'+k+'" alt="字体"></p><p>以下设置块可用:</p><ul><li>字体 ― 从可用列表中选择字体字号。</li><li>字号 ― 字体字号。 字号可以从列表中选择或手动输入。还可以在<a href="/metaeditor/workspace/source_code_windows">代码编辑窗口</a>中更改字体大小。这可以通过按住Ctrl并滚动鼠标滚轮来完成。</li><li>样式 ― 从可用列表中选择字体编码。</li><li>窗口预览 ― 此处我们可以看到应用设置后的最终文本外观。</li><li>粗体 ― 启用/禁用元素粗体显示。</li></ul><h2 id="styler" tabindex="-1">Styler（样式器） <a class="header-anchor" href="#styler" aria-label="Permalink to &quot;Styler（样式器）{#styler}&quot;">​</a></h2><p><a href="/metaeditor/development/styler">styler</a>可快速地使源代码设置符合推荐的标准。这使得代码更专业，更易读。</p><p><img src="'+d+`" alt="styler设置"></p><p>在这部分，您可以指定styler设置：</p><ul><li>Style ― 用于格式化代码的样式。可以使用多种样式，包括推荐的MetaQuotes样式、Linux、Java、GNU和其他样式。</li><li>每个缩进的空格数 ― 要插入到新行的开头以对其嵌入式结构的空格数。</li></ul><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(condition)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //主体   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><ul><li>将制表符转换为空格 ― 如果启用此选项，styler将用一个空格替换每个制表符。</li><li>删除空行 ― styler可以删除所有只有空格字符、制表符或换行符的行。</li><li>在逗号和分号之后插入空格 ― 启用此选项后，样式器(/metaeditor/development/styler)将使用元素枚举以可视方式分隔结构：</li></ul><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样式器之前   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">total;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //主体   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样式器之后   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">total; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 主体   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ul><li>在语句操作符周围插入空格 ― 启用此选项后，样式器(/metaeditor/development/styler)将围绕赋值、等式、比较和其他操作符插入空格。例如：</li></ul><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样式器之前   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样式器之后   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h2 id="compiler" tabindex="-1">编译器 <a class="header-anchor" href="#compiler" aria-label="Permalink to &quot;编译器{#compiler}&quot;">​</a></h2><p>对于多语言项目，您不必使用外部编辑器。C/C++和Python项目可从MetaEditor直接管理。</p><p>如果您的电脑安装了对应的编译器，MetaEditor将进行检测并添加到设置中。同时，您还可以在“编译器”选项卡下指定所需组件的路径。在相同的选项卡中，您可以通过点击相应字段旁边的“安装”来下载组件。</p><p>然后，您就可以如同处理MQL5程序一样，处理C/C++和Python项目。</p><p><img src="`+c+'" alt="外部编译器设置"></p><p>在这部分，您还可以为编译MQL5程序设置参数：</p><ul><li><p>MQL5 ― 将为其编译<a href="/metaeditor/development/compile#architecture">应用程序</a>的处理器体系架构。</p></li><li><p>检查浮点除法器 ― 禁用检查的应用程序编译速度稍快，因为在执行代码过程中，不检查除数为零的错误。可以为每个<a href="/metaeditor/mql5storage/projects#properties">项目</a>单独覆盖该参数。</p></li></ul><h2 id="ai_assistant" tabindex="-1">AI Assistant <a class="header-anchor" href="#ai_assistant" aria-label="Permalink to &quot;AI Assistant{#ai_assistant}&quot;">​</a></h2><p>MetaEditor 具有 <a href="/metaeditor/development/ai_assistant">AI Assistant</a> ― 基于 <a href="https://openai.com/blog/openai-codex" target="_blank" rel="noreferrer">OpenAI</a> 的模型支持的高级自动代码完成工具。这部分说明相关设置：</p><p><img src="'+a+'" alt="AI Assistant设置"></p><ul><li>使用MQL5账户 ― 这个选项目前免费提供。稍后，您将能够直接从您的 <a href="#mql5community">MQL5账户余额</a>中支付订阅费用。</li><li>使用OpenAI API密钥 ― 如果您已购买 <a href="https://openai.com/api/pricing/" target="_blank" rel="noreferrer">订阅</a> 并拥有密钥，您就可以使用。</li><li>模型 ― 一个将处理您的请求的神经网络，目前可用GPT-3.5 Turbo, GPT-4 Turbo 和 GPT-4o。</li><li>最大令牌数 ― 模型在响应提示时可以返回的文本单位的数量。</li><li>可变性 ― 影响神经网络遵循提示的严格程度。数值越高，结果随机性越大。该选项对应于OpenAI模型中的 <a href="https://platform.openai.com/docs/api-reference/chat#classifications/create-temperature" target="_blank" rel="noreferrer">温度</a> 参数。</li></ul><h2 id="debug" tabindex="-1">调试 <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;调试{#debug}&quot;">​</a></h2><p>该选项卡允许您配置常规 <a href="/metaeditor/development/debug">调试</a> 和程序 <a href="/metaeditor/development/profiling">分析</a> 选项。</p><p><img src="'+t+'" alt="调试"></p><p>在此有以下设置:</p><ul><li><p>启用分析优化― 禁用该选项，访问分析报告中的更多详细信息。然后，请注意，如果不进行优化，速度可能会明显下降，且代码瓶颈可能不准确。</p></li><li><p>在分析中启用内联 ― 在内联期间，函数代码被直接添加到函数调用站，这使得在某些情况下可以显著加速程序。但是，此过程会使<a href="/metaeditor/development/profiling">函数分析</a>变得困难。为了获得有关“纯”函数的报告，可以禁用内联：</p></li><li><p>可视模式调试历史 ― 默认情况下，历史调试使用的是非可视模式。此选项可用于手动启用可视模式。历史分析通常在非可视化模式下运行。<br> 可视化模式下的历史分析实际上是无用的，因为资源消耗在渲染方面而不是MQL程序计算上。通常，真实的数据模式对于测试图形函数(面板、对象和其他)已经足够了。这种模式下的程序只是在常规图表上启动。</p></li><li><p>使用指定设置 ― 调试和分析程序时启用/禁用某些设置。 开始调试或分析时，程序将在指定品种和周期的图表上启动。 在历史数据上进行调试时，这些参数用于可视化测试。 如果禁用此选项，则以下所有字段均不可编辑。</p></li><li><p>品种 ― 调试/分析程序时使用的图表品种。</p></li><li><p>周期 ― 调试/分析程序时使用的图表周期。</p></li><li><p>日期 ― 检测程序时 <a href="/metaeditor/development/debug#history">所依据历史数据的</a> 区间。 在此区间，策略测试器将启动可视测试。</p></li><li><p>执行 ― 策略测试器允许您在智能交易系统操作过程中模拟网络延迟，以便测试更接近实际情况。 在策略测试中可能会在发出交易请求及执行请求期间插入某个时间延迟。从发送请求之刻起到执行为止，价格可以发生变化。以此帮助您评估交易处理速度对交易结果的影响。选择用于调试历史记录的延迟值：无延迟，固定值（其中一个预定值或自定义值）或随机值。欲了解更多信息，请阅读交易平台用户指南。</p></li><li><p>逐笔报价生成模式 ― 用于历史调试。 欲了解更多信息，请阅读交易平台用户指南。</p></li><li><p>每次逐笔报价 ― 最准确但最慢的模式。 它模拟所有的逐笔报价。</p></li><li><p>1 分钟 OHLC ― 在这种模式下，每根分钟柱线只模拟 4 个价格 (开盘价，最高价，最低价和收盘价)。</p></li><li><p>仅开盘价 ― 在此模式下，虽然也会模拟 OHLC 价格，但全部等同于开盘价用于测试/优化。</p></li><li><p>入金 ― 初始入金货币和用于历史调试的金额。请注意，将盈利和预付款转换为指定入金货币的交叉汇率必须在账户上可用，以确保适当的调试。只有“外汇”或“外汇无杠杆”计算类型的交易品种可被用作交叉汇率。</p></li><li><p>杠杆 ― 用于调试历史数据的杠杆。</p></li><li><p>盈利（点数表示） ― 如果启用此选项，则测试器中调试和配置的盈利将以点计算，而非资金计算。这种模式加快了测试速度，同时不需要使用转化率以入金货币重新计算盈利（因此没有必要下载对应的价格历史）。在此模式下，取消库存费和手续费的计算。请注意，当以点数计算盈利时，成交量并不重要。每笔交易只计算盈/亏点数。此外，在此模式下不能执行预付款控制。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">温馨提醒</p><p>如果在此选项卡上未指定用于调试/分析的品种和图表周期，则默认使用市场观察窗口的第一个品种和 H1 时间帧。</p></div><h2 id="mql5community" tabindex="-1">MQL5 社区 <a class="header-anchor" href="#mql5community" aria-label="Permalink to &quot;MQL5 社区{#mql5community}&quot;">​</a></h2><p>交易平台和 MetaEditor 紧密集成于 <a href="https://www.mql5.com/" title="MQL5 社区" target="_blank" rel="noreferrer">MQL5 社区</a> ― 一个 MQL5开发人员的社区。MQL5 社区为交易者和开发者提供独特的服务:</p><ul><li>市场 ― 您所选购的任何成品应用程序均来自 <a href="https://www.mql5.com/zh/market" title="在 MQL5 社区网站上的市场" target="_blank" rel="noreferrer">MQL4/MQL5 程序商店</a>。购买之前，您可以下载试用版并在策略测试器中进行测试。</li><li>MQL5 云网络 <a href="https://cloud.mql5.com/" title="MQL5分布式云网络" target="_blank" rel="noreferrer">是一个强大的分布式计算网络</a> 可用于策略测试器中的智能交易系统的测试和优化。 现在可以在几分钟内进行成千上万个优化。除了利用此网络之外，您还可以提供自己的计算能力来赚钱。</li><li>MQL5 存储 ― 集成于 MetaEditor 的个人源代码存储。保持您的代码安全并从世界任何地方访问它。 MQL5 存储功能将很快扩展，允许多个用户远程操控一个项目。</li><li>自由职业 ― 如果您无法在代码库或市场中找到期望的应用程序，您可从专业开发人员那里订购一款，这就是MQL5 社区网站的 <a href="https://www.mql5.com/zh/job" title="MQL5 社区上的自由职业" target="_blank" rel="noreferrer">自由职业</a> 板块。</li><li>代码库 ― <a href="/metaeditor/workspace/toolbox#codebase" title="在代码库标签下载应用程序">下载</a> 发布的代码可至 MQL5 社区的 <a href="https://www.mql5.com/zh/code" title="代码库" target="_blank" rel="noreferrer">代码库</a> 板块。 代码自动放置在正确的目录中并进行编译。</li><li>文章 ― 在 MQL5 社区网站上发表的有关 MQL5 编程语言和平台的各种实用文章。 <a href="/metaeditor/toolbar/toolbar_search">查找</a> 方便地按照文章标题和描述将必要数据列于 <a href="/metaeditor/workspace/toolbox#articles">工具箱</a> 窗口的单独列表中。</li><li>MQL5 图表 ― 一项特殊服务，允许 <a href="https://www.mql5.com/zh/charts" target="_blank" rel="noreferrer">从交易平台在线发布屏幕截图</a>，并在火爆的社交网络中分享。</li><li>信号 ― 订阅专业操盘手的 <a href="https://www.mql5.com/zh/signals" target="_blank" rel="noreferrer">交易信号</a>，并直接从您的平台里接收它们。</li></ul><p><img src="'+m+'" alt="配置访问 MQL5 社区"></p><p>输入您的帐户详细信息，访问 MQL5 社区的所有独特服务：</p><ul><li>登录名 ― MQL5 社区账户。</li><li>口令 ― 指定帐户的口令。</li><li>口令以加密形式存储在硬盘中。</li><li>登录名和口令大小写敏感。 它们应该准确匹配您在 MQL5 社区网站上的登录信息。</li><li>如果您没有 MQL5 社区帐户，请 <a href="https://www.mql5.com/zh/auth_register" title="在 MQL5 社区注册" target="_blank" rel="noreferrer">注册</a> 并获得专有的访问机会。</li></ul>',54)]))}const D=e(g,[["render",E]]);export{Q as __pageData,D as default};
