import{_ as i,c as a,aI as t,o as n}from"./chunks/framework.b7dag8kZ.js";const o=JSON.parse('{"title":"变量","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mt5_quick_start/basic_grammar/variable"}],["meta",{"property":"og:title","content":"变量"}]]},"headers":[],"relativePath":"mt5_quick_start/basic_grammar/variable.md","filePath":"mt5_quick_start/basic_grammar/variable.md","lastUpdated":1745411614000}'),l={name:"mt5_quick_start/basic_grammar/variable.md"};function h(e,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h1><p>在编程中，<strong>变量</strong>是存储和操作数据的核心载体。MQL5中的变量需先声明后使用，根据作用域可分为<strong>局部变量</strong>、<strong>全局变量</strong>和<strong>输入变量</strong>。以下从声明、赋值、作用域三方面详细解析：</p><h2 id="一、变量的本质与基本操作" tabindex="-1">一、变量的本质与基本操作 <a class="header-anchor" href="#一、变量的本质与基本操作" aria-label="Permalink to &quot;一、变量的本质与基本操作&quot;">​</a></h2><p><strong>定义</strong>：变量是内存中存储数据的容器，需指定数据类型（如<code>int</code>/<code>double</code>/<code>string</code>/<code>bool</code>）和名称（标识符）。<br><strong>两大核心操作</strong>：</p><ol><li><p><strong>声明变量</strong>：告诉编译器“我需要一个存储区域”，语法：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数据类型 变量名;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 仅声明（未赋值）  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">数据类型 变量名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 初始值;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 声明并初始化</span></span></code></pre></div><ul><li>示例：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 声明整型变量（未赋值）  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 声明双精度变量并赋值  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string symbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;EURUSD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 声明字符串并赋值</span></span></code></pre></div></li></ul></li><li><p><strong>赋值操作</strong>：将数据存入变量，语法：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">变量名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 新值;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 覆盖原有值</span></span></code></pre></div><ul><li>示例：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 给已声明的age变量赋值  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0760</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 修改price的值</span></span></code></pre></div></li></ul></li></ol><p><strong>注意</strong>：</p><ul><li>未赋值的变量可能存储随机值，需初始化后再使用。</li><li>赋值时需匹配数据类型（如<code>int</code>变量不能直接赋字符串值）。</li></ul><h2 id="二、作用域-变量的-可见范围" tabindex="-1">二、作用域：变量的“可见范围” <a class="header-anchor" href="#二、作用域-变量的-可见范围" aria-label="Permalink to &quot;二、作用域：变量的“可见范围”&quot;">​</a></h2><p>变量的作用域决定了它在代码中可被访问的区域，MQL5中分为三类：</p><h3 id="_1-局部变量" tabindex="-1">1. <strong>局部变量</strong> <a class="header-anchor" href="#_1-局部变量" aria-label="Permalink to &quot;1. **局部变量**&quot;">​</a></h3><ul><li><strong>定义</strong>：在函数（如<code>OnInit()</code>/<code>OnTick()</code>）或代码块（花括号<code>{}</code>）内声明的变量。</li><li><strong>作用域</strong>：仅在声明它的函数/代码块内有效，外部无法访问。</li><li><strong>示例</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> localVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 局部变量（仅在OnTick中可见）  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; localVar = &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, localVar);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此处访问localVar会报错（作用域外）</span></span></code></pre></div></li></ul><h3 id="_2-全局变量" tabindex="-1">2. <strong>全局变量</strong> <a class="header-anchor" href="#_2-全局变量" aria-label="Permalink to &quot;2. **全局变量**&quot;">​</a></h3><ul><li><strong>定义</strong>：在所有函数外部声明的变量，作用域覆盖整个程序。</li><li><strong>作用域</strong>：可在任意函数（<code>OnInit()</code>/<code>OnTick()</code>/<code>OnDeinit()</code>）中访问和修改。</li><li><strong>示例</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalBalance;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 全局变量（声明在所有函数外）  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    globalBalance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AccountInfoDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ACCOUNT_BALANCE);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 赋值  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INIT_SUCCEEDED;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; 账户余额：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, globalBalance);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 跨函数访问  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>优势</strong>：避免重复计算，跨函数共享数据（如账户余额、策略参数）。</li></ul><h3 id="_3-输入变量" tabindex="-1">3. <strong>输入变量</strong> <a class="header-anchor" href="#_3-输入变量" aria-label="Permalink to &quot;3. **输入变量**&quot;">​</a></h3><ul><li><strong>定义</strong>：用<code>input</code>关键字声明的特殊全局变量，用于从MT5界面接收用户参数。</li><li><strong>作用域</strong>：全局可见，且值可通过MT5的EA参数面板动态修改。</li><li><strong>语法</strong>：<div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StopLoss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 止损（默认值50.0，用户可修改）  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UseTrailingStop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 是否启用追踪止损（默认true）</span></span></code></pre></div></li><li><strong>应用场景</strong>： <ul><li>EA的可配置参数（如止损、止盈、指标周期）。</li><li>编译后在MT5中拖曳EA到图表时，会弹出参数设置面板：</li></ul></li></ul><h2 id="三、实战对比与最佳实践" tabindex="-1">三、实战对比与最佳实践 <a class="header-anchor" href="#三、实战对比与最佳实践" aria-label="Permalink to &quot;三、实战对比与最佳实践&quot;">​</a></h2><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>声明位置</strong></th><th><strong>可见范围</strong></th><th><strong>修改方式</strong></th><th><strong>典型场景</strong></th></tr></thead><tbody><tr><td>局部变量</td><td>函数/代码块内</td><td>仅当前函数/代码块</td><td>函数内赋值</td><td>临时计算</td></tr><tr><td>全局变量</td><td>所有函数外部</td><td>整个程序</td><td>任意函数内修改</td><td>跨函数共享数据（如账户信息）</td></tr><tr><td>输入变量</td><td>所有函数外部（带<code>input</code>）</td><td>整个程序+MT5面板</td><td>MT5面板修改或代码内修改</td><td>可配置策略参数（如均线周期）</td></tr></tbody></table>`,17)]))}const c=i(l,[["render",h]]);export{o as __pageData,c as default};
