import{_ as i,c as a,ag as n,o as h}from"./chunks/framework.CCnnzLsu.js";const g=JSON.parse('{"title":"内置类型转换","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/common_mql5_apis/built-in_type_conversions"}],["meta",{"property":"og:title","content":"内置类型转换"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/common_mql5_apis/built-in_type_conversions.md","filePath":"mq5_programming_for_traders/common_mql5_apis/built-in_type_conversions.md","lastUpdated":1744387121000}'),t={name:"mq5_programming_for_traders/common_mql5_apis/built-in_type_conversions.md"};function p(l,s,k,e,E,d){return h(),a("div",null,s[0]||(s[0]=[n(`<h1 id="内置类型转换" tabindex="-1">内置类型转换 <a class="header-anchor" href="#内置类型转换" aria-label="Permalink to &quot;内置类型转换&quot;">​</a></h1><h2 id="数字与字符串的相互转换" tabindex="-1">数字与字符串的相互转换 <a class="header-anchor" href="#数字与字符串的相互转换" aria-label="Permalink to &quot;数字与字符串的相互转换&quot;">​</a></h2><p>数字与字符串之间的相互转换可以使用显式类型转换运算符来实现。例如，对于<code>double</code>和<code>string</code>类型，转换代码如下：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)text;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (string)number;</span></span></code></pre></div><p>字符串也能转换为其他数值类型，如<code>float</code>、<code>long</code>、<code>int</code>等。</p><p>需要注意的是，转换为实数类型（<code>float</code>）时有效数字较少，在某些应用场景下这可视为优点，因为它的表示更简洁、易读。</p><p>严格来说，这种类型转换并非强制要求，因为即便没有显式的转换运算符，编译器也会隐式地进行类型转换。不过，这种情况下会收到编译器警告，所以建议始终使用显式类型转换。</p><p>MQL5 API还提供了其他一些实用函数，下面会进行介绍，并给出一个通用示例。</p><h3 id="double-stringtodouble-string-text" tabindex="-1"><code>double StringToDouble(string text)</code> <a class="header-anchor" href="#double-stringtodouble-string-text" aria-label="Permalink to &quot;\`double StringToDouble(string text)\`&quot;">​</a></h3><p><code>StringToDouble</code>函数用于将字符串转换为双精度浮点数。</p><p>它完全等同于类型转换为<code>(double)</code>。其实际用途主要是为了与旧的源代码保持向后兼容。推荐使用类型转换，因为它更简洁，且是语言语法的一部分。</p><p>在转换过程中，字符串应包含符合数值类型（包括浮点数和整数）字面量书写规则的字符序列。具体而言，字符串可以以<code>+</code>或<code>-</code>符号开头，后面接数字，并且可以继续接一系列数字。</p><p>实数可以包含一个小数点<code>.</code>来分隔小数部分，还可以有一个可选的指数部分，格式为字符<code>e</code>或<code>E</code>，后面接表示指数的数字序列（指数部分也可以以<code>+</code>或<code>-</code>开头）。</p><p>对于整数，支持十六进制表示法，即前缀<code>0x</code>后面不仅可以接十进制数字，还可以接<code>A</code>、<code>B</code>、<code>C</code>、<code>D</code>、<code>E</code>、<code>F</code>（可出现在任意位置）。</p><p>当字符串中遇到任何意外字符（如字母、标点符号、第二个小数点或中间的空格）时，转换会停止。此时，如果该位置之前有合法字符，它们会被解释为一个数字；如果没有，则结果为0。</p><p>开头的空白字符（空格、制表符、换行符）会被跳过，不影响转换。若后面跟着符合规则的数字和其他字符，就能正确得到数字。</p><p>以下表格给出了一些有效的转换示例及解释：</p><table tabindex="0"><thead><tr><th>字符串</th><th>双精度浮点数</th><th>结果</th></tr></thead><tbody><tr><td>&quot;123.45&quot;</td><td>123.45</td><td>一个小数点</td></tr><tr><td>&quot;\\t 123&quot;</td><td>123.0</td><td>开头的空白字符被忽略</td></tr><tr><td>&quot;-12345&quot;</td><td>-12345.0</td><td>带符号的数字</td></tr><tr><td>&quot;123e-5&quot;</td><td>0.00123</td><td>带指数的科学记数法</td></tr><tr><td>&quot;0x12345&quot;</td><td>74565.0</td><td>十六进制表示法</td></tr></tbody></table><p>以下表格展示了不正确的转换示例：</p><table tabindex="0"><thead><tr><th>字符串</th><th>双精度浮点数</th><th>结果</th></tr></thead><tbody><tr><td>&quot;x12345&quot;</td><td>0.0</td><td>以无法解析的字符（字母）开头</td></tr><tr><td>&quot;123x45&quot;</td><td>123.0</td><td>123 后面的字母中断了转换</td></tr><tr><td>&quot; 12 3&quot;</td><td>12.0</td><td>12 后面的空格中断了转换</td></tr><tr><td>&quot;123.4.5&quot;</td><td>123.4</td><td>123.4 后面的第二个小数点中断了转换</td></tr><tr><td>&quot;1,234.50&quot;</td><td>1.0</td><td>1 后面的逗号中断了转换</td></tr><tr><td>&quot;-+12345&quot;</td><td>0.0</td><td>符号过多（两个）</td></tr></tbody></table><h3 id="string-doubletostring-double-number-int-digits-8" tabindex="-1"><code>string DoubleToString(double number, int digits = 8)</code> <a class="header-anchor" href="#string-doubletostring-double-number-int-digits-8" aria-label="Permalink to &quot;\`string DoubleToString(double number, int digits = 8)\`&quot;">​</a></h3><p><code>DoubleToString</code>函数用于将数字转换为指定精度（小数位数从 -16 到 16）的字符串。</p><p>它的功能与将数字转换为<code>(string)</code>类似，但可以通过第二个参数选择结果字符串的数字精度。</p><p>将<code>(string)</code>运算符应用于<code>double</code>类型时，会显示 16 位有效数字（包括尾数和小数部分）。使用该函数无法完全实现与之等效的效果。</p><p>如果<code>digits</code>参数大于或等于 0，则表示小数位数。在这种情况下，小数点前的字符数由数字本身决定（数字大小），如果尾数的总字符数和<code>digits</code>指定的字符数之和超过 16，则最低有效位将包含“垃圾值”（由于实数的存储方式）。16 个字符代表<code>double</code>类型的平均最大精度，即设置<code>digits</code>为 16（最大值）仅能准确表示小于 10 的值。</p><p>如果<code>digits</code>参数小于 0，则指定有效数字的数量，并且该数字将以带指数的科学格式输出。就精度而言（而非记录格式），在函数中设置<code>digits = -16</code>生成的结果接近使用<code>(string)</code>进行转换的结果。</p><p>该函数通常用于数据集的统一格式化（包括对某个表格的某一列进行右对齐），其中的值具有相同的小数精度（例如，金融工具价格或手数的小数位数）。</p><p>需要注意的是，数学计算过程中可能会出现错误，导致结果虽然是<code>double</code>（或<code>float</code>）类型，但并非有效数字。例如，变量可能包含对负数求平方根的计算结果。</p><p>这样的值被称为“非数字”（NaN），在转换为<code>(string)</code>时会显示为简短的错误类型提示，例如<code>-nan(ind)</code>（<code>ind</code> - 未定义）、<code>nan(inf)</code>（<code>inf</code> - 无穷大）。使用<code>DoubleToString</code>函数时，会得到一个无意义的大数字。</p><p>特别重要的是，所有后续对 NaN 进行的计算也会得到 NaN。可以使用<code>MathIsValidNumber</code>函数来检查此类值。</p><h3 id="long-stringtointeger-string-text" tabindex="-1"><code>long StringToInteger(string text)</code> <a class="header-anchor" href="#long-stringtointeger-string-text" aria-label="Permalink to &quot;\`long StringToInteger(string text)\`&quot;">​</a></h3><p>该函数将字符串转换为<code>long</code>类型的数字。需要注意的是，结果类型一定是<code>long</code>，而不是<code>int</code>（尽管函数名如此），也不是<code>ulong</code>。</p><p>另一种方法是使用<code>(long)</code>运算符进行类型转换。此外，也可以使用你选择的任何其他整数类型进行转换，如<code>(int)</code>、<code>(uint)</code>、<code>(ulong)</code>等。</p><p>转换规则与<code>double</code>类型类似，但允许的字符中不包括小数点和指数部分。</p><h3 id="string-integertostring-long-number-int-length-0-ushort-filling" tabindex="-1"><code>string IntegerToString(long number, int length = 0, ushort filling = &#39; &#39;)</code> <a class="header-anchor" href="#string-integertostring-long-number-int-length-0-ushort-filling" aria-label="Permalink to &quot;\`string IntegerToString(long number, int length = 0, ushort filling = &#39; &#39;)\`&quot;">​</a></h3><p><code>IntegerToString</code>函数将<code>long</code>类型的整数转换为指定长度的字符串。如果数字表示所需的字符数少于指定长度，则在左侧用<code>filling</code>字符（默认为空格）填充。否则，数字将完整显示，不受限制。使用默认参数调用该函数等同于转换为<code>(string)</code>。</p><p>当然，较小的整数类型（例如<code>int</code>、<code>short</code>）也能被该函数正常处理。</p><p>以下是<code>ConversionNumbers.mq5</code>脚本中使用上述所有函数的示例：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123.4567890123456789&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-123e-5 buckazoid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123.4567890123456789</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exponent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.234567890123456789</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">e-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 类型转换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)text);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 123.4567890123457</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)message);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // -0.00123</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((string)number);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 123.4567890123457</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((string)exponent);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.234567890123457e-05</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)text);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 123</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)message);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // -123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 使用函数进行转换</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 123.4567890123457</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // -0.00123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 默认保留 8 位小数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoubleToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 123.45678901</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 自定义精度</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoubleToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 123.45679</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoubleToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 1.23457e+02</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoubleToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.2345678901234568e+02</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoubleToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 123.4567890123456807</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 最后 2 位不准确！</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // -nan(ind)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoubleToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 9223372129088496176.54775808</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 123</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // -123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntegerToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INT_MAX));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // &#39;2147483647&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntegerToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INT_MAX, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // &#39;2147483647&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntegerToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INT_MAX, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // &#39;      2147483647&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntegerToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INT_MAX, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;0000002147483647&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="双精度浮点数的规范化" tabindex="-1">双精度浮点数的规范化 <a class="header-anchor" href="#双精度浮点数的规范化" aria-label="Permalink to &quot;双精度浮点数的规范化&quot;">​</a></h2><p>MQL5 API提供了一个用于将浮点数四舍五入到指定精度（小数部分的有效数字位数）的函数。</p><h3 id="double-normalizedouble-double-number-int-digits" tabindex="-1"><code>double NormalizeDouble(double number, int digits)</code> <a class="header-anchor" href="#double-normalizedouble-double-number-int-digits" aria-label="Permalink to &quot;\`double NormalizeDouble(double number, int digits)\`&quot;">​</a></h3><p>在交易算法中，为了设定订单的交易量和价格，需要进行四舍五入操作。四舍五入是按照标准规则执行的：如果下一位（被舍弃的）数字大于或等于5，则将最后一位可见数字加1。</p><p>参数<code>digits</code>的有效取值范围是：0到8。</p><p>在<code>ConversionNormal.mq5</code>文件中可以找到使用该函数的示例。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      // 3.141592653589793</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NormalizeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 3.14159265359</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NormalizeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 3.14159265</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NormalizeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 3.14159</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NormalizeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 3.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NormalizeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 3.14159265359</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>由于任何实数在内部表示时精度都是有限的，所以即使进行了规范化处理，数字也可能会近似显示：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512.06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 512.0599999999999</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NormalizeDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512.06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 512.0599999999999</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoubleToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512.06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 512.06000000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">512.06</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 512.06</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这种情况是正常且不可避免的。为了进行更紧凑的格式化，可以使用<code>DoubleToString</code>、<code>StringFormat</code>函数，或者进行中间类型转换为<code>(float)</code>。</p><p>若要将一个数字向上或向下舍入为最接近的整数，可以使用<code>MathRound</code>、<code>MathCeil</code>、<code>MathFloor</code>函数（参见“舍入函数”部分）。</p><h2 id="日期和时间" tabindex="-1">日期和时间 <a class="header-anchor" href="#日期和时间" aria-label="Permalink to &quot;日期和时间&quot;">​</a></h2><p>用于存储日期和/或时间的 <code>datetime</code> 类型的值通常会经历几种类型的转换：</p><ol><li>转换为字符串，然后再转换回来，以便向用户显示数据以及从外部源读取数据。</li><li>转换为特殊结构 <code>MqlDateTime</code>（见下文），以便处理单个日期和时间组件。</li><li>转换为自 1970 年 1 月 1 日以来经过的秒数，这对应于 <code>datetime</code> 的内部表示，并且等同于 <code>long</code> 类型的整数。</li></ol><p>对于最后一项，使用 <code>datetime</code> 转换为 <code>long</code> 类型（<code>datetime</code> to <code>long</code>），或者反过来，<code>long</code> 转换为 <code>datetime</code>（<code>long</code> To <code>datetime</code>），但请注意，支持的日期范围是从 1970 年 1 月 1 日（值为 0）到 3000 年 12 月 31 日（32535215999 秒）。</p><p>对于前两种选择，MQL5 API 提供了以下函数。</p><p>###string TimeToString(datetime value, int mode = TIME_DATE | TIME_MINUTES) 函数 <code>TimeToString</code> 根据 <code>mode</code> 参数将 <code>datetime</code> 类型的值转换为包含日期和时间组件的字符串，在 <code>mode</code> 参数中，你可以设置标志的任意组合：</p><ul><li><code>TIME_DATE</code> — 日期格式为 “YYYY.MM.DD”。</li><li><code>TIME_MINUTES</code> — 时间格式为 “hh:mm”，即包含小时和分钟。</li><li><code>TIME_SECONDS</code> — 时间格式为 “hh:mm:ss”，即包含小时、分钟和秒。</li></ul><p>要完整输出日期和时间数据，可以将 <code>mode</code> 设置为 <code>TIME_DATE | TIME_SECONDS</code>（<code>TIME_DATE | TIME_MINUTES | TIME_SECONDS</code> 选项也可以工作，但有些多余）。这等同于将 <code>datetime</code> 类型的值转换为 <code>string</code> 类型（<code>(string)</code> 类型转换）。</p><p>使用示例在 <code>ConversionTime.mq5</code> 文件中提供。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(#A, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (A))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021.01.21 23:00:15&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((string)time);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time, TIME_DATE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TIME_MINUTES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TIME_SECONDS));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time, TIME_MINUTES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TIME_SECONDS));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time, TIME_DATE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TIME_SECONDS));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time, TIME_DATE));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time, TIME_MINUTES));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time, TIME_SECONDS));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>该脚本将打印以下日志：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>(string)time=2021.01.21 23:00:15</span></span>
<span class="line"><span>TimeToString(time)=2021.01.21 23:00</span></span>
<span class="line"><span>TimeToString(time,TIME_DATE|TIME_MINUTES|TIME_SECONDS)=2021.01.21 23:00:15</span></span>
<span class="line"><span>TimeToString(time,TIME_MINUTES|TIME_SECONDS)=23:00:15</span></span>
<span class="line"><span>TimeToString(time,TIME_DATE|TIME_SECONDS)=2021.01.21 23:00:15</span></span>
<span class="line"><span>TimeToString(time,TIME_DATE)=2021.01.21</span></span>
<span class="line"><span>TimeToString(time,TIME_MINUTES)=23:00</span></span>
<span class="line"><span>TimeToString(time,TIME_SECONDS)=23:00:15</span></span></code></pre></div><p>###datetime StringToTime(string value) 函数 <code>StringToTime</code> 将包含日期和/或时间的字符串转换为 <code>datetime</code> 类型的值。该字符串可以只包含日期，只包含时间，或者同时包含日期和时间。</p><p>对于日期，识别以下格式：</p><ul><li>“YYYY.MM.DD”</li><li>“YYYYMMDD”</li><li>“YYYY/MM/DD”</li><li>“YYYY-MM-DD”</li><li>“DD.MM.YYYY”</li><li>“DD/MM/YYYY”</li><li>“DD-MM-YYYY”</li></ul><p>对于时间，支持以下格式：</p><ul><li>“hh:mm”</li><li>“hh:mm:ss”</li><li>“hhmmss”</li></ul><p>日期和时间之间必须至少有一个空格。</p><p>如果字符串中只存在时间，则结果中将替换为当前日期。如果字符串中只存在日期，则时间将设置为 00:00:00。</p><p>如果字符串中支持的语法被破坏，则结果为当前日期。</p><p>函数使用示例在脚本 <code>ConversionTime.mq5</code> 中给出。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string timeonly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;21:01&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 仅时间</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeonly);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((datetime)timeonly);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeonly));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2000-10-10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 仅日期</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((datetime)date);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(datetime)date);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> seconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((datetime)seconds);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 从 1970 年开始的 1 分钟</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string ddmmyy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;15/01/2012 01:02:03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 日期和时间，并且日期是</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ddmmyy));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 以“正向”顺序，仍然可以</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string wrong </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;January 2-nd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wrong));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在日志中，我们将看到类似以下内容（####.##.## 是脚本启动的当前日期）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>timeonly=21:01</span></span>
<span class="line"><span>(datetime)timeonly=####.##.## 21:01:00</span></span>
<span class="line"><span>StringToTime(timeonly)=####.##.## 21:01:00</span></span>
<span class="line"><span>(datetime)date=2000.10.10 00:00:00</span></span>
<span class="line"><span>StringToTime(date)=2000.10.10 00:00:00</span></span>
<span class="line"><span>(long)(datetime)date=971136000</span></span>
<span class="line"><span>(datetime)seconds=1970.01.01 00:01:00</span></span>
<span class="line"><span>StringToTime(ddmmyy)=2012.01.15 01:02:03</span></span>
<span class="line"><span>(datetime)wrong=####.##.## 00:00:00</span></span></code></pre></div><p>除了 <code>StringToTime</code> 之外，你还可以使用类型转换运算符 <code>(datetime)</code> 将字符串转换为日期和时间。然而，该函数的优点是，当检测到源字符串不正确时，该函数会设置一个带有错误代码的内部变量 <code>_LastError</code>（也可以通过函数 <code>GetLastError</code> 访问）。根据字符串的哪一部分包含无法解释的数据，错误代码可能是 <code>ERR_WRONG_STRING_DATE</code>（5031）、<code>ERR_WRONG_STRING_TIME</code>（5032）或与从字符串获取日期和时间相关的列表中的其他选项。</p><p>###bool TimeToStruct(datetime value, MqlDateTime &amp;struct) 为了分别解析日期和时间组件，MQL5 API 提供了 <code>TimeToStruct</code> 函数，该函数将 <code>datetime</code> 类型的值转换为 <code>MqlDateTime</code> 结构：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlDateTime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> year;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 年份</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mon;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 月份</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> day;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 日期</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hour;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 小时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> min;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 分钟</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> day_of_week;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 星期几</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> day_of_year;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 一年中的第几天（1 月 1 日为 0）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>星期几按照美国的方式编号：0 表示星期日，1 表示星期一，依此类推，6 表示星期六。可以使用内置的 <code>ENUM_DAY_OF_WEEK</code> 枚举来识别它们。</p><p>如果成功，该函数返回 <code>true</code>，如果出错（特别是传递了不正确的日期），则返回 <code>false</code>。</p><p>让我们使用 <code>ConversionTimeStruct.mq5</code> 脚本来检查该函数的性能。为此，我们创建一个 <code>datetime</code> 类型的时间数组，并包含测试值。我们将在循环中为每个值调用 <code>TimeToStruct</code>。</p><p>结果将添加到 <code>MqlDateTime</code> 结构数组 <code>mdt[]</code> 中。我们首先将其初始化为零，但由于内置函数 <code>ArrayInitialize</code> 不知道如何处理结构，我们将不得不为其编写一个重载函数（将来我们将学习一种更简单的方法来用零填充数组：在“对象和数组清零”部分将介绍函数 <code>ZeroMemory</code>）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayInitialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MqlDateTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mdt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MqlDateTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mdt);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">      mdt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> init;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>处理过程完成后，我们将使用内置函数 <code>ArrayPrint</code> 将结构数组输出到日志中。这是提供良好数据格式的最简单方法（即使只有一个结构也可以使用：只需将其放入大小为 1 的数组中）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 用测试值填充数组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021.01.28 23:00:15&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 有效的 datetime 值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3000.12.31 23:59:59&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 最大支持的日期和时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      LONG_MAX</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 无效日期：将导致错误 ERR_INVALID_DATETIME (4010)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 在编译时计算数组的大小</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(time) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(datetime);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlDateTime null </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 用零初始化的示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlDateTime mdt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 为结果结构数组分配内存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mdt, n);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 调用我们重载的 ArrayInitialize 函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayInitialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mdt, null);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 运行测试</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i]);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 显示初始数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mdt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i]))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如果发生错误，输出错误代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, _LastError);</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">         mdt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i].year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _LastError;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 将结果输出到日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mdt);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>结果，我们在日志中得到以下字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>time[i]=2021.01.28 23:00:15</span></span>
<span class="line"><span>time[i]=3000.12.31 23:59:59</span></span>
<span class="line"><span>time[i]=wrong datetime</span></span>
<span class="line"><span>wrong datetime -&gt; 4010</span></span>
<span class="line"><span>    [year] [mon] [day] [hour] [min] [sec] [day_of_week] [day_of_year]</span></span>
<span class="line"><span>[0]   2021     1    28     23     0    15             4            27</span></span>
<span class="line"><span>[1]   3000    12    31     23    59    59             3           364</span></span>
<span class="line"><span>[2]   4010     0     0      0     0     0             0             0</span></span></code></pre></div><p>你可以确保所有字段都已接收到适当的值。对于不正确的初始日期，我们在 <code>year</code> 字段中存储错误代码（在这种情况下，只有一个这样的错误：4010，<code>ERR_INVALID_DATETIME</code>）。</p><p>回想一下，对于 MQL5 中的最大日期值，引入了 <code>DATETIME_MAX</code> 常量，其整数值等于 0x793406fff，对应于 3000 年 12 月 31 日 23:59:59。</p><p>使用 <code>TimeToStruct</code> 函数最常解决的问题是获取特定日期/时间组件的值。因此，准备一个带有现成实现选项的辅助头文件（<code>MQL5Book/DateTime.mqh</code>）是有意义的。该文件包含 <code>datetime</code> 类。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class DateTime</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">private:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlDateTime mdtstruct;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   datetime origin;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   DateTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      TimeToStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mdtstruct);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         TimeToStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dt, mdtstruct);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime dt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _DateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dt);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_DateTime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ENUM_DAY_OF_WEEK </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeDayOfWeek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ENUM_DAY_OF_WEEK)mdtstruct.day_of_week;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timeDayOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mdtstruct.day_of_year;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timeYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mdtstruct.year;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timeMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mdtstruct.mon;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timeDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mdtstruct.day;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timeHour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mdtstruct.hour;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timeMinute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mdtstruct.min;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> timeSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mdtstruct.sec;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime _DateTime;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime DateTime::_DateTime;</span></span></code></pre></div><p>该类附带几个宏，使调用其方法更加容易。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeDayOfWeek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeDayOfWeek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeDayOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeDayOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeHour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeHour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeMinute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeMinute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateTime::assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeDayOfWeek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeDayOfWeek</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeDayOfYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeDayOfYear</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeYear</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeMonth</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeDay</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeHour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeHour</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeMinute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeMinute</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _TimeSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DateTime::_DateTime.timeSeconds</span></span></code></pre></div><p>该类具有 <code>MqlDateTime</code> 结构类型的 <code>mdtstruct</code> 字段。此字段用于所有内部转换。结构字段通过获取器方法读取：为每个字段分配了相应的方法。</p><p>在类内部定义了一个静态实例：<code>_DateTime</code>（一个对象就足够了，因为所有 MQL 程序都是单线程的）。构造函数是私有的，因此尝试创建其他 <code>datetime</code> 对象将失败。</p><p>使用宏，我们可以方便地从 <code>datetime</code> 中获取单独的组件，例如年份（<code>TimeYear(T)</code>）、月份（<code>TimeMonth(T)</code>）、日期（<code>TimeDay(T)</code>）或星期几（<code>TimeDayOfWeek(T)</code>）。</p><p>如果需要从一个 <code>datetime</code> 值中获取多个字段，那么除了第一个调用之外，最好在所有调用中使用类似的宏，这些宏不带参数并且以下划线符号开头：它们从结构中读取所需的字段，而无需重新设置日期/时间并调用 <code>TimeToStruct</code> 函数。例如：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 MQL5Book/DateTime.mqh 中的 DateTime 类：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 首先获取指定 datetime 值的星期几</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeDayOfWeek</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 然后为相同的值读取年份、月份和日期</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_TimeYear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_TimeMonth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_TimeDay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>以下字符串应该出现在日志中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>EnumToString(DateTime::_DateTime.assign(time[0]).__TimeDayOfWeek())=THURSDAY</span></span>
<span class="line"><span>DateTime::_DateTime.__TimeYear()=2021</span></span>
<span class="line"><span>DateTime::_DateTime.__TimeMonth()=1</span></span>
<span class="line"><span>DateTime::_DateTime.__TimeDay()=28</span></span></code></pre></div><p>内置函数 <code>EnumToString</code> 将任何枚举的元素转换为字符串。它将在单独的部分中进行描述。</p><p>###datetime StructToTime(MqlDateTime &amp;struct) <code>StructToTime</code> 函数执行从包含日期和时间组件的 <code>MqlDateTime</code> 结构（见上面 <code>TimeToStruct</code> 函数的描述）到 <code>datetime</code> 类型值的转换。<code>day_of_week</code> 和 <code>day_of_year</code> 字段不使用。</p><p>如果其余字段的状态无效（对应于不存在或不支持的日期），则该函数可能返回已修正的值，或者返回 <code>WRONG_VALUE</code>（在 <code>long</code> 类型表示中为 -1），具体取决于问题。因此，你应该根据全局变量 <code>_LastError</code> 的状态检查是否有错误。成功的转换将以代码 0 结束。在转换之前，你应该使用 <code>ResetLastError</code> 函数重置 <code>_LastError</code> 中可能存在的失败状态（作为某些先前指令执行的遗留状态）。</p><p><code>StructToTime</code> 函数的测试也在脚本 <code>ConversionTimeStruct.mq5</code> 中提供。在循环中，结构数组 <code>parts</code> 将转换为 <code>datetime</code>。</p><h2 id="结构体" tabindex="-1">结构体 <a class="header-anchor" href="#结构体" aria-label="Permalink to &quot;结构体&quot;">​</a></h2><p>在将MQL程序与外部系统集成时，特别是通过互联网发送或接收数据时，就需要把数据结构转换为字节数组。为此，MQL5 API提供了两个函数：<code>StructToCharArray</code>和<code>CharArrayToStruct</code>。</p><p>这两个函数所处理的结构体，假定仅包含简单的内置类型，也就是除字符串和动态数组之外的所有内置类型。结构体还可以包含其他简单结构体，但不允许包含类对象和指针。这类结构体也被称作POD（Plain Old Data）。</p><h3 id="bool-structtochararray-const-void-object-uchar-array-uint-pos-0" tabindex="-1"><code>bool StructToCharArray(const void &amp;object, uchar &amp;array[], uint pos = 0)</code> <a class="header-anchor" href="#bool-structtochararray-const-void-object-uchar-array-uint-pos-0" aria-label="Permalink to &quot;\`bool StructToCharArray(const void &amp;object, uchar &amp;array[], uint pos = 0)\`&quot;">​</a></h3><p><code>StructToCharArray</code>函数会把POD结构体对象复制到<code>uchar</code>类型的数组<code>array</code>中。你可以通过<code>pos</code>参数指定数组中开始放置字节的位置。默认情况下，复制从数组开头开始，若当前数组大小不足以容纳整个结构体，动态数组会自动扩容。</p><p>该函数返回操作成功的标志（<code>true</code>）或错误标志（<code>false</code>）。</p><p>我们用<code>ConversionStruct.mq5</code>脚本来测试其性能。创建一个新的结构体类型<code>DateTimeMsc</code>，它包含标准结构体<code>MqlDateTime</code>（<code>mdt</code>字段）和一个额外的<code>int</code>类型字段<code>msc</code>，用于存储毫秒数。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTimeMsc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MqlDateTime mdt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msc;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   DateTimeMsc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlDateTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">msc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      mdt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> init;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>在<code>OnStart</code>函数里，将一个测试的<code>datetime</code>值转换为我们定义的结构体，再转换为字节数组。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MqlDateTime</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimeToStructInplace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">datetime</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> dt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlDateTime m;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dt, m))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 可以显示错误代码 _LastError</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 但这里我们直接返回零时间</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MqlDateTime z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MDT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeToStructInplace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   DateTimeMsc </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MDT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(D&#39;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">2021.01.01</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">15&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   uchar a[];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StructToCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test, a));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在日志中会得到如下结果（为强调字节与每个字段的对应关系，对数组进行了额外换行处理）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>true</span></span>
<span class="line"><span>36</span></span>
<span class="line"><span>229   7   0   0</span></span>
<span class="line"><span>  1   0   0   0</span></span>
<span class="line"><span>  1   0   0   0</span></span>
<span class="line"><span> 10   0   0   0</span></span>
<span class="line"><span> 10   0   0   0</span></span>
<span class="line"><span> 15   0   0   0</span></span>
<span class="line"><span>  5   0   0   0</span></span>
<span class="line"><span>  0   0   0   0</span></span>
<span class="line"><span>123   0   0   0</span></span></code></pre></div><h3 id="bool-chararraytostruct-void-object-const-uchar-array-uint-pos-0" tabindex="-1"><code>bool CharArrayToStruct(void &amp;object, const uchar &amp;array[], uint pos = 0)</code> <a class="header-anchor" href="#bool-chararraytostruct-void-object-const-uchar-array-uint-pos-0" aria-label="Permalink to &quot;\`bool CharArrayToStruct(void &amp;object, const uchar &amp;array[], uint pos = 0)\`&quot;">​</a></h3><p><code>CharArrayToStruct</code>函数会把<code>uchar</code>类型的数组<code>array</code>复制到POD结构体对象中。通过<code>pos</code>参数，可以指定从数组的哪个位置开始读取字节。</p><p>该函数返回操作成功的标志（<code>true</code>）或错误标志（<code>false</code>）。</p><p>继续上面的例子（<code>ConversionStruct.mq5</code>），我们可以从字节数组中恢复原始的日期和时间。</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   DateTimeMsc receiver;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CharArrayToStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(receiver, a));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StructToTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(receiver.mdt), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, receiver.msc);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2021.01.01 10:10:15&#39;123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些函数为MQL程序与外部系统的数据交互提供了便利，通过将结构体与字节数组相互转换，实现了数据在不同系统间的有效传输和处理。</p><h3 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h3><p>在 MQL5 API 中，可以使用 <code>EnumToString</code> 函数将枚举值转换为字符串，不过没有现成的反向转换函数。</p><h2 id="string-enumtostring-enum-value" tabindex="-1">string EnumToString(enum value) <a class="header-anchor" href="#string-enumtostring-enum-value" aria-label="Permalink to &quot;string EnumToString(enum value)&quot;">​</a></h2><p>该函数能把任意类型枚举的 <code>value</code>（也就是所传入元素的 ID）转换为字符串。</p><p>下面我们用它来解决一个常见问题：确定枚举的大小（即包含多少个元素），以及明确所有元素对应的具体值。为此，在头文件 <code>EnumToArray.mqh</code> 里，我们实现了一个特殊的模板函数（借助模板类型 <code>E</code>，它适用于任何枚举）：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typename E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnumToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">dummy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INT_MIN, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INT_MAX)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;::&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsStopped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      E e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (E)i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e), t) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         ArrayResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">         values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其工作原理基于以下内容：在 MQL5 中，枚举以 <code>int</code> 类型的整数形式存储，支持将任意枚举隐式转换为 <code>(int)</code> 类型，也允许将 <code>int</code> 类型显式转换回任意枚举类型。若该值与枚举中的某个元素对应，<code>EnumToString</code> 函数会返回包含该元素 ID 的字符串；反之，函数会返回形如 <code>ENUM_TYPE::value</code> 的字符串。</p><p>因此，通过在可接受的范围内遍历整数，并将它们显式转换为枚举类型，接着分析 <code>EnumToString</code> 的输出字符串中是否存在 <code>::</code>，就能判断给定的整数是否为枚举成员。</p><p>这里用到的 <code>StringFind</code> 函数会在下一章节和其他字符串函数一起介绍。</p><p>我们创建 <code>ConversionEnum.mq5</code> 脚本来测试这个思路。在脚本中，我们实现了辅助函数 <code>process</code>，它会调用 <code>EnumToArray</code> 模板，报告枚举中的元素数量，并打印出包含枚举元素及其对应值的结果数组。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typename E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnumToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, result, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, USHORT_MAX);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; Count=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((E)</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i]), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了便于研究，我们使用内置的 <code>ENUM_APPLIED_PRICE</code> 价格类型枚举。在 <code>OnStart</code> 函数内部，首先验证 <code>EnumToString</code> 是否能按上述描述生成字符串。对于元素 <code>PRICE_CLOSE</code>，该函数会返回字符串 <code>&quot;PRICE_CLOSE&quot;</code>；对于明显超出范围的值 <code>(ENUM_APPLIED_PRICE)10</code>，则会返回 <code>&quot;ENUM_APPLIED_PRICE::10&quot;</code>。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PRICE_CLOSE));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // PRICE_CLOSE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ENUM_APPLIED_PRICE)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ENUM_APPLIED_PRICE::10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ENUM_APPLIED_PRICE)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>接着，我们对转换为 <code>ENUM_APPLIED_PRICE</code> 类型的任意值（或该类型的变量）调用 <code>process</code> 函数，得到如下结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>ENUM_APPLIED_PRICE Count=7</span></span>
<span class="line"><span>0 PRICE_CLOSE=1</span></span>
<span class="line"><span>1 PRICE_OPEN=2</span></span>
<span class="line"><span>2 PRICE_HIGH=3</span></span>
<span class="line"><span>3 PRICE_LOW=4</span></span>
<span class="line"><span>4 PRICE_MEDIAN=5</span></span>
<span class="line"><span>5 PRICE_TYPICAL=6</span></span>
<span class="line"><span>6 PRICE_WEIGHTED=7</span></span></code></pre></div><p>由此可知，该枚举中定义了 7 个元素，并且编号并非像通常那样从 0 开始，而是从 1（<code>PRICE_CLOSE</code>）开始。了解元素对应的具体值，在某些情况下有助于优化算法的编写。</p><h2 id="复数类型" tabindex="-1">复数类型 <a class="header-anchor" href="#复数类型" aria-label="Permalink to &quot;复数类型&quot;">​</a></h2><p>内置类型 <code>complex</code> 是一个包含两个 <code>double</code> 类型字段的结构体：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> complex </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      real;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 实部 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      imag;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 虚部 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>之所以在类型转换部分介绍这个结构体，是因为它能把两个 <code>double</code> 类型的数“转换”成一个新的实体，这有点类似于将结构体转换为字节数组，反之亦然。而且，如果不先介绍结构体，就很难引入这个类型。</p><p><code>complex</code> 结构体没有构造函数，因此必须使用初始化列表来创建复数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">complex c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {re, im};</span></span></code></pre></div><p>目前，对于复数仅支持简单的算术和比较运算，包括 <code>=</code>, <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>==</code>, <code>!=</code>。后续会添加对数学函数的支持。</p><p><strong>注意！</strong> 不能将复数变量声明为 MQL 程序的输入参数（即不能使用 <code>input</code> 关键字）。</p><p>使用后缀 <code>i</code> 来表示复数（虚部）常量，例如：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> complex x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 2i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> complex y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> 0.5i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在下面的示例（脚本 <code>Complex.mq5</code>）中，创建了一个复数并对其进行平方运算。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">complex c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {r, i};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">complex </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mirror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> complex </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   complex result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {z.imag, z.real};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 交换实部和虚部</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">complex </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> complex </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">square</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mirror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在使用默认参数的情况下，该脚本将输出以下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>c=(1,2) / ok</span></span>
<span class="line"><span>square(c)=(-3,4) / ok</span></span>
<span class="line"><span>square(mirror(c))=(3,4) / ok</span></span></code></pre></div><p>这里，括号内的数字对是复数的字符串表示形式。</p><p><code>complex</code> 类型可以按值作为 MQL 函数的参数传递（这与普通结构体不同，普通结构体只能通过引用传递）。对于从 DLL 导入的函数，<code>complex</code> 类型只能通过引用传递。</p>`,153)]))}const c=i(t,[["render",p]]);export{g as __pageData,c as default};
