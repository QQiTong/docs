import{_ as o,c as i,ag as r,o as t}from"./chunks/framework.CCnnzLsu.js";const s=JSON.parse('{"title":"标识符","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/mql5_programming_fundamentals/identifiers"}],["meta",{"property":"og:title","content":"标识符"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/mql5_programming_fundamentals/identifiers.md","filePath":"mq5_programming_for_traders/mql5_programming_fundamentals/identifiers.md","lastUpdated":1744387121000}'),a={name:"mq5_programming_for_traders/mql5_programming_fundamentals/identifiers.md"};function l(d,e,c,p,_,n){return t(),i("div",null,e[0]||(e[0]=[r('<h1 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h1><p>我们很快就会看到，程序是由多个元素构成的，为了避免混淆，这些元素必须用唯一的名称来指代。这些名称就是所谓的标识符。</p><p>标识符是按照特定规则组成的一个词：在标识符中只能使用拉丁字母、下划线字符（“_”）和数字，并且第一个字符不能是数字。字母可以是小写（小写字母）和大写（大写字母）。</p><p>标识符的最大长度是 63 个字符。标识符不能与 MQL5 的任何保留字（如类型名称）相同。你可以在帮助文档中找到保留字的完整列表。违反标识符的任何构成规则都会导致编译错误。</p><p>以下是一些正确的标识符示例：</p><ul><li><code>i</code> ：单个字符</li><li><code>abc</code> ：小写字母</li><li><code>ABC</code> ：大写字母</li><li><code>Abc</code> ：大小写混合字母</li><li><code>_abc</code> ：以下划线开头</li><li><code>_a_b_c_</code> ：下划线可出现在任意位置</li><li><code>step1</code> ：包含数字</li><li><code>_1step</code> ：下划线和数字</li></ul><p>我们已经在 <code>HelloChart</code> 脚本中看到了标识符是如何用作变量和函数的名称的。</p><p>建议为标识符提供有意义的名称，这样相关元素的用途或内容就能一目了然。在某些情况下，也会使用单字符标识符，我们将在处理循环的部分讨论这一点。</p><p>在组成标识符方面有一些常见的做法。例如，如果我们要为存储盈利因子值的变量选择一个名称，以下这些选项都不错：</p><ul><li><code>ProfitFactor</code> ：“驼峰式”风格，所有单词的首字母都大写。</li><li><code>profitFactor</code> ：“驼峰式”风格，除了第一个单词外，其他单词的首字母都大写。</li><li><code>profit_factor</code> ：“蛇形”风格，所有单词之间都用下划线分隔。</li></ul><p>在许多编程语言中，会使用不同的风格来为不同的实体命名。例如，可能会遵循这样一种惯例，变量名仅以小写字母开头，而类名（见第 3 部分）以大写字母开头。当程序员在团队中工作，或者在长时间中断后重新查看自己的代码片段时，这种做法有助于他们分析源代码。</p><p>除了上述风格之外，还有其他一些风格，其中一些用于特殊情况：</p><ul><li><code>profitfactor</code> ：“平滑式”风格，所有字母都是小写。</li><li><code>PROFITFACTOR</code> ：“平滑式”风格，所有字母都是大写。</li><li><code>PROFIT_FACTOR</code> ：“宏式”风格，所有字母都是大写，单词之间用下划线分隔。</li></ul><p>有时在常量的名称中会全部使用大写字母。</p><p>“宏式”风格通常用于预处理器宏描述的名称中。</p>',15)]))}const f=o(a,[["render",l]]);export{s as __pageData,f as default};
