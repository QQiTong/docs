import{_ as a,a as s}from"./chunks/dll_import.DDDMW7bF.js";import{_ as t}from"./chunks/python_compile.xHRWuN59.js";import{_ as e,c as l,aI as h,o as r}from"./chunks/framework.b7dag8kZ.js";const C=JSON.parse('{"title":"与其它集成开发环境整合","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/metaeditor/welcome/integration_ide"}],["meta",{"property":"og:title","content":"与其它集成开发环境整合"}]]},"headers":[],"relativePath":"metaeditor/welcome/integration_ide.md","filePath":"metaeditor/welcome/integration_ide.md","lastUpdated":1744293048000}'),p={name:"metaeditor/welcome/integration_ide.md"};function o(n,i,d,k,g,c){return r(),l("div",null,i[0]||(i[0]=[h('<h1 id="与其它集成开发环境整合" tabindex="-1">与其它集成开发环境整合 <a class="header-anchor" href="#与其它集成开发环境整合" aria-label="Permalink to &quot;与其它集成开发环境整合&quot;">​</a></h1><p>MetaEditor 不仅能令您以 MQL4 和 MQL5 编写代码。 您还可以编辑和编译C++和Python源代码。 此外，您还可以将 MetaEditor 作为 <a href="#compiler">其它开发环境的外部编译器</a>。</p><h2 id="编辑-с-代码并编译-dll" tabindex="-1">编辑 С++ 代码并编译 DLL <a class="header-anchor" href="#编辑-с-代码并编译-dll" aria-label="Permalink to &quot;编辑 С++ 代码并编译 DLL&quot;">​</a></h2><p>当以 MQL4/MQL5 开发交易程序时，您可以轻松地使用第三方 C++ DLL。 您可以编辑 С++ 源代码文件 (CPP 和 H) ，如同 MQ4, MQ5 和 MQH 一样。 DLL 中的这些文件也可以直接从编辑器编译。 安装在用户 PC 上的 Microsoft Visual Studio 可用于此目的。 若要进行编译，请打开 C++ 文件并按 F7 (编译命令)。</p><p><img src="'+a+'" alt="操控 C++ 的 DLL"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>安装在用户 PC 上的 MS Visual Studio 编译器用于编译 C++ 源代码。 支持 MS Visual Studio 2008 及更高版本 (包括 Express 和 Community 版本)。</li><li>MS Visual Studio 版本 (32 或 64 位) 应该与 MetaEditor 版本匹配。</li></ul></div><p>MetaEditor 还提供了将导出的 DLL 函数轻松添加到 MQL4/MQL5 文件的能力。 简单地将一个 DLL 文件从 <a href="/metaeditor/workspace/navigator">导航器</a> 窗口里拖拽到打开的 MQ4, MQ5 或 MQH 文件里。</p><p><img src="'+s+'" alt="从 DLL 导入函数"></p><h2 id="使用python脚本" tabindex="-1">使用Python脚本 <a class="header-anchor" href="#使用python脚本" aria-label="Permalink to &quot;使用Python脚本&quot;">​</a></h2><p>Python语言包含多种机器学习、自动化处理以及数据分析和可视化库。现在，可以通过<a href="https://www.mql5.com/zh/docs/python_metatrader5" target="_blank" rel="noreferrer">Python集成模块</a>在平台中应用高级语言。</p><ul><li>可以从交易平台轻松快速地获取交易数据，然后使用Python工具进行分析：可以通过一个命令请求成千上万的交易品种</li><li>获取账户交易状态和交易历史以计算统计数据</li><li>按照您自己的算法执行交易操作</li></ul><p>Python脚本<a href="https://www.metatrader5.com/zh/terminal/help/algotrading/trade_robots_indicators#python" target="_blank" rel="noreferrer">直接在平台图表上运行</a>，类似于常规的MQL5程序。</p><p>MetaEditor提供用于<a href="/metaeditor/development/python">Python</a>开发的特殊集成功能：创建空白脚本的向导、直接从编辑器运行的能力、将消息和错误输出到公共日志的功能等。</p><p><img src="'+t+`" alt="在编辑器中运行脚本"></p><h2 id="compiler" tabindex="-1">在其它开发环境中编译 MQL 程序 <a class="header-anchor" href="#compiler" aria-label="Permalink to &quot;在其它开发环境中编译 MQL 程序{#compiler}&quot;">​</a></h2><p>在使用外部编辑器中的源代码时，MetaEditor 执行文件可以用作编译器。 编译器从命令行启动，指定要编译的文件的路径和名称:</p><ul><li>metaeditor.exe /compile:&quot;&lt;源文件的完整路径&gt;&quot;</li><li>metaeditor64.exe /compile:&quot;&lt;源文件的完整路径&gt;&quot;</li></ul><p>例如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;C:\\Program Files\\TradingPlatform\\metaeditor64.exe&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /compile:&quot;C:\\Program Files\\TradingPlatform\\MQL5\\Scripts\\myscript.mq5&quot;</span></span></code></pre></div><p>批量编译目录中的文件</p><p>对于批量编译，请将路径设置为文件夹而非文件。 指定文件夹中的所有源代码文件都将被编译。 子文件夹不包括在内。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果源文件已有相应的编译版本，则不会执行重编译。</p></div><p>以下示例显示 \\MQL5\\Scripts 文件夹的批量编译</p><p>例如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;C:\\Program Files\\TradingPlatform\\metaeditor64.exe&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /compile:&quot;C:\\Program Files\\TradingPlatform\\MQL5\\Scripts&quot;</span></span></code></pre></div><h2 id="自定义-mql5-mql4-头文件文件夹" tabindex="-1">自定义 MQL5/MQL4 头文件文件夹 <a class="header-anchor" href="#自定义-mql5-mql4-头文件文件夹" aria-label="Permalink to &quot;自定义 MQL5/MQL4 头文件文件夹&quot;">​</a></h2><p>程序可以使用头文件 (<em>.mqh) 和资源文件 (</em>.bmp, *.wav, *.ex4, *.ex5), 它们位于当前平台的工作目录之外 (例如, 同一台电脑上其它副本的 \\MQL5 文件夹)。 使用&quot;/include&quot; 关键字指定该文件夹的路径以便进行正确编辑。 在编译过程中，文件将按如下方式搜索:</p><ul><li>头文件: [指定目录]\\include\\[path from #include&lt;...&gt;]</li><li>资源文件: [指定目录]\\[path from #resource &quot;...&quot;]</li></ul><p>例如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;C:\\Program Files\\TradingPlatform\\metaeditor64.exe&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /compile:&quot;C:\\Program Files\\TradingPlatform\\MQL5\\Scripts&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /include:&quot;C:\\Program Files\\TradingPlatform 2\\MQL5&quot;</span></span></code></pre></div><h2 id="编译日志" tabindex="-1">编译日志 <a class="header-anchor" href="#编译日志" aria-label="Permalink to &quot;编译日志&quot;">​</a></h2><p>指定额外的 /log 关键字以便获取有关编译过程的更多信息。 在这种情况下，在包含源文件的文件夹中创建 &lt;源文件名&gt;.log 编译日志文件。</p><p>例如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;C:\\Program Files\\TradingPlatform\\metaeditor64.exe&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /compile:&quot;C:\\Program Files\\TradingPlatform\\MQL5\\Scripts\\myscript.mq5&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">日志文件:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rogram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Files</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">radingPlatform</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">QL5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cript</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yscript.log</span></span></code></pre></div><h2 id="语法检查" tabindex="-1">语法检查 <a class="header-anchor" href="#语法检查" aria-label="Permalink to &quot;语法检查&quot;">​</a></h2><p>若要不经编译检查程序语法，请使用 /s 和 /log 关键字从命令行启动 MetaEditor (以便检查结果显示在日志文件中)。</p><p>例如</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;C:\\Program Files\\TradingPlatform\\metaeditor64.exe&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /compile:&quot;C:\\Program Files\\TradingPlatform\\MQL5\\Scripts\\myscript.mq5&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">带有检查结果的文件:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rogram</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Files</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\T</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">radingPlatform</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">QL5</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cript</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yscript.log</span></span></code></pre></div>`,38)]))}const y=e(p,[["render",o]]);export{C as __pageData,y as default};
