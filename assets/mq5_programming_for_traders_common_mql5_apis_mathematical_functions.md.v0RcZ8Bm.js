import{_ as n,c as l,aI as i,j as s,a as h,o as t}from"./chunks/framework.b7dag8kZ.js";const c=JSON.parse('{"title":"数学函数","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/common_mql5_apis/mathematical_functions"}],["meta",{"property":"og:title","content":"数学函数"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/common_mql5_apis/mathematical_functions.md","filePath":"mq5_programming_for_traders/common_mql5_apis/mathematical_functions.md","lastUpdated":1744387121000}'),k={name:"mq5_programming_for_traders/common_mql5_apis/mathematical_functions.md"};function p(e,a,d,E,r,g){return t(),l("div",null,a[0]||(a[0]=[i(`<h1 id="数学函数" tabindex="-1">数学函数 <a class="header-anchor" href="#数学函数" aria-label="Permalink to &quot;数学函数&quot;">​</a></h1><p>几乎所有现代编程语言都提供了一些最常用的数学函数，MQL5 也不例外。在本章中，我们将介绍几组 MQL5 自带的函数。这些函数包括取整函数、三角函数、双曲函数、指数函数、对数函数、幂函数，以及一些特殊函数，例如生成随机数函数和检查实数是否为正常数的函数。</p><p>大多数函数都有两个名称：全称（带有 “Math” 前缀且首字母大写）和简称（无前缀且全部小写）。我们会给出这两种形式，它们的功能是相同的。你可以根据源代码的格式风格来选择使用哪一种。</p><p>由于数学函数会进行一些计算并返回一个实数结果，潜在的错误可能会导致结果无法确定。例如，你不能对负数求平方根，也不能对零取对数。在这种情况下，函数会返回特殊值，即非数字值（NaN，Not A Number）。我们在 “实数”、“算术运算” 以及 “数字与字符串的转换” 等部分已经遇到过这些特殊值。可以使用 <code>MathIsValidNumber</code> 和 <code>MathClassify</code> 函数来分析数字的正确性和是否存在错误（请参考 “检查实数是否为正常数” 部分）。</p><p>如果至少有一个操作数的值为 NaN，那么任何涉及该操作数的后续计算（包括函数调用）也会得到 NaN 结果。</p><p>为了便于自学和获得直观的材料，你可以使用附件中的 <code>MathPlot.mq5</code> 脚本，它可以显示我们所描述的一元数学函数的图像。该脚本使用了 MetaTrader 5 中提供的标准绘图库 <code>Graphic.mqh</code>（本书不涉及该库的详细内容）。下面是一个双曲正弦曲线在 MetaTrader 5 窗口中可能的显示示例。</p><h2 id="数的绝对值" tabindex="-1">数的绝对值 <a class="header-anchor" href="#数的绝对值" aria-label="Permalink to &quot;数的绝对值&quot;">​</a></h2><p>MQL5 应用程序编程接口（API）提供了 <code>MathAbs</code> 函数，如果一个数带有负号，该函数可以将其去掉。因此，无需手动编写像下面这样冗长的等效代码：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span></code></pre></div><p><code>numeric MathAbs(numeric value) ≡ numeric fabs(numeric value)</code></p><p>该函数返回传递给它的数的绝对值，即其模。参数可以是任何类型的数。换句话说，该函数针对 <code>char/uchar</code>、<code>short/ushort</code>、<code>int/uint</code>、<code>long/ulong</code>、<code>float</code> 和 <code>double</code> 类型进行了重载，不过对于无符号类型，其值始终是非负的。</p><p>当传递一个字符串时，它会被隐式转换为 <code>double</code> 类型的数字，并且编译器会生成一个相关的警告。</p><p>返回值的类型始终与参数的类型相同，因此，如果接收变量的类型与返回值类型不同，编译器可能需要将返回值强制转换为接收变量的类型。</p><p>在 <code>MathAbs.mq5</code> 文件中可以找到该函数的使用示例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123.45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123.45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 123.45，数字保持“原样”</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 123.45，负号被去掉 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 1，整数能正常处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 无警告：参数和结果的类型均为 int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 会产生警告的情况：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 需要将 double 类型转换为 long 类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 由于类型转换可能会导致数据丢失</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 需要从大类型（4 字节）转换为小类型（2 字节）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 由于类型转换可能会导致数据丢失</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>需要注意的是，将有符号整数转换为无符号整数并不等同于取一个数的模：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_cast </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u_abs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u_cast);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 4294967295, 0xFFFFFFFF</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u_abs);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // 1</span></span></code></pre></div><p>还要注意，数字 0 可以有符号：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // -0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //  0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathAbs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(z));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>MathAbs</code> 的一个最佳示例是测试两个实数是否相等。众所周知，实数表示数值的精度是有限的，在冗长的计算过程中，这种精度可能会进一步降低（例如，十个 0.1 的和并不恰好等于 1.0）。在大多数情况下，严格的条件 <code>value1 == value2</code> 会返回 <code>false</code>，而实际上从理论上来说它们应该是相等的。</p><p>因此，为了比较实数值，通常使用以下表示方法：</p><p><code>MathAbs(value1 - value2) &lt; EPS</code></p><p>其中 <code>EPS</code> 是一个小的正值，表示精度（请参考“比较运算”部分的示例）。</p><h2 id="两个数的最大值和最小值" tabindex="-1">两个数的最大值和最小值 <a class="header-anchor" href="#两个数的最大值和最小值" aria-label="Permalink to &quot;两个数的最大值和最小值&quot;">​</a></h2><p>为了从两个数中找出最大或最小的数，MQL5 提供了 <code>MathMax</code> 和 <code>MathMin</code> 函数。它们的简称分别是 <code>fmax</code> 和 <code>fmin</code>。</p><h3 id="函数原型" tabindex="-1">函数原型 <a class="header-anchor" href="#函数原型" aria-label="Permalink to &quot;函数原型&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>numeric MathMax(numeric value1, numeric value2) ≡ numeric fmax(numeric value1, numeric value2)</span></span>
<span class="line"><span>numeric MathMin(numeric value1, numeric value2) ≡ numeric fmin(numeric value1, numeric value2)</span></span></code></pre></div><p>这两个函数会返回传入的两个值中的最大值或最小值。这些函数针对所有内置类型进行了重载。</p><h3 id="类型转换规则" tabindex="-1">类型转换规则 <a class="header-anchor" href="#类型转换规则" aria-label="Permalink to &quot;类型转换规则&quot;">​</a></h3><p>如果向函数传递不同类型的参数，“较低”类型的参数会自动转换为“较高”类型。例如，对于 <code>int</code> 和 <code>double</code> 这对类型，<code>int</code> 会被转换为 <code>double</code>。有关隐式类型转换的更多信息，请参阅“算术类型转换”部分。返回类型对应于“最高”类型。</p><p>如果有一个参数是 <code>string</code> 类型，它将是“高级”类型，即所有参数都会转换为字符串。字符串会像 <code>StringCompare</code> 函数那样按字典顺序进行比较。</p><h3 id="示例脚本" tabindex="-1">示例脚本 <a class="header-anchor" href="#示例脚本" aria-label="Permalink to &quot;示例脚本&quot;">​</a></h3><p><code>MathMaxMin.mq5</code> 脚本展示了这些函数的实际使用：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 数字比较</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, j));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 11，因为 11 大于 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, x));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 10，这里先将 i 转换为 double 类型，但 10.0 大于 5.5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 5.5，5.5 大于 -5.5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, s));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 abc，因为 s 是 string 类型，按规则将 i 转换为字符串比较，字符串比较中 &quot;abc&quot; 更“大”</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 类型转换检查</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, j)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 int，因为两个参数都是 int 类型，返回类型不变</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, x)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 double，因为 int 会转换为 double 类型，返回类型为 double</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, s)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 string，因为 s 是 string 类型，返回类型为 string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个示例清晰地展示了 <code>MathMax</code> 函数在不同类型参数下的行为，包括如何根据类型规则进行类型转换以及返回相应类型的结果。<code>MathMin</code> 函数的工作原理与之类似，只是它返回的是两个数中的最小值。</p><h2 id="取整函数" tabindex="-1">取整函数 <a class="header-anchor" href="#取整函数" aria-label="Permalink to &quot;取整函数&quot;">​</a></h2><p>MQL5 应用程序编程接口（API）包含多个用于将数字向最接近的整数进行取整的函数（可向不同方向取整）。尽管是取整操作，但所有这些函数都返回 <code>double</code> 类型的数字（小数部分为空）。</p><p>从技术角度来看，这些函数可以接受任何数值类型的参数，但只有实数会被取整，整数则只是被转换为 <code>double</code> 类型。</p><p>如果你想将数字精确到特定的小数位数，可以使用 <code>NormalizeDouble</code> 函数（请参考“双精度数的规范化”部分）。</p><p>在 <code>MathRound.mq5</code> 文件中给出了这些函数的使用示例。</p><h3 id="四舍五入函数" tabindex="-1">四舍五入函数 <a class="header-anchor" href="#四舍五入函数" aria-label="Permalink to &quot;四舍五入函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathRound(numeric value) ≡ double round(numeric value)</span></span></code></pre></div><p>该函数将一个数字向上或向下舍入到最接近的整数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathRound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 6.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathRound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 -6.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathRound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 输出 11.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathRound</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 -11.0</span></span></code></pre></div><p>如果小数部分的值大于或等于 0.5，尾数会增加 1（无论数字的符号如何）。</p><h3 id="向上取整和向下取整函数" tabindex="-1">向上取整和向下取整函数 <a class="header-anchor" href="#向上取整和向下取整函数" aria-label="Permalink to &quot;向上取整和向下取整函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathCeil(numeric value) ≡ double ceil(numeric value)</span></span>
<span class="line"><span>double MathFloor(numeric value) ≡ double floor(numeric value)</span></span></code></pre></div><p><code>MathCeil</code> 函数返回大于或等于传入值的最接近的整数值；<code>MathFloor</code> 函数返回小于或等于传入值的最接近的整数值。如果传入的值本身就是整数（小数部分为 0），则直接返回该整数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathCeil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 输出 6.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathCeil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 -5.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathFloor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 5.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathFloor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 -6.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathCeil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 输出 11.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathCeil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 输出 -11.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathFloor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 输出 11.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathFloor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 -11.0</span></span></code></pre></div><p>这些取整函数在处理数值时非常有用，特别是在需要对数值进行标准化处理或者需要将浮点数转换为整数的场景中。不同的取整方式可以根据具体的业务需求进行选择。</p><h2 id="除法取余-模运算" tabindex="-1">除法取余（模运算） <a class="header-anchor" href="#除法取余-模运算" aria-label="Permalink to &quot;除法取余（模运算）&quot;">​</a></h2><p>在 MQL5 里，若要进行整数的带余除法，可使用内置的取模运算符 <code>%</code>，这在“算术运算”部分有相关介绍。不过，该运算符不适用于实数。当除数、被除数或者两个操作数均为实数时，就需要使用 <code>MathMod</code> 函数（或者其简称 <code>fmod</code>）。</p><h3 id="函数原型-1" tabindex="-1">函数原型 <a class="header-anchor" href="#函数原型-1" aria-label="Permalink to &quot;函数原型&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathMod(double dividend, double divider) ≡ double fmod(double dividend, double divider)</span></span></code></pre></div><p>此函数会返回第一个传入的数（被除数）除以第二个数（除数）后的实余数。</p><p>若任一参数为负数，结果的符号由前面章节所描述的规则来确定。</p><h3 id="示例脚本-1" tabindex="-1">示例脚本 <a class="header-anchor" href="#示例脚本-1" aria-label="Permalink to &quot;示例脚本&quot;">​</a></h3><p>在 <code>MathMod.mq5</code> 脚本中能找到该函数的使用示例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 输出 3.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.49</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 3.02</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, M_PI));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 0.5752220392306207</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 1.0，符号被去除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathMod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 -1.0</span></span></code></pre></div><p>这些示例清晰展示了 <code>MathMod</code> 函数在不同参数组合下的工作情况，尤其是在处理实数除法取余以及负数参数时的表现。该函数为处理实数的模运算提供了便利，弥补了取模运算符 <code>%</code> 只能用于整数的不足。</p><h2 id="幂运算和开方运算" tabindex="-1">幂运算和开方运算 <a class="header-anchor" href="#幂运算和开方运算" aria-label="Permalink to &quot;幂运算和开方运算&quot;">​</a></h2><p>MQL5 应用程序编程接口（API）提供了一个通用函数 <code>MathPow</code>，用于将一个数提升到任意次幂，同时还提供了一个特殊情况的函数 <code>MathSqrt</code>，当幂为 0.5 时，它就是我们更为熟悉的开平方根运算。</p><p>要测试这些函数，可以使用 <code>MathPowSqrt.mq5</code> 脚本。</p><h3 id="幂运算函数" tabindex="-1">幂运算函数 <a class="header-anchor" href="#幂运算函数" aria-label="Permalink to &quot;幂运算函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathPow(double base, double exponent) ≡ double pow(double base, double exponent)</span></span></code></pre></div><p>该函数将底数 <code>base</code> 提升到指定的指数 <code>exponent</code> 次幂。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathPow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 2.82842712474619</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathPow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 0.3535533905932738</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathPow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 1.414213562373095</span></span></code></pre></div><h3 id="开平方根函数" tabindex="-1">开平方根函数 <a class="header-anchor" href="#开平方根函数" aria-label="Permalink to &quot;开平方根函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathSqrt(double value) ≡ double sqrt(double value)</span></span></code></pre></div><p>该函数返回一个数的平方根。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 输出 1.414213562373095</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 -nan(ind)，因为不能对负数开平方根</span></span></code></pre></div><p>MQL5 定义了几个常量，这些常量包含了涉及平方根的预计算值：</p>`,72),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"常量"),s("th",null,"描述"),s("th",null,"值")])]),s("tbody",null,[s("tr",null,[s("td",null,[s("code",null,"M_SQRT2")]),s("td",{"2.0":""},"\\(\\sqrt\\)"),s("td",null,"1.41421356237309504880")]),s("tr",null,[s("td",null,[s("code",null,"M_SQRT1_2")]),s("td",{"2.0":""},"\\(1 / \\sqrt\\)"),s("td",null,"0.707106781186547524401")]),s("tr",null,[s("td",null,[s("code",null,"M_2_SQRTPI")]),s("td",null,[h("\\(2.0 / \\sqrt{\\pi}\\)（其中 \\(\\pi\\) 为圆周率，"),s("code",null,"M_PI"),h("）")]),s("td",null,"1.12837916709551257390")])])],-1),i(`<p>这里的 <code>M_PI</code> 是圆周率 \\(\\pi\\) 的值（\\(\\pi = 3.14159265358979323846\\)，更多关于圆周率的内容可参考“三角函数”部分）。</p><p>所有内置常量都在文档中有详细描述。</p><p>这些函数和常量为在 MQL5 中进行幂运算和开方运算提供了便利，无论是处理一般的幂次还是特定的平方根运算，都能轻松实现。</p><h2 id="指数函数和对数函数" tabindex="-1">指数函数和对数函数 <a class="header-anchor" href="#指数函数和对数函数" aria-label="Permalink to &quot;指数函数和对数函数&quot;">​</a></h2><p>在 MQL5 里，可借助相应的 API 部分来计算指数函数和对数函数。</p><p>虽然 API 中没有提供计算机科学和组合数学里常用的二进制对数函数，但这并非难题，因为可以根据需要，通过现有的自然对数函数或十进制对数函数轻松计算得出。</p><p>二进制对数计算公式如下：</p><ul><li>\\(\\log_2(x) = \\frac{\\log(x)}{\\log(2)} = \\frac{\\log(x)}\\)</li><li>\\(\\log_2(x) = \\frac{\\log_{10}(x)}{\\log_{10}(2)}\\)</li></ul><p>这里的 \\(\\log\\) 和 \\(\\log_{10}\\) 分别是可用的自然对数函数（以 \\(e\\) 为底）和十进制对数函数（以 10 为底），<code>M_LN2</code> 是一个内置常量，其值为 \\(\\log(2)\\)。</p><p>以下表格列出了在对数计算中可能会用到的所有常量：</p><table tabindex="0"><thead><tr><th>常量</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td><code>M_E</code></td><td>自然常数 \\(e\\)</td><td>2.71828182845904523536</td></tr><tr><td><code>M_LOG2E</code></td><td>\\(\\log_2(e)\\)</td><td>1.44269504088896340736</td></tr><tr><td><code>M_LOG10E</code></td><td>\\(\\log_{10}(e)\\)</td><td>0.434294481903251827651</td></tr><tr><td><code>M_LN2</code></td><td>\\(\\ln(2)\\)</td><td>0.693147180559945309417</td></tr><tr><td><code>M_LN10</code></td><td>\\(\\ln(10)\\)</td><td>2.30258509299404568402</td></tr></tbody></table><p>下面这些函数的使用示例都收录在 <code>MathExp.mq5</code> 文件中。</p><h3 id="指数函数" tabindex="-1">指数函数 <a class="header-anchor" href="#指数函数" aria-label="Permalink to &quot;指数函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathExp(double value) ≡ double exp(double value)</span></span></code></pre></div><p>该函数返回指数值，也就是自然常数 \\(e\\)（可通过预定义常量 <code>M_E</code> 获取）的 <code>value</code> 次幂。若发生溢出，函数将返回 <code>inf</code>（一种表示无穷大的 NaN）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 输出 1.648721270700128</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathPow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_E, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 1.648721270700128</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 输出 inf，NaN</span></span></code></pre></div><h3 id="自然对数函数" tabindex="-1">自然对数函数 <a class="header-anchor" href="#自然对数函数" aria-label="Permalink to &quot;自然对数函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathLog(double value) ≡ double log(double value)</span></span></code></pre></div><p>此函数返回传入数字的自然对数。若 <code>value</code> 为负数，函数返回 <code>-nan(ind)</code>（表示“未定义值”的 NaN）；若 <code>value</code> 为 0，函数返回 <code>inf</code>（表示“无穷大”的 NaN）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_E));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 9.210340371976184</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 -0.6931471805599453</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 -inf，NaN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 输出 -nan(ind)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Log2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">128</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 输出 7</span></span></code></pre></div><p>最后一行代码使用了通过 <code>MathLog</code> 实现的二进制对数函数：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Log2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M_LN2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="十进制对数函数" tabindex="-1">十进制对数函数 <a class="header-anchor" href="#十进制对数函数" aria-label="Permalink to &quot;十进制对数函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathLog10(double value) ≡ double log10(double value)</span></span></code></pre></div><p>该函数返回一个数的十进制对数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 4.0</span></span></code></pre></div><h3 id="指数减-1-函数" tabindex="-1">指数减 1 函数 <a class="header-anchor" href="#指数减-1-函数" aria-label="Permalink to &quot;指数减 1 函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathExpm1(double value) ≡ double expm1(double value)</span></span></code></pre></div><p>此函数返回表达式 <code>(MathExp(value) - 1)</code> 的值。在经济计算中，当周期数趋近于无穷大时，该函数可用于计算复利方案下单位时间的有效利息（收益或支付）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathExpm1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 0.1051709180756476</span></span></code></pre></div><h3 id="对数加-1-函数" tabindex="-1">对数加 1 函数 <a class="header-anchor" href="#对数加-1-函数" aria-label="Permalink to &quot;对数加 1 函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathLog1p(double value) ≡ double log1p(double value)</span></span></code></pre></div><p>该函数返回表达式 <code>MathLog(1 + value)</code> 的值，即它与 <code>MathExpm1</code> 函数的作用相反。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog1p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 0.09531017980432487</span></span></code></pre></div><p>这些指数函数和对数函数为 MQL5 编程中涉及数学计算的场景提供了丰富的工具，无论是处理自然科学中的指数增长问题，还是计算机科学里的对数复杂度分析，都能发挥重要作用。同时，通过常量和函数之间的配合，还能灵活计算出一些 API 未直接提供的对数类型，如二进制对数。</p><h2 id="三角函数" tabindex="-1">三角函数 <a class="header-anchor" href="#三角函数" aria-label="Permalink to &quot;三角函数&quot;">​</a></h2><p>MQL5 提供了三个主要的三角函数（<code>MathCos</code>、<code>MathSin</code>、<code>MathTan</code>）以及它们的反函数（<code>MathArccos</code>、<code>MathArcsin</code>、<code>MathArctan</code>）。所有这些函数都使用弧度制的角度进行运算。如果角度是用度来表示的，则需要使用以下公式将其转换为弧度：</p><p><code>radians = degrees * M_PI / 180</code></p><p>这里的 <code>M_PI</code> 是该语言内置的几个与三角函数量（圆周率 \\(\\pi\\) 及其相关衍生值）有关的常量之一。</p>`,39),s("table",{tabindex:"0"},[s("thead",null,[s("tr",null,[s("th",null,"常量"),s("th",null,"描述"),s("th",null,"值")])]),s("tbody",null,[s("tr",null,[s("td",null,[s("code",null,"M_PI")]),s("td",null,"\\(\\pi\\)"),s("td",null,"3.14159265358979323846")]),s("tr",null,[s("td",null,[s("code",null,"M_PI_2")]),s("td",{2:""},"\\(\\frac{\\pi}\\)"),s("td",null,"1.57079632679489661923")]),s("tr",null,[s("td",null,[s("code",null,"M_PI_4")]),s("td",{4:""},"\\(\\frac{\\pi}\\)"),s("td",null,"0.785398163397448309616")]),s("tr",null,[s("td",null,[s("code",null,"M_1_PI")]),s("td",{"\\pi":""},"\\(\\frac{1}\\)"),s("td",null,"0.318309886183790671538")]),s("tr",null,[s("td",null,[s("code",null,"M_2_PI")]),s("td",{"\\pi":""},"\\(\\frac{2}\\)"),s("td",null,"0.636619772367581343076")])])],-1),i(`<p>反正切函数也可以针对由两个坐标 <code>y</code> 和 <code>x</code> 的比值所表示的量进行计算：这个扩展版本被称为 <code>MathArctan2</code>；与 <code>MathArctan</code> 不同，<code>MathArctan2</code> 能够还原出从 <code>-M_PI</code> 到 <code>+M_PI</code> 的整个圆周范围内的角度，而 <code>MathArctan</code> 的范围仅限于 <code>-M_PI_2</code> 到 <code>+M_PI_2</code>。</p><h3 id="三角函数-1" tabindex="-1">三角函数 <a class="header-anchor" href="#三角函数-1" aria-label="Permalink to &quot;三角函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathCos(double value) ≡ double cos(double value)</span></span>
<span class="line"><span>double MathSin(double value) ≡ double sin(double value)</span></span></code></pre></div><p>这两个函数分别返回传入数字（角度为弧度制）的余弦值和正弦值。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathTan(double value) ≡ double tan(double value)</span></span></code></pre></div><p>该函数返回传入数字（角度为弧度制）的正切值。</p><h3 id="反三角函数" tabindex="-1">反三角函数 <a class="header-anchor" href="#反三角函数" aria-label="Permalink to &quot;反三角函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathArccos(double value) ≡ double acos(double value)</span></span>
<span class="line"><span>double MathArcsin(double value) ≡ double asin(double value)</span></span></code></pre></div><p>这两个函数分别返回传入数字的反余弦值和反正弦值，即弧度制的角度。如果 <code>x = MathCos(t)</code>，那么 <code>t = MathArccos(x)</code>。正弦函数和反正弦函数也有类似的关系，如果 <code>y = MathSin(t)</code>，那么 <code>t = MathArcsin(y)</code>。</p><p>参数必须在 <code>-1</code> 到 <code>+1</code> 之间。否则，函数将返回 <code>NaN</code>。</p><p>反余弦函数的结果范围是从 <code>0</code> 到 <code>M_PI</code>，反正弦函数的结果范围是从 <code>-M_PI_2</code> 到 <code>+M_PI_2</code>。这些指定的范围被称为主值范围，因为这些函数是多值的，即它们的值会周期性地重复。所选择的半个周期完全覆盖了从 <code>-1</code> 到 <code>+1</code> 的定义域。</p><p>对于余弦函数，得到的角度位于上半圆，要得到下半圆的对称解，可以通过添加负号，即 <code>t = -t</code>。对于正弦函数，得到的角度位于右半圆，左半圆的第二个解是 <code>M_PI - t</code>（如果对于负的 <code>t</code> 也需要得到一个负的附加角度，那么是 <code>-M_PI - t</code>）。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathArctan(double value) ≡ double atan(double value)</span></span></code></pre></div><p>该函数返回传入数字的反正切值，即弧度制的角度，范围是从 <code>-M_PI_2</code> 到 <code>+M_PI_2</code>。</p><p>这个函数是 <code>MathTan</code> 的反函数，但有一个需要注意的地方。</p><p>请注意，由于正弦和余弦的比值在相对的象限（圆的四分之一）中由于符号的叠加而重复，正切函数的周期比整个圆周的周期小 2 倍。因此，仅靠正切值不足以在从 <code>-M_PI</code> 到 <code>+M_PI</code> 的整个范围内唯一确定原始角度。这可以通过 <code>MathArctan2</code> 函数来完成，在这个函数中，正切由两个独立的分量表示。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathArctan2(double y, double x) ≡ double atan2(double y, double x)</span></span></code></pre></div><p>该函数以弧度为单位返回一个角度值，该角度的正切值等于两个指定数字（<code>y</code> 轴坐标和 <code>x</code> 轴坐标）的比值。</p><p>结果（我们将其表示为 <code>r</code>）位于从 <code>-M_PI</code> 到 <code>+M_PI</code> 的范围内，并且满足 <code>MathTan(r) = y / x</code> 的条件。</p><p>该函数会考虑两个参数的符号，以便确定正确的象限（同时考虑边界条件，即当 <code>x</code> 或 <code>y</code> 等于 <code>0</code> 时，也就是在象限的边界上的情况）。</p><ol><li><code>x &gt;= 0, y &gt;= 0</code>，<code>0 &lt;= r &lt;= M_PI_2</code>（第一象限）</li><li><code>x &lt; 0, y &gt;= 0</code>，<code>M_PI_2 &lt; r &lt;= M_PI</code>（第二象限）</li><li><code>x &lt; 0, y &lt; 0</code>，<code>-M_PI &lt; r &lt; -M_PI_2</code>（第三象限）</li><li><code>x &gt;= 0, y &lt; 0</code>，<code>-M_PI_2 &lt;= r &lt; 0</code>（第四象限）</li></ol><p>以下是 <code>MathTrig.mq5</code> 脚本中调用三角函数的结果：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathCos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 0.5403023058681397</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 0.8414709848078965</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathTan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 输出 1.557407724654902</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathTan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> M_PI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 180.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 0.9999999999999999</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArccos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 输出 0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArcsin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 输出 1.570796326794897 等于 M_PI_2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArctan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 输出 0.4636476090008061，第一象限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArctan2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 输出 0.4636476090008061，第一象限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArctan2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 -2.677945044588987，第三象限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些三角函数在 MQL5 编程中非常有用，可用于处理与几何形状、物理模拟、信号处理等相关的计算任务，例如计算角度、坐标变换等。通过掌握这些函数的使用方法和特性，可以更高效地解决各种实际问题。</p><h2 id="双曲函数" tabindex="-1">双曲函数 <a class="header-anchor" href="#双曲函数" aria-label="Permalink to &quot;双曲函数&quot;">​</a></h2><p>MQL5 应用程序编程接口（API）包含了一组直接双曲函数和反双曲函数。</p><h3 id="基本双曲函数" tabindex="-1">基本双曲函数 <a class="header-anchor" href="#基本双曲函数" aria-label="Permalink to &quot;基本双曲函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathCosh(double value) ≡ double cosh(double value)</span></span>
<span class="line"><span>double MathSinh(double value) ≡ double sinh(double value)</span></span>
<span class="line"><span>double MathTanh(double value) ≡ double tanh(double value)</span></span></code></pre></div><p>这三个基本函数分别计算双曲余弦、双曲正弦和双曲正切。</p><h3 id="反双曲函数" tabindex="-1">反双曲函数 <a class="header-anchor" href="#反双曲函数" aria-label="Permalink to &quot;反双曲函数&quot;">​</a></h3><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>double MathArccosh(double value) ≡ double acosh(double value)</span></span>
<span class="line"><span>double MathArcsinh(double value) ≡ double asinh(double value)</span></span>
<span class="line"><span>double MathArctanh(double value) ≡ double atanh(double value)</span></span></code></pre></div><p>这三个反函数分别计算反双曲余弦、反双曲正弦和反双曲正切。</p><p>对于反双曲余弦函数 <code>MathArccosh</code>，其参数必须大于或等于 <code>+1</code>。否则，该函数将返回 <code>NaN</code>。</p><p>反双曲正切函数 <code>MathArctanh</code> 的定义域是从 <code>-1</code> 到 <code>+1</code>。如果参数超出这个范围，函数将返回 <code>NaN</code>。</p><p>双曲函数的使用示例在 <code>MathHyper.mq5</code> 脚本中展示：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathCosh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 输出 1.543080634815244</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSinh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 输出 1.175201193643801</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathTanh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 输出 0.7615941559557649</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArccosh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 nan，因为参数小于 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArcsinh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 0.4812118250596035</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArctanh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 0.5493061443340549</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArccosh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 0.9624236501192069</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArcsinh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 1.194763217287109</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathArctanh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 输出 nan，因为参数大于 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>双曲函数在数学和工程的多个领域中都有应用，例如在描述悬链线的形状（双曲余弦函数的应用）、信号处理以及一些物理模型等方面。在 MQL5 编程中，这些函数为处理相关的计算任务提供了有力的工具。通过了解它们的定义、定义域以及使用示例，可以更准确地在代码中运用这些函数来实现具体的功能。</p><h2 id="实数的合法性测试" tabindex="-1">实数的合法性测试 <a class="header-anchor" href="#实数的合法性测试" aria-label="Permalink to &quot;实数的合法性测试&quot;">​</a></h2><p>在进行实数计算时，可能会出现异常情况，例如函数超出定义域、得到数学上的无穷大、精度丢失等，此时计算结果可能不再是一个普通的数字，而是一个特殊值，这类特殊值统称为“非数字”（Not A Number，NaN）。</p><p>在本书前面的章节中我们已经遇到过这些特殊值。特别是在输出到日志时（参见“数字与字符串的相互转换”部分），它们会以文本标签的形式显示（例如 <code>nan(ind)</code>、<code>+inf</code> 等）。另外，只要表达式的操作数中有一个是 NaN，整个表达式就会停止正确求值，最终结果也会是 NaN。不过，代表正无穷或负无穷的“非数字”是个例外：如果用其他数除以它们，结果会是零。但也有预期中的特殊情况：如果用无穷大除以无穷大，结果又会是 NaN。</p><p>因此，程序能够判断计算中何时出现 NaN 并对这种情况进行特殊处理是很重要的，比如发出错误信号、用可接受的默认值替代，或者使用其他参数重新进行计算（例如降低迭代算法的精度或步长）。</p><p>MQL5 中有两个函数可以用来分析实数的合法性：<code>MathIsValidNumber</code> 给出简单的是（<code>true</code>）或否（<code>false</code>）的答案，而 <code>MathClassify</code> 则能进行更详细的分类。</p><p>从物理层面来看，所有特殊值在数字中都是通过一种特殊的位组合来编码的，这种组合不会用于表示普通数字。当然，<code>double</code> 和 <code>float</code> 类型的编码是不同的。下面我们来深入了解一下 <code>double</code> 类型（因为它比 <code>float</code> 更常用）。</p><p>在“嵌套模板”章节中，我们创建了一个 <code>Converter</code> 类，通过联合（<code>union</code>）将两种不同类型组合起来以实现视图切换。我们可以使用这个类来研究 NaN 的位表示。</p><p>为了方便，我们将这个类移到一个单独的头文件 <code>ConverterT.mqh</code> 中。在测试脚本 <code>MathInvalid.mq5</code> 中包含这个 <code>.mqh</code> 文件，并创建一个用于 <code>double</code>/<code>ulong</code> 类型对的转换器实例（顺序不重要，因为转换器可以双向工作）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Converter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ulong, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NaNs;</span></span></code></pre></div><p>NaN 中的位组合是标准化的，我们选取几个用 <code>ulong</code> 常量表示的常用值，看看内置函数对它们的反应。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基本的 NaN 值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAN_INF_PLUS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7FF0000000000000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAN_INF_MINUS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FFF0000000000000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAN_QUIET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7FF8000000000000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAN_IND_MINUS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FFF8000000000000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义 NaN 示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAN_QUIET_1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7FF8000000000001</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NAN_QUIET_2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7FF8000000000002</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pinf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> NaNs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[NAN_INF_PLUS];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // +无穷大</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ninf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> NaNs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[NAN_INF_MINUS];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // -无穷大</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> qnan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> NaNs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[NAN_QUIET];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 静默 NaN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> NaNs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[NAN_IND_MINUS];</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // -nan(ind)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pinf));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pinf)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // FP_INFINITE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nind));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nind)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // FP_NAN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>正如预期的那样，测试结果符合我们的设想。</p><p>下面我们来看 <code>MathIsValidNumber</code> 和 <code>MathClassify</code> 函数的正式描述，然后继续进行测试。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>bool MathIsValidNumber(double value)</span></span></code></pre></div><p>该函数用于检查实数的合法性。参数可以是 <code>double</code> 或 <code>float</code> 类型。返回 <code>true</code> 表示该数字合法，返回 <code>false</code> 表示“非数字”（NaN 的一种变体）。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>ENUM_FP_CLASS MathClassify(double value)</span></span></code></pre></div><p>该函数返回实数（<code>double</code> 或 <code>float</code> 类型）的类别，它是枚举类型 <code>ENUM_FP_CLASS</code> 中的一个值：</p><ul><li><code>FP_NORMAL</code>：正常数字。</li><li><code>FP_SUBNORMAL</code>：小于以规范化形式表示的最小数字的数（例如，对于 <code>double</code> 类型，是小于 <code>DBL_MIN</code>（<code>2.2250738585072014e - 308</code>）的值）；存在精度损失。</li><li><code>FP_ZERO</code>：零（正数零或负数零）。</li><li><code>FP_INFINITE</code>：无穷大（正无穷或负无穷）。</li><li><code>FP_NAN</code>：表示所有其他类型的“非数字”（可细分为“静默”和“信号”NaN 家族）。</li></ul><p>MQL5 没有提供用于异常机制的警示 NaN，这种 NaN 可以在程序中拦截和响应关键错误。MQL5 中没有这样的机制，所以例如在发生除零错误时，MQL 程序会直接终止运行（从图表中卸载）。</p><p>“静默”NaN 有很多种，你可以使用转换器来构造它们，以便在计算算法中区分和处理非标准状态。</p><p>下面在 <code>MathInvalid.mq5</code> 中进行一些计算，直观展示如何得到不同类别的数字。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对 double 类型的计算</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                      // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // FP_ZERO</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M_PI)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // FP_NORMAL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DBL_MIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                              // 2.225073858507203e - 309</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DBL_MIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DBL_MIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // FP_SUBNORMAL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                            // -nan(ind)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FP_NAN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                // -inf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathLog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // FP_INFINITE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对 float 类型的计算</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLT_MIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLT_MIN);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                             // inf</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathIsValidNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLT_MIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLT_MIN));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathClassify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLT_MIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FLT_MIN)));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // FP_INFINITE</span></span></code></pre></div><p>我们还可以反向使用转换器：通过 <code>double</code> 值获取其位表示，从而检测“非数字”：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrintFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">I64X&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">NaNs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // FFF8000000000000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">NaNs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NAN_IND_MINUS);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // true, nind</span></span></code></pre></div><p><code>PrintFormat</code> 函数与 <code>StringFormat</code> 类似，唯一的区别是它会立即将结果打印到日志中，而不是存储到字符串中。</p><p>最后，我们来验证“非数字”总是不相等的：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NaN != NaN 始终为 true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathSqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // false</span></span></code></pre></div><p>在 MQL5 中，有一种通过将字符串 <code>&quot;nan&quot;</code> 和 <code>&quot;inf&quot;</code> 转换为 <code>double</code> 类型来得到 NaN 或无穷大的方法：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> infinity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;inf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这些功能和方法能帮助开发者在 MQL5 编程中更好地处理实数计算中的异常情况，确保程序的健壮性和稳定性。</p><h2 id="随机数生成" tabindex="-1">随机数生成 <a class="header-anchor" href="#随机数生成" aria-label="Permalink to &quot;随机数生成&quot;">​</a></h2><p>在交易中，许多算法都需要生成随机数。MQL5 提供了两个函数，用于初始化并随后调用伪随机整数生成器。</p><p>为了获得更好的“随机性”，可以使用 MetaTrader 5 中可用的 Alglib 库（请参阅 MQL5/Include/Math/Alglib/alglib.mqh）。</p><h3 id="void-mathsrand-int-seed-≡-void-srand-int-seed" tabindex="-1"><code>void MathSrand(int seed) ≡ void srand(int seed)</code> <a class="header-anchor" href="#void-mathsrand-int-seed-≡-void-srand-int-seed" aria-label="Permalink to &quot;\`void MathSrand(int seed) ≡ void srand(int seed)\`&quot;">​</a></h3><p>该函数设置伪随机整数生成器的初始状态。在启动算法之前，应该调用该函数一次。而随机值本身则应通过顺序调用 <code>MathRand</code> 函数来获取。</p><p>通过使用相同的种子值初始化生成器，可以得到可重现的数字序列。种子值并不是从 <code>MathRand</code> 获得的第一个随机数。生成器维护着一些内部状态，在每个时刻（在为获取新的随机数而调用它的间隔期间），该内部状态由一个整数值来表征，程序可以通过内置的 <code>uint</code> 变量 <code>_RandomSeed</code> 访问这个值。正是这个初始状态值由 <code>MathSrand</code> 调用进行设置。</p><p>每次调用 <code>MathRand</code> 时，生成器的操作由以下两个公式描述：</p><p>\\(X_n = T_f(X_p)\\)</p><p>\\(R = G_f(X_n)\\)</p><p>\\(T_f\\) 函数被称为转换函数。它根据先前的 \\(X_p\\) 状态计算生成器的新内部状态 \\(X_n\\)。</p><p>\\(G_f\\) 函数使用新的内部状态生成另一个“随机”值，<code>MathRand</code> 函数将返回这个值。</p><p>在 MQL5 中，这些公式的实现如下（伪代码）：</p><p>\\(T_f\\)：<code>_RandomSeed = _RandomSeed * 214013 + 2531011</code></p><p>\\(G_f\\)：<code>MathRand = (_RandomSeed &gt;&gt; 16) &amp; 0x7FFF</code></p><p>建议将 <code>GetTickCount</code> 或 <code>TimeLocal</code> 函数作为种子值传递。</p><h3 id="int-mathrand-≡-int-rand" tabindex="-1"><code>int MathRand() ≡ int rand()</code> <a class="header-anchor" href="#int-mathrand-≡-int-rand" aria-label="Permalink to &quot;\`int MathRand() ≡ int rand()\`&quot;">​</a></h3><p>该函数返回一个范围在 0 到 32767 之间的伪随机整数。生成的数字序列会根据调用 <code>MathSrand</code> 进行的初始初始化而有所不同。</p><p>在 <code>MathRand.mq5</code> 文件中给出了使用生成器的示例。它计算在给定数量的子范围（区间）上生成的数字的分布统计信息。理想情况下，我们应该得到均匀分布。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 尝试次数（生成的数字数量）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> STATS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 区间数量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> stats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[STATS] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 计算落入区间的统计信息</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32767</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> STATS;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 重置生成器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MathSrand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimeLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在循环中重复实验</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LIMIT; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 获取新的随机数并更新统计信息</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        stats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathRand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bucket]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是三次运行的结果示例（每次我们都会得到一个新的序列）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span> 96  93 117  76  98  88 104 124 113  91</span></span>
<span class="line"><span>110  81 106  88 103  90 105 102 106 109</span></span>
<span class="line"><span> 89  98  98 107 114  90 101 106  93 104</span></span></code></pre></div><p>这些函数和示例展示了在 MQL5 中生成伪随机数的基本方法和对生成数字分布的简单统计分析，对于需要随机数的交易算法等应用场景提供了实用的工具和参考。</p><h2 id="整数中的字节序控制" tabindex="-1">整数中的字节序控制 <a class="header-anchor" href="#整数中的字节序控制" aria-label="Permalink to &quot;整数中的字节序控制&quot;">​</a></h2><p>在硬件层面上，各种信息系统在内存中表示数字时会使用不同的字节顺序。因此，当将 MQL 程序与“外部世界”集成时，特别是在实现网络通信协议或读写常见格式的文件时，可能需要更改字节顺序。</p><p>Windows 计算机采用小端序（从最低有效字节开始），也就是说，在为变量分配的内存单元中，最低字节排在最前面，然后是更高位的字节，依此类推。而大端序（从最高有效字节开始）在互联网上被广泛使用。在这种情况下，内存单元中的第一个字节是高位字节，最后一个字节是低位字节。这种顺序与我们日常生活中“从左到右”书写数字的方式类似。例如，值 1234 以 1 开头表示千位，接着是 2 表示百位，3 表示十位，最后 4 表示个位（低位）。</p><p>让我们看看 MQL5 中的默认字节顺序。为此，我们将使用脚本 <code>MathSwap.mq5</code>。</p><p>它描述了一个联合模板，可将整数转换为字节数组：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typename T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ByteOverlay</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   T value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   uchar </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">bytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sizeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T)];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ByteOverlay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T v) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T v) { value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>这段代码允许直观地将数字划分为字节，并使用数组索引对它们进行枚举。</p><p>在 <code>OnStart</code> 函数中，我们定义一个 <code>uint</code> 变量，其值为 <code>0x12345678</code>（请注意，这些数字是十六进制的；在这种表示法中，它们恰好对应字节边界：每两位是一个单独的字节）。我们将这个数字转换为数组并输出到日志中。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ui </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12345678</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ByteOverlay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;uint&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ui);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bo.bytes);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 120  86  52  18 &lt;==&gt; 0x78 0x56 0x34 0x12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p><code>ArrayPrint</code> 函数不能以十六进制打印数字，所以我们看到的是它们的十进制表示，但很容易将它们转换为十六进制并确认它们与原始字节匹配。直观地看，它们的顺序是相反的：即数组中索引为 0 的位置是 <code>0x78</code>，然后是 <code>0x56</code>、<code>0x34</code> 和 <code>0x12</code>。显然，这种顺序是从最低有效字节开始的（确实，我们处于 Windows 环境中）。</p><p>现在让我们熟悉一下 MQL5 提供的用于更改字节顺序的函数 <code>MathSwap</code>。</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>integer MathSwap(integer value)</span></span></code></pre></div><p>该函数返回一个整数，其中传入参数的字节顺序被反转。该函数接受 <code>ushort</code>/<code>uint</code>/<code>ulong</code> 类型的参数（即大小分别为 2、4、8 字节）。</p><p>让我们测试一下这个函数的实际效果：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ui </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12345678</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrintFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">I32X -&gt; </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">I32X&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ui, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSwap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ui));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ulong ul </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0123456789ABCDEF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrintFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">I64X -&gt; </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">I64X&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ul, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MathSwap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ul));</span></span></code></pre></div><p>结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>12345678 -&gt; 78563412</span></span>
<span class="line"><span>123456789ABCDEF -&gt; EFCDAB8967452301</span></span></code></pre></div><p>让我们尝试在使用 <code>MathSwap</code> 转换值 <code>0x12345678</code> 后记录字节数组：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MathSwap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ui);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将 MathSwap 的结果放入 ByteOverlay</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bo.bytes);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //  18  52  86 120 &lt;==&gt; 0x12 0x34 0x56 0x78</span></span></code></pre></div><p>在索引为 0 的字节中，原来的值是 <code>0x78</code>，现在变成了 <code>0x12</code>，其他索引位置的元素值也进行了交换。</p><p>通过了解 MQL5 中的字节序以及 <code>MathSwap</code> 函数的使用方法，开发者在处理与外部系统交互时，能够正确地处理不同字节序带来的问题，确保数据的正确传输和处理。</p>`,110)]))}const y=n(k,[["render",p]]);export{c as __pageData,y as default};
