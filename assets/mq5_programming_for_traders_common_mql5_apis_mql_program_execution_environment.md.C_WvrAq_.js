import{_ as i,c as a,ag as n,o as t}from"./chunks/framework.CCnnzLsu.js";const g=JSON.parse('{"title":"MQL 程序执行环境","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mq5_programming_for_traders/common_mql5_apis/mql_program_execution_environment"}],["meta",{"property":"og:title","content":"MQL 程序执行环境"}]]},"headers":[],"relativePath":"mq5_programming_for_traders/common_mql5_apis/mql_program_execution_environment.md","filePath":"mq5_programming_for_traders/common_mql5_apis/mql_program_execution_environment.md","lastUpdated":1744387121000}'),p={name:"mq5_programming_for_traders/common_mql5_apis/mql_program_execution_environment.md"};function h(l,s,k,e,E,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="mql-程序执行环境" tabindex="-1">MQL 程序执行环境 <a class="header-anchor" href="#mql-程序执行环境" aria-label="Permalink to &quot;MQL 程序执行环境&quot;">​</a></h1><p>我们知道，MQL 程序的源代码编译成 <code>.ex5</code> 格式的二进制可执行代码后，就可以在终端或测试代理上运行了。也就是说，终端或测试器提供了一个让 MQL 程序“运行”的通用环境。</p><p>需要提醒的是，内置测试器仅支持两种类型的 MQL 程序：专家顾问和指标。我们将在本书的第五部分详细讨论 MQL 程序的类型及其特点。在本章中，我们将重点介绍那些对所有类型的 MQL 程序都通用的 MQL5 API 函数，这些函数能让你分析执行环境，并在一定程度上对其进行控制。</p><p>大多数环境属性可通过 <code>TerminalInfoInteger</code>、<code>TerminalInfoDouble</code>、<code>TerminalInfoString</code>、<code>MQLInfoInteger</code> 和 <code>MQLInfoString</code> 函数进行只读访问。从函数名就能看出，每个函数返回特定类型的值。这样的架构使得同一函数中组合的属性的实际含义可能大不相同。你也可以在 MQL5 中实现自己的对象层来对这些属性进行另一种分组（稍后在“使用属性绑定到程序环境”部分会给出示例）。</p><p>上述这些函数有明确的逻辑划分，分为通用的终端属性（以“Terminal”为前缀）和单个 MQL 程序的属性（以“MQL”为前缀）。然而，在很多情况下，需要同时分析终端和程序的相似特性。例如，使用 DLL 的权限或执行交易操作的权限既会授予整个终端，也会授予特定的程序。因此，将这些函数作为一个整体来综合考虑是有意义的。</p><p>只有与错误代码相关的部分环境属性是可写的，具体来说，就是重置上一个错误（<code>ResetLastError</code>）和设置用户错误（<code>SetUserError</code>）。</p><p>此外，在本章中，我们还将介绍在程序中关闭终端的函数（<code>TerminalClose</code>、<code>SetReturnError</code>）以及在调试器中暂停程序的函数（<code>DebugBreak</code>）。</p><h2 id="获取终端和程序属性的通用列表" tabindex="-1">获取终端和程序属性的通用列表 <a class="header-anchor" href="#获取终端和程序属性的通用列表" aria-label="Permalink to &quot;获取终端和程序属性的通用列表&quot;">​</a></h2><p>用于获取环境属性的内置函数采用了一种通用的方法：每种特定类型的属性都被组合到一个单独的函数中，该函数带有一个指定请求属性的参数。为了识别属性，定义了一些枚举类型：每个枚举元素描述一个属性。</p><p>正如我们接下来会看到的，这种方法在 MQL5 API 以及其他领域（包括应用领域）中经常被使用。特别是，类似的函数集可用于获取交易账户和金融工具的属性。</p><p>使用 <code>int</code>、<code>double</code> 和 <code>string</code> 这三种简单类型的属性就足以描述环境。然而，并非只有整型属性使用 <code>int</code> 类型的值来表示，逻辑标志（例如，权限/禁止、网络连接的存在与否等）以及其他内置枚举（例如，MQL 程序的类型和许可证的类型）也使用 <code>int</code> 类型表示。</p><p>考虑到对终端属性和特定 MQL 程序属性的大致划分，有以下用于描述环境的函数：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ENUM_MQL_INFO_INTEGER </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ENUM_TERMINAL_INFO_INTEGER </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerminalInfoDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ENUM_TERMINAL_INFO_DOUBLE </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ENUM_MQL_INFO_STRING </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ENUM_TERMINAL_INFO_STRING </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这些函数原型将值类型映射到枚举类型。例如，<code>int</code> 类型的终端属性汇总在 <code>ENUM_TERMINAL_INFO_INTEGER</code> 中，<code>double</code> 类型的终端属性列在 <code>ENUM_TERMINAL_INFO_DOUBLE</code> 中，依此类推。可用枚举及其元素的列表可以在文档的“终端属性”和“MQL 程序”部分找到。</p><p>在接下来的部分中，我们将查看所有属性，并根据它们的用途进行分组。但在这里，我们要解决的问题是获取所有现有属性及其值的通用列表。这对于识别 MQL 程序在特定终端实例上运行的“瓶颈”或特性通常是必要的。一种常见的情况是，一个 MQL 程序在一台计算机上可以正常运行，但在另一台计算机上根本无法运行，或者运行时出现一些问题。</p><p>随着平台的发展，属性列表会不断更新，因此建议不要基于硬编码到源代码中的列表来请求属性，而是自动进行请求。</p><p>在“枚举”部分中，我们创建了一个模板函数 <code>EnumToArray</code>，用于获取枚举元素的完整列表（文件 <code>EnumToArray.mqh</code>）。同样在该部分中，我们引入了脚本 <code>ConversionEnum.mq5</code>，它使用了指定的头文件。在脚本中实现了一个辅助函数 <code>process</code>，它接收一个包含枚举元素代码的数组，并将它们输出到日志中。我们将以这些开发成果作为进一步改进的起点。</p><p>我们需要修改 <code>process</code> 函数，使其不仅能获取特定枚举的元素列表，还能使用内置的属性函数之一查询相应的属性。</p><p>我们给新版本的脚本命名为 <code>Environment.mq5</code>。</p><p>由于环境属性分散在几个不同的函数中（在这种情况下是五个），你需要学习如何将指向所需内置函数的指针传递给新版本的 <code>process</code> 函数（请参阅“函数指针（typedef）”部分）。然而，MQL5 不允许将内置函数的地址赋给函数指针。这只能对在 MQL5 中实现的应用函数进行。因此，我们将创建包装函数。例如：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_MQL_INFO_INTEGER </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指针类型描述示例  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntFuncPtr)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_MQL_INFO_INTEGER property);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指针变量的初始化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntFuncPtr ptr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _MQLInfoInteger;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntFuncPtr ptr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MQLInfoInteger;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 编译错误</span></span></code></pre></div><p>上面展示了 <code>MQLInfoInteger</code> 的“包装”示例（显然，它应该有一个不同但最好相似的名称）。其他函数也以类似的方式进行“包装”。总共会有五个。</p><p>如果在旧版本的 <code>process</code> 中只有一个指定枚举的模板参数，那么在新版本中我们还需要传递返回值的类型（因为 MQL5 并不“理解”枚举名称中的单词：即使在 <code>ENUM_MQL_INFO_INTEGER</code> 名称中存在结尾“<code>INTEGER</code>”，编译器也无法将其与 <code>int</code> 类型关联起来）。</p><p>然而，除了将返回值类型与枚举类型关联起来之外，我们还需要以某种方式将指向相应包装函数的指针（我们之前定义的五个函数之一）传递给 <code>process</code> 函数。毕竟，编译器本身无法根据例如 <code>ENUM_MQL_INFO_INTEGER</code> 类型的参数来确定需要调用 <code>MQLInfoInteger</code> 函数。</p><p>为了解决这个问题，创建了一个特殊的模板结构体，它将所有这三个因素结合在一起。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typename E, typename R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Binding</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   typedef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> R</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FuncPtr)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> E property);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FuncPtr f;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Binding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FuncPtr p): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>这两个模板参数允许使用结果和输入参数的所需组合来指定函数指针（<code>FuncPtr</code>）的类型。结构体实例有一个 <code>f</code> 字段，用于存储指向新定义类型的指针。</p><p>现在，新版本的 <code>process</code> 函数可以描述如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typename E, typename R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E, R</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   E e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (E)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 关闭关于未初始化的警告</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 将枚举元素列表获取到数组中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnumToArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e, array, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, USHORT_MAX);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; Count=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ResetLastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 显示每个元素的名称和值，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 通过调用 Binding 结构体中的指针获取</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (E)</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      R r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 调用函数，然后解析 _LastError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _LastError;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      PrintFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">% 3d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e), (string)r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         (snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E2S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(snapshot) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; (&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (string)snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ResetLastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>输入参数是 <code>Binding</code> 结构体。它包含一个指向用于获取属性的特定函数的指针（这个字段将由调用代码填充）。</p><p>这个版本的算法会记录属性的序号、属性标识符及其值。再次注意，每个条目中的第一个数字将是枚举中元素的序号，而不是值（元素的值可以有间隔地分配）。你可以选择在 <code>print format</code> 指令中“原样”添加变量 <code>e</code> 的输出。</p><p>此外，你可以修改 <code>process</code> 函数，使其将得到的属性值收集到一个数组（或其他容器，如映射）中，并将它们“返回”到外部。</p><p>在 <code>print format</code> 指令中直接引用函数指针并同时分析 <code>_LastError</code> 错误代码可能会导致潜在的错误。问题在于，在这种情况下，函数参数（请参阅“参数和实参”部分）和表达式中操作数（请参阅“基本概念”部分）的求值顺序是未定义的。因此，当在读取 <code>_LastError</code> 的同一行上调用指针时，编译器可能会决定先执行第二个操作（读取 <code>_LastError</code>）再执行第一个操作（调用指针）。结果，我们将看到一个不相关的错误代码（例如，来自之前的函数调用）。</p><p>但这还不是全部。如果任何操作失败，内置变量 <code>_LastError</code> 几乎可以在表达式求值的任何地方改变其值。特别是，如果传递给 <code>EnumToString</code> 函数的参数值不在枚举中，该函数可能会引发一个错误代码。在这个代码片段中，我们不会受到这个问题的影响，因为我们的 <code>EnumToArray</code> 函数返回的数组中只包含经过检查（有效的）枚举元素。然而，在一般情况下，在任何“复合”指令中，可能有很多地方会改变 <code>_LastError</code> 的值。在这方面，最好在我们感兴趣的操作（这里是通过指针调用函数）之后立即固定错误代码，将其保存到中间变量 <code>snapshot</code> 中。</p><p>但让我们回到主要问题。我们终于可以组织对新函数 <code>process</code> 的调用，以获取软件环境的各种属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENUM_MQL_INFO_INTEGER, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_MQLInfoInteger));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENUM_TERMINAL_INFO_INTEGER, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_TerminalInfoInteger));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENUM_TERMINAL_INFO_DOUBLE, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_TerminalInfoDouble));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENUM_MQL_INFO_STRING, string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_MQLInfoString));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Binding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENUM_TERMINAL_INFO_STRING, string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_TerminalInfoString));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>下面是生成的日志条目的片段：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>ENUM_MQL_INFO_INTEGER Count=15</span></span>
<span class="line"><span>  0 MQL_PROGRAM_TYPE=1</span></span>
<span class="line"><span>  1 MQL_DLLS_ALLOWED=0</span></span>
<span class="line"><span>  2 MQL_TRADE_ALLOWED=0</span></span>
<span class="line"><span>  3 MQL_DEBUG=1</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>  7 MQL_LICENSE_TYPE=0</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>ENUM_TERMINAL_INFO_INTEGER Count=50</span></span>
<span class="line"><span>  0 TERMINAL_BUILD=2988</span></span>
<span class="line"><span>  1 TERMINAL_CONNECTED=1</span></span>
<span class="line"><span>  2 TERMINAL_DLLS_ALLOWED=0</span></span>
<span class="line"><span>  3 TERMINAL_TRADE_ALLOWED=0</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>  6 TERMINAL_MAXBARS=100000</span></span>
<span class="line"><span>  7 TERMINAL_CODEPAGE=1251</span></span>
<span class="line"><span>  8 TERMINAL_MEMORY_PHYSICAL=4095</span></span>
<span class="line"><span>  9 TERMINAL_MEMORY_TOTAL=8190</span></span>
<span class="line"><span> 10 TERMINAL_MEMORY_AVAILABLE=7813</span></span>
<span class="line"><span> 11 TERMINAL_MEMORY_USED=377</span></span>
<span class="line"><span> 12 TERMINAL_X64=1</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>ENUM_TERMINAL_INFO_DOUBLE Count=2</span></span>
<span class="line"><span>  0 TERMINAL_COMMUNITY_BALANCE=0.0 (MQL5_WRONG_PROPERTY,4512)</span></span>
<span class="line"><span>  1 TERMINAL_RETRANSMISSION=0.0</span></span>
<span class="line"><span>ENUM_MQL_INFO_STRING Count=2</span></span>
<span class="line"><span>  0 MQL_PROGRAM_NAME=Environment</span></span>
<span class="line"><span>  1 MQL_PROGRAM_PATH=C:\\Program Files\\MT5East\\MQL5\\Scripts\\MQL5Book\\p4\\Environment.ex5</span></span>
<span class="line"><span>ENUM_TERMINAL_INFO_STRING Count=6</span></span>
<span class="line"><span>  0 TERMINAL_COMPANY=MetaQuotes Software Corp.</span></span>
<span class="line"><span>  1 TERMINAL_NAME=MetaTrader 5</span></span>
<span class="line"><span>  2 TERMINAL_PATH=C:\\Program Files\\MT5East</span></span>
<span class="line"><span>  3 TERMINAL_DATA_PATH=C:\\Program Files\\MT5East</span></span>
<span class="line"><span>  4 TERMINAL_COMMONDATA_PATH=C:\\Users\\User\\AppData\\Roaming\\MetaQuotes\\Terminal\\Common</span></span>
<span class="line"><span>  5 TERMINAL_LANGUAGE=Russian</span></span></code></pre></div><p>这些以及其他属性将在接下来的部分中进行描述。</p><p>值得注意的是，一些属性是从平台开发的先前阶段继承而来的，仅为了兼容性而保留。特别是，<code>TerminalInfoInteger</code> 中的 <code>TERMINAL_X64</code> 属性返回终端是否为 64 位的指示。如今，32 位版本的开发已经停止，因此该属性始终等于 1（<code>true</code>）。</p><h2 id="终端版本号" tabindex="-1">终端版本号 <a class="header-anchor" href="#终端版本号" aria-label="Permalink to &quot;终端版本号&quot;">​</a></h2><p>由于终端在不断改进，其新版本会出现新的功能，因此 MQL 程序可能需要分析当前的终端版本，以便应用不同的算法选项。此外，没有任何程序（包括终端本身）能完全避免出现错误。所以，如果出现问题，应该提供包含当前终端版本的诊断输出，这有助于重现和修复错误。</p><p>你可以使用 <code>ENUM_TERMINAL_INFO_INTEGER</code> 中的 <code>TERMINAL_BUILD</code> 属性来获取终端的版本号。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_BUILD) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>需要提醒的是，用于构建程序的编译器的版本号在源代码中可以通过宏定义 <code>__MQLBUILD__</code> 或 <code>__MQL5BUILD__</code> 来获取（请参阅“预定义常量”部分）。</p><h2 id="程序类型和许可证" tabindex="-1">程序类型和许可证 <a class="header-anchor" href="#程序类型和许可证" aria-label="Permalink to &quot;程序类型和许可证&quot;">​</a></h2><p>相同的源代码可以以某种方式包含在不同类型的 MQL 程序中。除了在编译阶段将源代码（预处理指令 <code>#include</code>）包含到一个通用产品中的选项外，还可以组装库——在执行阶段连接到主程序的二进制程序模块。</p><p>然而，有些函数只允许在特定类型的程序中使用。例如，<code>OrderCalcMargin</code> 函数不能在指标中使用。尽管这种限制似乎没有根本的合理性，但开发一个通用的保证金计算算法（该算法不仅可以嵌入到专家顾问中，还可以嵌入到指标中）的开发者应该考虑到这一细微差别，并为指标提供一种替代的计算方法。</p><p>每个章节的适当部分将给出程序类型的完整限制列表。在所有这些情况下，了解“父”程序的类型很重要。</p><p>为了确定程序类型，<code>ENUM_MQL_INFO_INTEGER</code> 中有 <code>MQL_PROGRAM_TYPE</code> 属性。可能的属性值在 <code>ENUM_PROGRAM_TYPE</code> 枚举中描述。</p><table tabindex="0"><thead><tr><th>标识符</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>PROGRAM_SCRIPT</code></td><td>1</td><td>脚本</td></tr><tr><td><code>PROGRAM_EXPERT</code></td><td>2</td><td>专家顾问</td></tr><tr><td><code>PROGRAM_INDICATOR</code></td><td>4</td><td>指标</td></tr><tr><td><code>PROGRAM_SERVICE</code></td><td>5</td><td>服务</td></tr></tbody></table><p>在上一节的日志片段中，我们看到 <code>PROGRAM_SCRIPT</code> 属性被设置为 1，因为我们的测试是一个脚本。要获得字符串描述，可以使用 <code>EnumToString</code> 函数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ENUM_PROGRAM_TYPE type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ENUM_PROGRAM_TYPE)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_PROGRAM_TYPE);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type));</span></span></code></pre></div><p>MQL 程序的另一个便于分析以启用/禁用某些功能的属性是许可证类型。如你所知，MQL 程序可以免费分发，也可以在 MQL5 市场中分发。此外，市场中的程序可以购买，也可以作为演示版本下载。这些因素很容易检查，如果需要，可以为它们调整算法。为此，<code>ENUM_MQL_INFO_INTEGER</code> 中有 <code>MQL_LICENSE_TYPE</code> 属性，它使用 <code>ENUM_LICENSE_TYPE</code> 枚举作为类型。</p><table tabindex="0"><thead><tr><th>标识符</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>LICENSE_FREE</code></td><td>0</td><td>免费无限制版本</td></tr><tr><td><code>LICENSE_DEMO</code></td><td>1</td><td>市场中付费产品的演示版本，仅在策略测试器中工作</td></tr><tr><td><code>LICENSE_FULL</code></td><td>2</td><td>购买的许可版本，允许至少 5 次激活（卖家可以增加激活次数）</td></tr><tr><td><code>LICENSE_TIME</code></td><td>3</td><td>限时版本（尚未实现）</td></tr></tbody></table><p>这里需要注意的是，许可证指的是使用 <code>MQLInfoInteger(MQL_LICENSE_TYPE)</code> 进行请求的二进制 <code>.ex5</code> 模块。在库中，此函数将返回库自身的许可证，而不是链接该库的主程序的许可证。</p><p>作为测试本节两个函数的示例，本书附带了一个简单的服务 <code>EnvType.mq5</code>。它不包含工作循环，因此在执行 <code>OnStart</code> 中的两条指令后将立即终止。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#property service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ENUM_PROGRAM_TYPE)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_PROGRAM_TYPE)));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ENUM_LICENSE_TYPE)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_LICENSE_TYPE)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了简化其启动，即消除在终端中通过导航器的上下文菜单创建服务实例并运行它的需要，建议使用调试器：只需在 MetaEditor 中打开源代码，然后执行命令“调试” -&gt; “在真实数据上启动”（F5 或工具栏中的按钮）。</p><p>我们应该会得到以下日志条目：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>EnvType (debug)        PROGRAM_SERVICE</span></span>
<span class="line"><span>EnvType (debug)        LICENSE_FREE</span></span></code></pre></div><p>在这里，你可以清楚地看到程序类型是服务，并且实际上没有许可证（免费使用）。</p><h2 id="终端和程序操作模式" tabindex="-1">终端和程序操作模式 <a class="header-anchor" href="#终端和程序操作模式" aria-label="Permalink to &quot;终端和程序操作模式&quot;">​</a></h2><p>MetaTrader 5 环境为交易与编程交叉领域的各种任务提供了解决方案，这就需要终端本身以及特定程序具备多种操作模式。</p><p>使用 MQL5 API，你可以区分常规的在线活动和回测，区分源代码调试（以识别潜在错误）和性能分析（查找代码中的瓶颈），以及区分终端的本地副本和云端副本（MetaTrader VPS）。</p><p>这些模式由标志来描述，每个标志都包含一个布尔类型的值：<code>true</code> 或 <code>false</code>。</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>MQL_DEBUG</code></td><td>程序在调试模式下运行</td></tr><tr><td><code>MQL_PROFILER</code></td><td>程序在代码分析模式下工作</td></tr><tr><td><code>MQL_TESTER</code></td><td>程序在测试器中工作</td></tr><tr><td><code>MQL_FORWARD</code></td><td>程序在正向测试过程中执行</td></tr><tr><td><code>MQL_OPTIMIZATION</code></td><td>程序在优化过程中运行</td></tr><tr><td><code>MQL_VISUAL_MODE</code></td><td>程序在可视化测试模式下运行</td></tr><tr><td><code>MQL_FRAME_MODE</code></td><td>专家顾问在图表上以收集优化结果帧的模式执行</td></tr><tr><td><code>TERMINAL_VPS</code></td><td>终端在 MetaTrader 虚拟主机（MetaTrader VPS）虚拟服务器上工作</td></tr></tbody></table><p><code>MQL_FORWARD</code>、<code>MQL_OPTIMIZATION</code> 和 <code>MQL_VISUAL_MODE</code> 标志意味着 <code>MQL_TESTER</code> 标志已设置。</p><p>一些标志的两两组合是相互排斥的，即这些标志不能同时启用。</p><p>具体来说，<code>MQL_FRAME_MODE</code> 的存在排除了 <code>MQL_TESTER</code>，反之亦然。<code>MQL_OPTIMIZATION</code> 排除了 <code>MQL_VISUAL_MODE</code>，<code>MQL_PROFILER</code> 排除了 <code>MQL_DEBUG</code>。</p><p>我们将在专门介绍专家顾问以及部分介绍指标的章节中研究所有与测试相关的标志（<code>MQL_TESTER</code>、<code>MQL_VISUAL_MODE</code>）。所有与专家顾问优化相关的内容（<code>MQL_OPTIMIZATION</code>、<code>MQL_FORWARD</code>、<code>MQL_FRAME_MODE</code>）将在单独的章节中介绍。</p><p>现在让我们以调试（<code>MQL_DEBUG</code>）和分析（<code>MQL_PROFILER</code>）模式为例，了解读取标志的原理。同时，让我们回顾一下如何从 MetaEditor 激活这些模式（详细信息，请参阅文档中的“调试”和“分析”部分）。</p><p>我们将使用 <code>EnvMode.mq5</code> 脚本。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_TESTER));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_DEBUG));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_PROFILER));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_VISUAL_MODE));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_OPTIMIZATION));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_FORWARD));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_FRAME_MODE));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在运行程序之前，你应该检查调试/分析设置。为此，在 MetaEditor 中，运行“工具” -&gt; “选项”命令，并检查“调试/分析”选项卡中的字段值。如果启用了“使用指定设置”选项，那么底层字段的值将影响程序将在其上启动的金融工具图表和时间框架。如果禁用该选项，将使用“市场报价”中的第一个金融工具和 H1 时间框架。</p><p>在这个阶段，选项的选择并不关键。</p><p>准备好后，使用“调试” -&gt; “在真实数据上启动”（F5）命令运行脚本。由于该脚本仅将请求的属性打印到日志中（并且我们不需要在其中设置断点），其执行将是瞬间的。如果需要逐步调试，我们可以在源代码的任何语句上设置断点（F9），脚本执行将在我们需要的任何时间段内冻结，从而可以在 MetaEditor 中研究所有变量的内容，并且还可以逐行（F10）沿着算法移动。</p><p>在 MetaTrader 5 日志（“专家”选项卡）中，我们将看到以下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>MQLInfoInteger(MQL_TESTER)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_DEBUG)=1 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_PROFILER)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_VISUAL_MODE)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_OPTIMIZATION)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_FORWARD)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_FRAME_MODE)=0 / ok</span></span></code></pre></div><p>除了 <code>MQL_DEBUG</code> 之外，所有模式的标志都被重置。</p><p>现在让我们从 MetaTrader 5 的导航器中运行相同的脚本（只需用鼠标将其拖动到任何图表上）。我们将得到几乎相同的一组标志，但这次 <code>MQL_DEBUG</code> 将等于 0（因为程序是以常规方式执行的，而不是在调试器下执行的）。</p><p>请注意，在调试模式下启动程序之前，会以特殊模式对其进行重新编译，此时会在可执行文件中添加允许调试的服务信息。这样的二进制文件比平常更大且运行更慢。因此，在调试完成后，在将其用于实际交易、转移给客户或上传到市场之前，应该使用“文件” -&gt; “编译”（F7）命令重新编译程序。</p><p>编译方法不会直接影响 <code>MQL_DEBUG</code> 属性。正如我们所看到的，程序的调试版本可以在没有调试器的终端中启动，在这种情况下 <code>MQL_DEBUG</code> 将被重置。有两个内置宏可用于确定编译方法：<code>_DEBUG</code> 和 <code>_RELEASE</code>（请参阅“预定义常量”部分）。它们是常量，而不是函数，因为这个属性在编译时就“硬编码”到程序中了，之后无法更改（与运行时环境不同）。</p><p>现在让我们在 MetaEditor 中执行“调试” -&gt; “在真实数据上开始分析”命令。当然，对这样一个简单的脚本进行分析没有特别的意义，但我们现在的任务是确保环境属性中的相应标志已打开。实际上，现在 <code>MQL_PROFILER</code> 对应的标志值为 1。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>MQLInfoInteger(MQL_TESTER)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_DEBUG)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_PROFILER)=1 / ok</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>在分析模式下启动程序之前，也会以另一种特殊模式对其进行重新编译，这种模式会在二进制文件中添加其他服务信息，这些信息对于测量指令执行速度是必要的。在分析分析器报告并修复瓶颈之后，应该以常规方式重新编译程序。</p><p>原则上，调试和分析既可以在线进行，也可以在测试器（<code>MQL_TESTER</code>）中基于历史数据进行，但测试器仅支持专家顾问和指标。因此，在脚本示例中不可能看到设置的 <code>MQL_TESTER</code> 或 <code>MQL_VISUAL_MODE</code> 标志。</p><p>如你所知，MetaTrader 5 允许以快速模式（无图表）和可视化模式（在单独的图表上）测试交易程序。正是在第二种情况下，<code>MQL_VISUAL_MODE</code> 属性将被启用。特别是，检查该属性是有意义的，以便在没有可视化的情况下禁用对图形对象的操作。</p><p>要在可视化模式下使用历史数据进行调试，必须首先在 MetaEditor 设置对话框中启用“在历史数据上使用可视化模式进行调试”选项。分析程序（指标）总是在可视化模式下进行测试。</p><p>请记住，在线调试对于交易专家顾问来说是不安全的。</p><h2 id="权限" tabindex="-1">权限 <a class="header-anchor" href="#权限" aria-label="Permalink to &quot;权限&quot;">​</a></h2><p>出于安全原因，MetaTrader 5 提供了限制 MQL 程序执行某些操作的功能。其中一些限制是两级的，也就是说，它们分别针对整个终端和特定程序进行设置。终端设置具有优先级，或者作为任何 MQL 程序设置的默认值。例如，交易者可以通过在 MetaTrader 5 设置对话框中勾选相应的复选框来禁用所有自动交易。在这种情况下，之前在特定交易机器人的对话框中设置的私人交易权限将失效。</p><p>在 MQL5 API 中，可以通过 <code>TerminalInfoInteger</code> 和 <code>MQLInfoInteger</code> 函数读取这些限制（或者相反，权限）。由于它们对 MQL 程序具有相同的影响，所以程序必须同样仔细地检查通用的和特定的禁止事项（以避免在尝试执行非法操作时产生错误）。因此，本节提供了不同级别所有选项的列表。</p><p>所有权限都是布尔标志，即它们存储的值为 <code>true</code> 或 <code>false</code>。</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>TERMINAL_DLLS_ALLOWED</code></td><td>使用 DLL 的权限</td></tr><tr><td><code>TERMINAL_TRADE_ALLOWED</code></td><td>在线自动交易的权限</td></tr><tr><td><code>TERMINAL_EMAIL_ENABLED</code></td><td>发送电子邮件的权限（必须在终端设置中指定 SMTP 服务器和登录信息）</td></tr><tr><td><code>TERMINAL_FTP_ENABLED</code></td><td>通过 FTP 将文件发送到指定服务器的权限（包括终端设置中指定的交易账户的报告）</td></tr><tr><td><code>TERMINAL_NOTIFICATIONS_ENABLED</code></td><td>向智能手机发送推送通知的权限</td></tr><tr><td><code>MQL_DLLS_ALLOWED</code></td><td>此程序使用 DLL 的权限</td></tr><tr><td><code>MQL_TRADE_ALLOWED</code></td><td>程序自动交易的权限</td></tr><tr><td><code>MQL_SIGNALS_ALLOWED</code></td><td>程序处理信号的权限</td></tr></tbody></table><p>终端级别使用 DLL 的权限意味着，当运行包含指向某个动态库链接的 MQL 程序时，其属性对话框中“依赖项”选项卡上的“启用 DLL 导入”标志将默认启用。如果在终端设置中清除了该标志，那么 MQL 程序属性中的该选项将默认禁用。在任何情况下，用户都必须为单个程序允许导入（脚本有一个例外情况，下面将讨论）。否则，程序将无法运行。</p><p>换句话说，<code>TERMINAL_DLLS_ALLOWED</code> 和 <code>MQL_DLLS_ALLOWED</code> 标志可以由不绑定 DLL 的程序检查，也可以由绑定 DLL 的程序检查，但对于这个程序，<code>MQL_DLLS_ALLOWED</code> 必须明确等于 <code>true</code>（因为它已经启动）。因此，对于需要 DLL 的软件系统，可能有必要提供一个独立的实用程序，该程序可以监视标志的状态，并在标志突然关闭时为用户显示诊断信息。例如，一个专家顾问可能需要一个使用 DLL 的指标。然后，在尝试加载该指标并获取其句柄之前，专家顾问可以检查 <code>TERMINAL_DLLS_ALLOWED</code> 标志，如果该标志被重置，则生成一个警告。</p><p>对于脚本，其行为略有不同，因为只有在源代码中存在 <code>#property script_show_inputs</code> 指令时，才会打开脚本设置对话框。如果不存在该指令，那么当终端设置中 <code>TERMINAL_DLLS_ALLOWED</code> 标志被重置时，对话框会出现（并且用户必须启用该标志，脚本才能工作）。当通用标志 <code>TERMINAL_DLLS_ALLOWED</code> 被启用时，脚本无需用户确认即可运行，即 <code>MQL_DLLS_ALLOWED</code> 的值被假定为 <code>true</code>（根据 <code>TERMINAL_DLLS_ALLOWED</code>）。</p><p>在测试器中工作时，<code>TERMINAL_TRADE_ALLOWED</code> 和 <code>MQL_TRADE_ALLOWED</code> 标志始终等于 <code>true</code>。然而，在指标中，无论这些标志如何，对所有交易函数的访问都是被禁止的。测试器不允许测试依赖 DLL 的 MQL 程序。</p><p><code>TERMINAL_EMAIL_ENABLED</code>、<code>TERMINAL_FTP_ENABLED</code> 和 <code>TERMINAL_NOTIFICATIONS_ENABLED</code> 标志对于“网络函数”部分中描述的 <code>send mail</code>、<code>SendFTP</code> 和 <code>send notification</code> 函数至关重要。<code>MQL_SIGNALS_ALLOWED</code> 标志会影响一组管理 <code>mql5.com</code> 交易信号订阅的函数的可用性（本书不讨论）。它的状态对应于 MQL 程序属性“常规”选项卡中的“允许更改信号设置”选项。</p><p>由于检查某些属性需要额外的工作，所以将这些标志包装在一个类中是有意义的，该类在其方法中隐藏了对各种系统函数的多次调用。这一点更加必要，因为一些权限并不限于上述选项。例如，交易权限不仅可以在终端或 MQL 程序级别设置（或取消），还可以针对单个金融工具进行设置——根据你的经纪商和交易所交易时段的规定。因此，在这一步，我们将展示 <code>Permissions</code> 类的草案，它目前只包含我们熟悉的元素，然后我们将针对特定的应用 API 对其进行改进。</p><p>由于这个类充当程序层，程序员不必记住哪些权限是为 <code>TerminalInfo</code> 函数定义的，哪些是为 <code>MqlInfo</code> 函数定义的。</p><p>源代码位于 <code>EnvPermissions.mq5</code> 文件中。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class Permissions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isTradeEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string symbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datetime session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 待办事项：将补充对交易品种和交易时段的应用检查</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_TRADE_ALLOWED))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_TRADE_ALLOWED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isDllsEnabledByDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_DLLS_ALLOWED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isDllsEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_DLLS_ALLOWED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmailEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_EMAIL_ENABLED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isFtpEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_FTP_ENABLED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPushEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_NOTIFICATIONS_ENABLED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isSignalsEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_SIGNALS_ALLOWED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>所有类方法都是静态的，并在 <code>OnStart</code> 中调用。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Permissions::isTradeEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Permissions::isDllsEnabledByDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Permissions::isDllsEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Permissions::isEmailEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Permissions::isPushEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Permissions::isSignalsEnabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>下面显示了生成的日志示例。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>TerminalInfoInteger(TERMINAL_TRADE_ALLOWED)=1 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_TRADE_ALLOWED)=1 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_DLLS_ALLOWED)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_DLLS_ALLOWED)=0 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_EMAIL_ENABLED)=0 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_NOTIFICATIONS_ENABLED)=0 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_SIGNALS_ALLOWED)=0 / ok</span></span></code></pre></div><p>为了自学，该脚本具有内置（但已注释掉）的连接系统 DLL 以读取 Windows 剪贴板内容的功能。我们将在本书的第七部分“库”章节中考虑库的创建和使用，特别是 <code>#import</code> 指令。</p><p>假设在终端中禁用了全局 DLL 导入选项（出于安全原因，这是推荐的设置）。那么，如果脚本连接了 DLL，则只有在其单独的设置对话框中允许导入，才能运行该脚本，结果 <code>MQLInfoInteger(MQL_DLLS_ALLOWED)</code> 将返回 1（<code>true</code>）。如果给予了 DLL 的全局权限，那么 <code>TerminalInfoInteger(TERMINAL_DLLS_ALLOWED)=1</code>，并且 <code>MQL_DLLS_ALLOWED</code> 将继承该值。</p><h2 id="检查网络连接" tabindex="-1">检查网络连接 <a class="header-anchor" href="#检查网络连接" aria-label="Permalink to &quot;检查网络连接&quot;">​</a></h2><p>如你所知，MetaTrader 5 平台是一个分布式系统，包含多个环节。除了客户端终端和经纪商服务器外，它还包括 MQL5 社区、市场、云服务等等。实际上，客户端部分也是分布式的，由终端和测试代理组成，这些测试代理可以部署在本地网络的多台计算机上。在这种情况下，任何环节之间的连接都有可能因为这样或那样的原因而中断。尽管 MetaTrader 5 基础设施试图自动恢复其功能，但并不总是能够迅速做到这一点。</p><p>因此，在 MQL 程序中，应该考虑到连接中断的可能性。MQL5 API 允许你控制最重要的连接：与交易服务器和 MQL5 社区的连接。<code>TerminalInfoInteger</code> 中有以下可用属性：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>TERMINAL_CONNECTED</code></td><td>与交易服务器的连接状态</td></tr><tr><td><code>TERMINAL_PING_LAST</code></td><td>上次已知到交易服务器的 ping 值（以微秒为单位）</td></tr><tr><td><code>TERMINAL_COMMUNITY_ACCOUNT</code></td><td>终端中是否存在 MQL5.community 的授权数据</td></tr><tr><td><code>TERMINAL_COMMUNITY_CONNECTION</code></td><td>与 MQL5.community 的连接状态</td></tr><tr><td><code>TERMINAL_MQID</code></td><td>是否存在用于发送推送通知的 MetaQuotes ID</td></tr></tbody></table><p>除了 <code>TERMINAL_PING_LAST</code> 之外，所有属性都是布尔标志。<code>TERMINAL_PING_LAST</code> 包含一个 <code>int</code> 类型的值。</p><p>除了连接状态之外，MQL 程序通常还需要确保其拥有的数据是最新的。特别是，已检查的 <code>TERMINAL_CONNECTED</code> 标志并不意味着你感兴趣的报价已经与服务器同步。为此，你需要额外检查 <code>SymbolIsSynchronized</code> 或 <code>SeriesInfoInteger(..., SERIES_SYNCHRONIZED)</code>。这些功能将在关于时间序列的章节中讨论。</p><p><code>TerminalInfoDouble</code> 函数支持另一个有趣的属性：<code>TERMINAL_RETRANSMISSION</code>。它表示在这台计算机上所有正在运行的应用程序和服务中，TCP/IP 协议重传的网络数据包的百分比。即使在最快且配置最恰当的网络上，有时也会出现数据包丢失的情况，结果就是接收方和发送方之间不会有数据包送达的确认。在这种情况下，丢失的数据包会被重传。终端本身并不计算 <code>TERMINAL_RETRANSMISSION</code> 指标，而是每分钟在操作系统中请求一次该指标。</p><p>这个指标的数值较高可能表明存在外部问题（互联网连接、你的网络服务提供商、本地网络或计算机问题），这可能会降低终端连接的质量。</p><p>如果确认与社区有连接（<code>TERMINAL_COMMUNITY_CONNECTION</code>），MQL 程序可以通过调用 <code>TerminalInfoDouble(TERMINAL_COMMUNITY_BALANCE)</code> 查询用户的当前余额。这允许你使用对付费交易信号的自动订阅（API 文档可在 mql5.com 网站上获取）。</p><p>让我们使用脚本 <code>EnvConnection.mq5</code> 检查列出的属性：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_CONNECTED));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_PING_LAST));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_COMMUNITY_ACCOUNT));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_COMMUNITY_CONNECTION));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MQID));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_RETRANSMISSION));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_COMMUNITY_BALANCE));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是一个日志示例（值将与你的设置匹配）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>TerminalInfoInteger(TERMINAL_CONNECTED)=1 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_PING_LAST)=49082 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_COMMUNITY_ACCOUNT)=0 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_COMMUNITY_CONNECTION)=0 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_MQID)=0 / ok</span></span>
<span class="line"><span>TerminalInfoDouble(TERMINAL_RETRANSMISSION)=0.0 / ok</span></span>
<span class="line"><span>TerminalInfoDouble(TERMINAL_COMMUNITY_BALANCE)=0.0 / ok</span></span></code></pre></div><h2 id="计算资源-内存、磁盘和-cpu" tabindex="-1">计算资源：内存、磁盘和 CPU <a class="header-anchor" href="#计算资源-内存、磁盘和-cpu" aria-label="Permalink to &quot;计算资源：内存、磁盘和 CPU&quot;">​</a></h2><p>与所有程序一样，MQL 应用程序会消耗计算机资源，包括内存、磁盘空间和 CPU。考虑到终端本身就是资源密集型的（特别是因为可能需要下载多个具有较长历史数据的金融工具的报价和报价数据点），有时有必要分析和控制可用资源接近极限的情况。</p><p>MQL5 API 提供了几个属性，使你能够估计可达到的最大资源量以及已消耗的资源量。这些属性汇总在 <code>ENUM_MQL_INFO_INTEGER</code> 和 <code>ENUM_TERMINAL_INFO_INTEGER</code> 枚举中。</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>MQL_MEMORY_LIMIT</code></td><td>MQL 程序可使用的最大动态内存量（单位：Kb）</td></tr><tr><td><code>MQL_MEMORY_USED</code></td><td>MQL 程序已使用的内存量（单位：Mb）</td></tr><tr><td><code>MQL_HANDLES_USED</code></td><td>类对象的数量</td></tr><tr><td><code>TERMINAL_MEMORY_PHYSICAL</code></td><td>系统中的物理内存量（单位：Mb）</td></tr><tr><td><code>TERMINAL_MEMORY_TOTAL</code></td><td>终端（代理）进程可用的内存（物理内存 + 交换文件，即虚拟内存）量（单位：Mb）</td></tr><tr><td><code>TERMINAL_MEMORY_AVAILABLE</code></td><td>终端（代理）进程的可用空闲内存量（单位：Mb），是 <code>TERMINAL_MEMORY_TOTAL</code> 的一部分</td></tr><tr><td><code>TERMINAL_MEMORY_USED</code></td><td>终端（代理）已使用的内存量（单位：Mb），是 <code>TERMINAL_MEMORY_TOTAL</code> 的一部分</td></tr><tr><td><code>TERMINAL_DISK_SPACE</code></td><td>考虑到终端（代理）的 <code>MQL5/Files</code> 文件夹可能存在的配额后的可用磁盘空间量（单位：Mb）</td></tr><tr><td><code>TERMINAL_CPU_CORES</code></td><td>系统中的处理器核心数量</td></tr><tr><td><code>TERMINAL_OPENCL_SUPPORT</code></td><td>支持的 OpenCL 版本，<code>0x00010002 = 1.2</code>；“0”表示不支持 OpenCL</td></tr></tbody></table><p>MQL 程序可用的最大内存量由 <code>MQL_MEMORY_LIMIT</code> 属性描述。这是列出的唯一使用千字节（Kb）为单位的属性。所有其他属性都以兆字节（Mb）为单位返回。通常，<code>MQL_MEMORY_LIMIT</code> 等于 <code>TERMINAL_MEMORY_TOTAL</code>，即默认情况下，计算机上的所有可用内存都可以分配给一个 MQL 程序。然而，终端，特别是其针对 MetaTrader VPS 的云端实现，以及云端测试代理可能会限制单个 MQL 程序的内存。那么 <code>MQL_MEMORY_LIMIT</code> 将显著小于 <code>TERMINAL_MEMORY_TOTAL</code>。</p><p>由于 Windows 通常会创建一个大小与物理内存（RAM）相等的交换文件，所以 <code>TERMINAL_MEMORY_TOTAL</code> 属性的值可能是 <code>TERMINAL_MEMORY_PHYSICAL</code> 的两倍。</p><p>所有可用的虚拟内存 <code>TERMINAL_MEMORY_TOTAL</code> 分为已使用的（<code>TERMINAL_MEMORY_USED</code>）和仍空闲的（<code>TERMINAL_MEMORY_AVAILABLE</code>）内存。</p><p>本书附带了脚本 <code>EnvProvision.mq5</code>，它会将所有指定的属性记录到日志中。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_MEMORY_LIMIT));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Kb!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_MEMORY_USED));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MEMORY_PHYSICAL));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MEMORY_TOTAL));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MEMORY_AVAILABLE));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MEMORY_USED));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_DISK_SPACE));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_CPU_CORES));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_OPENCL_SUPPORT));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   uchar array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ArrayResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 分配 10 Mb</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_MEMORY_USED));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MEMORY_AVAILABLE));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MEMORY_USED));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在初始输出属性之后，我们为数组分配 10 Mb 的内存，然后再次检查内存情况。下面是一个结果示例（你会有自己的值）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>MQLInfoInteger(MQL_MEMORY_LIMIT)=8388608 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_MEMORY_USED)=1 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_MEMORY_PHYSICAL)=4095 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_MEMORY_TOTAL)=8190 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_MEMORY_AVAILABLE)=7842 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_MEMORY_USED)=348 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_DISK_SPACE)=4528 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_CPU_CORES)=4 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_OPENCL_SUPPORT)=0 / ok</span></span>
<span class="line"><span>ArrayResize(array,1024*1024*10)=10485760 / ok</span></span>
<span class="line"><span>MQLInfoInteger(MQL_MEMORY_USED)=11 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_MEMORY_AVAILABLE)=7837 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_MEMORY_USED)=353 / ok</span></span></code></pre></div><p>请注意，总虚拟内存（8190）是物理内存（4095）的两倍。脚本可用的内存量为 8388608 Kb，几乎等于 8190 Mb 的全部内存。空闲内存（7842）和已用系统内存（348）相加也等于 8190。</p><p>如果在为数组分配内存之前，MQL 程序占用了 1 Mb 的内存，那么在分配内存之后，它已经占用了 11 Mb。同时，终端占用的内存量仅增加了 5 Mb（从 348 到 353），因为预先保留了一些资源。</p><h2 id="屏幕规格" tabindex="-1">屏幕规格 <a class="header-anchor" href="#屏幕规格" aria-label="Permalink to &quot;屏幕规格&quot;">​</a></h2><p><code>TerminalInfoInteger</code> 函数提供的几个属性与计算机的视频子系统相关。</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>TERMINAL_SCREEN_DPI</code></td><td>输出到屏幕的信息分辨率，以每线性英寸的点数（DPI，Dots Per Inch）为单位进行测量</td></tr><tr><td><code>TERMINAL_SCREEN_LEFT</code></td><td>虚拟屏幕的左坐标</td></tr><tr><td><code>TERMINAL_SCREEN_TOP</code></td><td>虚拟屏幕的上坐标</td></tr><tr><td><code>TERMINAL_SCREEN_WIDTH</code></td><td>虚拟屏幕的宽度</td></tr><tr><td><code>TERMINAL_SCREEN_HEIGHT</code></td><td>虚拟屏幕的高度</td></tr><tr><td><code>TERMINAL_LEFT</code></td><td>终端相对于虚拟屏幕的左坐标</td></tr><tr><td><code>TERMINAL_TOP</code></td><td>终端相对于虚拟屏幕的上坐标</td></tr><tr><td><code>TERMINAL_RIGHT</code></td><td>终端相对于虚拟屏幕的右坐标</td></tr><tr><td><code>TERMINAL_BOTTOM</code></td><td>终端相对于虚拟屏幕的下坐标</td></tr></tbody></table><p>了解 <code>TERMINAL_SCREEN_DPI</code> 参数后，你可以设置图形对象的尺寸，以便它们在不同分辨率的显示器上看起来相同。例如，如果你想创建一个可见尺寸为 X 厘米的按钮，那么你可以使用以下函数将其指定为屏幕点数（像素）：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cm2pixels</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inch2cm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.54</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 1 英寸等于 2.54 厘米</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inch2cm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_DPI));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>虚拟屏幕是所有显示器的边界框。如果系统中有多个显示器，并且它们的排列顺序不是严格从左到右，那么虚拟屏幕的左坐标可能为负，并且中心（参考点）将在两个显示器的边界上（在主显示器的左上角）。</p><p>多个显示器组成的虚拟屏幕</p><p>多个显示器组成的虚拟屏幕</p><p>如果系统中只有一个显示器，那么虚拟屏幕的大小完全与其对应。</p><p>终端坐标不考虑其当前是否可能处于最大化状态（也就是说，如果主窗口已最大化，这些属性将返回未最大化时的大小，尽管终端已扩展到整个显示器）。</p><p>在 <code>EnvScreen.mq5</code> 脚本中，检查读取屏幕属性的功能。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_DPI));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_LEFT));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_TOP));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_WIDTH));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_HEIGHT));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_LEFT));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_TOP));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_RIGHT));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_BOTTOM));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是生成的日志条目的示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>TerminalInfoInteger(TERMINAL_SCREEN_DPI)=96 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_SCREEN_LEFT)=0 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_SCREEN_TOP)=0 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_SCREEN_WIDTH)=1440 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_SCREEN_HEIGHT)=900 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_LEFT)=126 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_TOP)=41 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_RIGHT)=1334 / ok</span></span>
<span class="line"><span>TerminalInfoInteger(TERMINAL_BOTTOM)=836 / ok</span></span></code></pre></div><p>除了屏幕和终端窗口的一般尺寸外，MQL 程序还经常需要分析图表（终端内的子窗口）的当前尺寸。为此，有一组特殊的函数（特别是 <code>ChartGetInteger</code>），我们将在“图表”部分讨论这些函数。</p><h2 id="终端和程序的字符串属性" tabindex="-1">终端和程序的字符串属性 <a class="header-anchor" href="#终端和程序的字符串属性" aria-label="Permalink to &quot;终端和程序的字符串属性&quot;">​</a></h2><p>可以使用 <code>MQLInfoString</code> 和 <code>TerminalInfoString</code> 函数来了解终端和 MQL 程序的一些字符串属性。</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>MQL_PROGRAM_NAME</code></td><td>正在运行的 MQL 程序的名称</td></tr><tr><td><code>MQL_PROGRAM_PATH</code></td><td>正在运行的 MQL 程序的路径</td></tr><tr><td><code>TERMINAL_LANGUAGE</code></td><td>终端语言</td></tr><tr><td><code>TERMINAL_COMPANY</code></td><td>公司（经纪商）的名称</td></tr><tr><td><code>TERMINAL_NAME</code></td><td>终端名称</td></tr><tr><td><code>TERMINAL_PATH</code></td><td>启动终端的文件夹</td></tr><tr><td><code>TERMINAL_DATA_PATH</code></td><td>存储终端数据的文件夹</td></tr><tr><td><code>TERMINAL_COMMONDATA_PATH</code></td><td>安装在计算机上的所有客户端终端的共享文件夹</td></tr></tbody></table><p>正在运行的程序名称（<code>MQL_PROGRAM_NAME</code>）通常与主模块（<code>.mq5</code> 文件）的名称一致，但也可能不同。特别是，如果你的源代码编译成一个库，并且该库被导入到另一个 MQL 程序（专家顾问、指标、脚本或服务）中，那么 <code>MQL_PROGRAM_NAME</code> 属性将返回主程序的名称，而不是库的名称（库不是一个可以独立运行的程序）。</p><p>我们在“处理文件”部分讨论了工作终端文件夹的布局。使用列出的这些属性，你可以了解终端安装在何处（<code>TERMINAL_PATH</code>），以及找到当前终端实例的工作数据（<code>TERMINAL_DATA_PATH</code>）和所有实例的工作数据（<code>TERMINAL_COMMONDATA_PATH</code>）。</p><p>一个简单的脚本 <code>EnvDescription.mq5</code> 将记录所有这些属性。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_PROGRAM_NAME));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_PROGRAM_PATH));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_LANGUAGE));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_COMPANY));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_NAME));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_PATH));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_DATA_PATH));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_COMMONDATA_PATH));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是一个示例结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>MQLInfoString(MQL_PROGRAM_NAME)=EnvDescription / ok</span></span>
<span class="line"><span>MQLInfoString(MQL_PROGRAM_PATH)= »</span></span>
<span class="line"><span>» C:\\Program Files\\MT5East\\MQL5\\Scripts\\MQL5Book\\p4\\EnvDescription.ex5 / ok</span></span>
<span class="line"><span>TerminalInfoString(TERMINAL_LANGUAGE)=Russian / ok</span></span>
<span class="line"><span>TerminalInfoString(TERMINAL_COMPANY)=MetaQuotes Software Corp. / ok</span></span>
<span class="line"><span>TerminalInfoString(TERMINAL_NAME)=MetaTrader 5 / ok</span></span>
<span class="line"><span>TerminalInfoString(TERMINAL_PATH)=C:\\Program Files\\MT5East / ok</span></span>
<span class="line"><span>TerminalInfoString(TERMINAL_DATA_PATH)=C:\\Program Files\\MT5East / ok</span></span>
<span class="line"><span>TerminalInfoString(TERMINAL_COMMONDATA_PATH)= »</span></span>
<span class="line"><span>» C:\\Users\\User\\AppData\\Roaming\\MetaQuotes\\Terminal\\Common / ok</span></span></code></pre></div><p>终端的界面语言不仅可以作为 <code>TERMINAL_LANGUAGE</code> 属性中的字符串来查找，还可以作为代码页编号来查找（请参阅下一部分中的 <code>TERMINAL_CODEPAGE</code> 属性）。</p><h2 id="自定义属性-k线数量限制和界面语言" tabindex="-1">自定义属性：K线数量限制和界面语言 <a class="header-anchor" href="#自定义属性-k线数量限制和界面语言" aria-label="Permalink to &quot;自定义属性：K线数量限制和界面语言&quot;">​</a></h2><p>在终端的属性中，有两个特殊属性用户可以通过交互方式进行更改。其中包括每个图表上默认显示的最大 K 线数量（它对应于“选项”对话框中“窗口中最大 K 线数”字段的值），以及界面语言（通过“查看” -&gt; “语言”命令进行选择）。</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>TERMINAL_MAXBARS</code></td><td>图表上的最大 K 线数量</td></tr><tr><td><code>TERMINAL_CODEPAGE</code></td><td>客户端终端中所选语言的代码页编号</td></tr></tbody></table><p>请注意，<code>TERMINAL_MAXBARS</code> 的值设置了显示 K 线的上限，但实际上，如果在任何时间框架下可用的报价历史深度不足，K 线的实际数量可能会更少。另一方面，历史数据的长度也可能超过指定的 <code>TERMINAL_MAXBARS</code> 限制。然后，你可以使用时间序列属性组中的函数 <code>SeriesInfoInteger</code> 并传入 <code>SERIES_BARS_COUNT</code> 属性来查找潜在可用的 K 线数量。请注意，<code>TERMINAL_MAXBARS</code> 的值会直接影响随机存取存储器（RAM）的消耗。</p><h2 id="将程序绑定到运行时属性" tabindex="-1">将程序绑定到运行时属性 <a class="header-anchor" href="#将程序绑定到运行时属性" aria-label="Permalink to &quot;将程序绑定到运行时属性&quot;">​</a></h2><p>作为处理前面几节所描述属性的一个示例，让我们考虑一个常见的任务，即将一个MQL程序绑定到硬件环境上，以防止其被复制。当程序通过MQL5市场分发时，这种绑定由该服务本身提供。然而，如果程序是定制开发的，它可以绑定到账号号码、客户名称或者终端（计算机）的可用属性上。第一种方式并不总是方便，因为许多交易者有多个真实账户（可能来自不同的经纪商），更不用说有效期有限的模拟账户了。第二种方式可能是虚构的或者过于普通。因此，我们将实现一个将程序绑定到选定的一组环境属性的原型算法。更严谨的安全方案可能会使用一个DLL，并直接从Windows读取设备硬件标签，但不是每个客户都会同意运行潜在不安全的库。</p><p>我们的保护方案在脚本 <code>EnvSignature.mq5</code> 中呈现。该脚本从给定的环境属性计算哈希值，并基于这些属性创建一个唯一的签名（印记）。</p><p>哈希是对任意信息的一种特殊处理，其结果是创建一个具有以下特征的新数据块（这些特征由所使用的算法保证）：</p><ul><li>两个原始数据集的哈希值匹配，几乎100%意味着这些数据是相同的（随机匹配的概率可以忽略不计）。</li><li>如果原始数据发生变化，它们的哈希值也会改变。</li><li>除非对所有可能的初始值进行完全枚举（如果初始值的大小增加且没有关于其结构的信息，在可预见的未来这个问题是无法解决的），否则不可能从哈希值数学地恢复原始数据（原始数据将保持秘密）。</li><li>哈希值的大小是固定的（不取决于初始数据的数量）。</li></ul><p>假设其中一个环境属性由字符串描述：“TERMINAL_LANGUAGE=German”。可以使用如下简单语句（简化版）获取它：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_LANGUAGE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_LANGUAGE);</span></span></code></pre></div><p>实际的语言将与设置匹配。有了一个假设的哈希函数，我们就可以计算签名。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(language);</span></span></code></pre></div><p>当有更多属性时，我们只需对所有属性重复这个过程，或者从组合后的字符串中请求一个哈希值（目前这是伪代码，不是实际程序的一部分）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string properties</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按你希望的方式填充属性行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string signature;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArraySize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(properties); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signature);</span></span></code></pre></div><p>用户可以将接收到的签名报告给程序开发者，开发者会以一种特殊的方式对其进行 “签名”，即收到一个只适用于这个签名的验证字符串。这个签名也是基于哈希计算的，并且需要知道一些只有开发者知道并硬编码到程序中的秘密（密码短语）（用于验证阶段）。</p><p>开发者会将验证字符串传递给用户，然后用户可以通过在参数中指定这个字符串来运行程序。</p><p>当没有验证字符串而启动程序时，程序应该为当前环境生成一个新的签名，将其打印到日志中，然后退出（这些信息应该传递给开发者）。如果验证字符串无效，程序应该显示一条错误消息并退出。</p><p>可以为开发者本身提供几种启动模式：有签名但没有验证字符串（用于生成验证字符串），或者有签名和验证字符串（此时程序将对签名重新签名，并将其与指定的验证字符串进行比较，只是为了检查）。</p><p>让我们评估一下这种保护的选择性如何。毕竟，这里的绑定并不是绑定到任何唯一标识符上。</p><p>下表提供了关于两个特征的统计数据：屏幕大小和内存。显然，这些值会随着时间变化，但大致的分布情况将保持不变：一些典型的值会是最常见的，而一些 “新的” 先进的和 “旧的” 正在淘汰的值将构成逐渐减少的 “尾部”。</p><table tabindex="0"><thead><tr><th>屏幕</th><th>比例</th></tr></thead><tbody><tr><td>1920x1080</td><td>21%</td></tr><tr><td>1536x864</td><td>7%</td></tr><tr><td>1440x900</td><td>5%</td></tr><tr><td>1366x768</td><td>10%</td></tr><tr><td>800x600</td><td>4%</td></tr></tbody></table><table tabindex="0"><thead><tr><th>内存</th><th>4Gb</th><th>8Gb</th><th>16Gb</th><th>32Gb</th><th>64Gb</th></tr></thead><tbody><tr><td>比例</td><td>20%</td><td>20%</td><td>15%</td><td>10%</td><td>5%</td></tr><tr><td></td><td>4.20</td><td>4.20</td><td>3.15</td><td>2.10</td><td>1.05</td></tr><tr><td></td><td>1.40</td><td>1.40</td><td>1.05</td><td>0.70</td><td>0.35</td></tr><tr><td></td><td>1.00</td><td>1.00</td><td>0.75</td><td>0.50</td><td>0.25</td></tr><tr><td></td><td>2.0</td><td>2.0</td><td>1.5</td><td>1.0</td><td>0.5</td></tr><tr><td></td><td>0.8</td><td>0.8</td><td>0.6</td><td>0.4</td><td>0.2</td></tr></tbody></table><p>请注意那些值最大的单元格，因为它们意味着相同的签名（除非我们在其中引入一个随机元素，这将在下面讨论）。在这种情况下，左上角的两种特征组合最有可能，每种占4.2%。但这些只是两个特征。如果在评估的环境中添加界面语言、时区、核心数量和工作数据路径（最好是共享的，因为它包含Windows用户名），那么潜在匹配的数量将明显减少。</p><p>对于哈希计算，我们使用内置的 <code>CryptEncode</code> 函数（它将在密码学部分进行描述），该函数支持SHA256哈希方法。正如其名称所示，它生成一个256位长的哈希值，即32字节。如果我们需要向用户展示它，那么我们会将其转换为十六进制表示的文本，得到一个64个字符长的字符串。</p><p>为了使签名更短，我们将使用Base64编码对其进行转换（<code>CryptEncode</code> 函数及其对应函数 <code>CryptDecode</code> 也支持Base64编码），这将得到一个44个字符长的字符串。与单向哈希操作不同，Base64编码是可逆的，即可以从它恢复原始数据。</p><p>主要操作由 <code>EnvSignature</code> 类实现。它定义了一个数据字符串，该字符串应该累积描述环境的某些片段。公共接口由几个重载版本的 <code>append</code> 函数组成，用于添加带有环境属性的字符串。本质上，它们使用由虚拟 <code>pepper</code> 方法返回的一些抽象元素作为链接，将请求的属性名称及其值连接起来。派生类将把它定义为一个特定的字符串（但它可以为空）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class EnvSignature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">private:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">protected:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   virtual string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pepper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_TERMINAL_INFO_STRING e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pepper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerminalInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_MQL_INFO_STRING e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pepper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MQLInfoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_TERMINAL_INFO_INTEGER e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pepper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_MQL_INFO_INTEGER e)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pepper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        +</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MQLInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>为了向对象添加任意字符串，有一个通用方法 <code>append</code>，上述方法中会调用它。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>开发者可以选择向哈希数据中添加所谓的 “盐”。这是一个包含随机生成数据的数组，它进一步增加了哈希反转的难度。即使环境保持不变，每次生成的签名也会与之前的不同。此功能的实现以及其他更具体的保护方面（如使用对称加密和动态计算秘密）留作独立研究。</p><p>由于环境由已知的属性组成（其列表受MQL5 API常量限制），并且并非所有属性都足够唯一，正如我们所计算的，如果不使用 “盐”，我们的保护机制可能会为不同用户生成相同的签名。如果发生许可证泄露，签名匹配将无法识别泄露源。</p><p>因此，你可以通过为每个客户更改哈希前呈现属性的方法来提高保护的有效性。当然，该方法本身不应被披露。在考虑的示例中，这意味着更改 <code>pepper</code> 方法的内容并重新编译产品。这可能成本较高，但它允许避免使用随机 “盐”。</p><p>填充好属性字符串后，我们可以生成一个签名。这是通过 <code>emit</code> 方法完成的。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uchar pack</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), pack, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), CP_UTF8) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uchar key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CryptEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CRYPT_HASH_SHA256, pack, key, result) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hash bytes:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ArrayPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uchar text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      CryptEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CRYPT_BASE64, result, key, text);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CharArrayToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>该方法将某个秘密（仅开发者知道且位于程序内部的字节序列）添加到数据中，并计算合并字符串的哈希值。秘密是从虚拟 <code>secret</code> 方法中获取的，派生类也将定义该方法。</p><p>得到的带有哈希值的字节数组使用Base64编码成字符串。</p><p>现在是最重要的类函数：<code>check</code>。正是这个函数实现了开发者的签名并检查用户的签名。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">validation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uchar bytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringToCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), bytes, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sig) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), CP_UTF8);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uchar key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CryptEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CRYPT_HASH_SHA256, bytes, key, result1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        WARNING</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        以下代码仅应存在于开发者工具中。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        提供给用户的程序在编译时必须不包含此if语句。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      #ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> I_AM_DEVELOPER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(validation) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CryptEncode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CRYPT_BASE64, result1, key, result2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         validation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CharArrayToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result2);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      #endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      uchar values</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 需要精确的长度以避免附加终止符&#39;0&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringToCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(validation, values, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(validation)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CryptDecode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CRYPT_BASE64, values, key, result2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayCompare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result1, result2) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>在正常操作（对于用户）期间，该方法从接收到的签名（补充了秘密）计算哈希值，并将其与验证字符串中的值进行比较（必须首先将其从Base64解码为哈希的原始二进制表示）。如果两个哈希值匹配，验证成功：验证字符串与属性集匹配。显然，空的验证字符串（或随机输入的字符串）将无法通过测试。</p><p>在开发者的机器上，签名工具的源代码中必须定义 <code>I_AM_DEVELOPER</code> 宏，这会导致对空验证字符串的处理方式不同。在这种情况下，得到的哈希值会进行Base64编码，并且这个字符串会通过 <code>validation</code> 参数传出。这样，该工具将能够向开发者显示给定签名的现成验证字符串。</p><p>要创建一个对象，需要一个特定的派生类，该类定义带有秘密和 <code>pepper</code> 的字符串。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: 将宏更改为你自己的一组随机字节</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PROGRAM_SPECIFIC_SECRET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;PROGRAM-SPECIFIC-SECRET&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: 选择你要用于连接名称&#39;=&#39;值对的字符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> INSTANCE_SPECIFIC_PEPPER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;=&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 为演示选择了明显的单个符号</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: 以下宏在实际产品中需要禁用，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          它应仅存在于签名工具中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> I_AM_DEVELOPER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> I_AM_DEVELOPER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> INPUT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> INPUT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">INPUT string Signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">INPUT string Secret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PROGRAM_SPECIFIC_SECRET;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">INPUT string Pepper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> INSTANCE_SPECIFIC_PEPPER;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class MyEnvSignature : public EnvSignature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">protected:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   virtual string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">secret</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Secret;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   virtual string </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pepper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() override</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pepper;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>让我们快速选择一些属性来填充签名。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FillEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EnvSignature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 顺序不重要，你可以混合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_LANGUAGE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_COMMONDATA_PATH);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_CPU_CORES);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_MEMORY_PHYSICAL);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_DPI);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_WIDTH);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_SCREEN_HEIGHT);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TERMINAL_VPS);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MQL_PROGRAM_TYPE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在一切准备就绪，可以在 <code>OnStart</code> 函数中测试我们的保护方案了。但首先，让我们看一下输入变量。由于相同的程序将编译成两个版本，一个给最终用户，一个给开发者，所以有两组输入变量：一组用于用户输入注册数据，一组用于根据开发者的签名生成这些数据。上面已经使用 <code>INPUT</code> 宏描述了供开发者使用的输入变量。用户只能使用验证字符串。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input string Validation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>当字符串为空时，程序将收集环境数据，生成一个新的签名，并将其打印到日志中。由于对有用代码的访问尚未得到确认，脚本的工作到此结束。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MyEnvSignature env;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string signature;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Signature) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // ... 这里将是作者要签名的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FillEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Validation) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Validation string from developer is required to run this script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Environment Signature is generated for current state...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Signature:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, signature);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // ... 在此处检查验证字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The script is validated and running normally&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ... 实际工作代码在此处</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果变量 <code>Validation</code> 已填充，我们检查它是否与签名相符，如果不相符则终止工作。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Validation) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      validation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Validation;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 需要一个非const参数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accessGranted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Signature, validation);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accessGranted)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wrong validation string, terminating&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The script is validated and running normally&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ... 实际工作代码在此处</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果没有差异，算法将继续执行程序的工作代码。</p><p>在开发者这边（在使用 <code>I_AM_DEVELOPER</code> 宏构建的程序版本中），可以引入一个签名。我们使用签名恢复 <code>MyEnvSignature</code> 对象的状态，并计算验证字符串。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Signature) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      #ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> I_AM_DEVELOPER</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Validation) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         string validation;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Signature, validation))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Validation:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, validation);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      signature </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Signature; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      #endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>开发者不仅可以指定签名，还可以验证它：在这种情况下，代码执行将以用户模式继续（用于调试目的）。</p><p>如果你愿意，可以模拟环境的变化，例如，如下所示：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      FillEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(env);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 人为地使环境发生变化（添加一个时区）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // env.append(&quot;Dummy&quot; + (string)(TimeGMTOffset() - TimeDaylightSavings()));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signature)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Signature and environment mismatch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span></code></pre></div><p>让我们看一些测试日志。</p><p>当首次运行 <code>EnvSignature.mq5</code> 脚本时，“用户” 将看到类似以下的日志（由于环境差异，值会有所不同）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Hash bytes:</span></span>
<span class="line"><span>  4 249 194 161 242  28  43  60 180 195  54 254  97 223 144 247 216 103 238 245 244 22</span></span>
<span class="line"><span>  4  7  68 101 253 248 134  27 102 202 153</span></span>
<span class="line"><span>运行此脚本需要来自开发者的验证字符串。</span></span>
<span class="line"><span>已为当前状态生成环境签名...</span></span>
<span class="line"><span>签名:BPnCofIcKzy0wzb+Yd+Q99hn7vX04AdEZf34hhtmypk=</span></span></code></pre></div><p>它将生成的签名发送给 “开发者”（在测试期间没有实际的用户，所以 “用户” 和 “开发者” 的所有角色都是带引号的），“开发者” 将其输入到签名工具（使用 <code>I_AM_DEVELOPER</code> 宏编译）的 <code>Signature</code> 参数中。结果，程序将生成一个验证字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>验证:YBpYpQ0tLIpUhBslIw+AsPhtPG48b0qut9igJ+Tk1fQ=</span></span></code></pre></div><p>“开发者” 将其发回给 “用户”，“用户” 通过将其输入到 <code>Validation</code> 参数中，将激活该脚本：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>哈希字节:</span></span>
<span class="line"><span>  4 249 194 161 242  28  43  60 180 195  54 254  97 223 144 247 216 103 238 245 244 224   7  68 101 253 248 134  27 102 202 153</span></span>
<span class="line"><span>脚本已通过验证并正常运行</span></span></code></pre></div><p>为了展示保护的有效性，让我们将该脚本复制为一个服务：为此，将文件复制到 <code>MQL5/Services/MQL5Book/p4/</code> 文件夹中，并将源代码中的以下行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>#property script_show_inputs</span></span></code></pre></div><p>替换为以下行：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>#property service</span></span></code></pre></div><p>让我们编译该服务，创建并运行它的实例，并在输入参数中指定先前收到的验证字符串。结果，该服务将中止（在到达包含所需代码的语句之前），并显示以下消息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>哈希字节:</span></span>
<span class="line"><span>147 131  69  39  29 254  83 141  90 102 216 180 229 111   2 246 245  19  35 205 223 145 194 245  67 129  32 108 178 187 232 113</span></span>
<span class="line"><span>验证字符串错误，终止运行</span></span></code></pre></div><p>关键在于，在我们使用的环境属性中，包含了字符串 <code>MQL_PROGRAM_TYPE</code>。因此，为一种类型的程序颁发的许可证，对于另一种类型的程序将不起作用，即使它们在同一用户的计算机上运行。</p><h2 id="检查键盘状态" tabindex="-1">检查键盘状态 <a class="header-anchor" href="#检查键盘状态" aria-label="Permalink to &quot;检查键盘状态&quot;">​</a></h2><p><code>TerminalInfoInteger</code> 函数可用于了解控制键（也称为虚拟键）的状态。这些键特别包括 Ctrl、Alt、Shift、Enter、Ins、Del、Esc、方向键等等。它们被称为虚拟键，是因为键盘通常提供多种方式来产生相同的控制操作。例如，Ctrl、Shift 和 Alt 在空格键的左右两侧都有重复按键，而光标既可以通过专用按键移动，也可以在按下 Fn 时通过主按键移动。因此，此函数无法在物理层面区分控制方式（例如，区分左右 Shift 键）。</p><p>API 为以下按键定义了常量：</p><table tabindex="0"><thead><tr><th>标识符</th><th>描述</th></tr></thead><tbody><tr><td><code>TERMINAL_KEYSTATE_LEFT</code></td><td>左箭头键</td></tr><tr><td><code>TERMINAL_KEYSTATE_UP</code></td><td>上箭头键</td></tr><tr><td><code>TERMINAL_KEYSTATE_RIGHT</code></td><td>右箭头键</td></tr><tr><td><code>TERMINAL_KEYSTATE_DOWN</code></td><td>下箭头键</td></tr><tr><td><code>TERMINAL_KEYSTATE_SHIFT</code></td><td>Shift 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_CONTROL</code></td><td>Ctrl 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_MENU</code></td><td>Windows 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_CAPSLOCK</code></td><td>CapsLock 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_NUMLOCK</code></td><td>NumLock 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_SCRLOCK</code></td><td>ScrollLock 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_ENTER</code></td><td>Enter 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_INSERT</code></td><td>Insert 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_DELETE</code></td><td>Delete 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_HOME</code></td><td>Home 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_END</code></td><td>End 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_TAB</code></td><td>Tab 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_PAGEUP</code></td><td>PageUp 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_PAGEDOWN</code></td><td>PageDown 键</td></tr><tr><td><code>TERMINAL_KEYSTATE_ESCAPE</code></td><td>Escape 键</td></tr></tbody></table><p>该函数返回一个两字节的整数值，通过一对位来报告所请求按键的当前状态。</p><p>最低有效位记录自上次函数调用以来的按键操作。例如，如果 <code>TerminalInfoInteger(TERMINAL_KEYSTATE_ESCAPE)</code> 在某一时刻返回 0，然后用户按下了 Escape 键，那么在下一次调用时，<code>TerminalInfoInteger(TERMINAL_KEYSTATE_ESCAPE)</code> 将返回 1。如果再次按下该键，值将回到 0。</p><p>对于负责切换输入模式的按键，如 CapsLock、NumLock 和 ScrollLock，位的位置表示相应模式是启用还是禁用。</p><p>如果当前按键被按下（未释放），则第二字节的最高有效位（0x8000）会被置位。</p><p>此功能不能用于跟踪字母数字键和功能键的按下情况。为此，需要在程序中实现 <code>OnChartEvent</code> 处理程序并拦截代码为 <code>CHARTEVENT_KEYDOWN</code> 的消息。请注意，事件是在图表上生成的，仅适用于专家顾问和指标。其他类型的程序（脚本和服务）不支持事件编程模型。</p><p><code>EnvKeys.mq5</code> 脚本包含一个遍历所有 <code>TERMINAL_KEYSTATE</code> 常量的循环。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ENUM_TERMINAL_INFO_INTEGER i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TERMINAL_KEYSTATE_TAB;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TERMINAL_KEYSTATE_SCRLOCK; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 跳过不是枚举元素的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringFind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ENUM_TERMINAL_INFO_INTEGER&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      PrintFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%4X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e, (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ushort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TerminalInfoInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以通过按键操作和启用/禁用键盘模式进行实验，以查看日志中的值如何变化。</p><p>例如，如果默认情况下大写锁定被禁用，我们将看到以下日志：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>TERMINAL_KEYSTATE_SCRLOCK= 0</span></span></code></pre></div><p>如果我们按下 ScrollLock 键，并且在不释放的情况下再次运行脚本，我们将得到以下日志：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>TERMINAL_KEYSTATE_CAPSLOCK=8001</span></span></code></pre></div><p>也就是说，模式已开启且按键被按下。让我们释放该按键，下次脚本运行时将返回：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>TERMINAL_KEYSTATE_SCRLOCK= 1</span></span></code></pre></div><p>模式仍然开启，但按键已释放。</p><p><code>TerminalInfoInteger</code> 不适用于检查通过 <code>iCustom</code> 或 <code>IndicatorCreate</code> 调用创建的依赖指标中按键（<code>TERMINAL_KEYSTATE_XYZ</code>）的状态。在这些指标中，即使使用 <code>ChartIndicatorAdd</code> 将指标添加到图表中，该函数也总是返回 0。</p><p>此外，当 MQL 程序的图表不处于活动状态（用户已切换到另一个图表）时，该函数也不起作用。MQL5 没有提供永久控制键盘的方法。</p><h2 id="检查-mql-程序状态和终止原因" tabindex="-1">检查 MQL 程序状态和终止原因 <a class="header-anchor" href="#检查-mql-程序状态和终止原因" aria-label="Permalink to &quot;检查 MQL 程序状态和终止原因&quot;">​</a></h2><p>在本书的不同示例中，我们已经接触过 <code>IsStopped</code> 函数。当 MQL 程序进行长时间计算时，需要时不时调用该函数。这能让你检查用户是否发起了程序关闭操作（即是否尝试从图表中移除该程序）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IsStopped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ≡ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _StopFlag</span></span></code></pre></div><p>如果程序被用户中断（例如，在上下文菜单中通过“专家列表”命令打开的对话框里按下“删除”按钮），该函数返回 <code>true</code>。</p><p>程序会有 3 秒钟的时间来妥善暂停计算，必要时保存中间结果，然后完成其工作。若未在这个时间内完成，程序将被强制从图表中移除。</p><p>你也可以检查内置的 <code>_StopFlag</code> 变量的值，来替代使用 <code>IsStopped</code> 函数。</p><p>测试脚本 <code>EnvStop.mq5</code> 在循环中模拟长时间计算：搜索质数。<code>while</code> 循环的退出条件是使用 <code>IsStopped</code> 函数编写的。所以，当用户删除脚本时，循环会正常中断，日志会显示找到的质数统计信息（脚本也可以将这些数字保存到文件中）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPrime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( ; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> candidate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IsStopped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 尝试将其替换为 while(true)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 模拟长时间计算</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPrime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(candidate))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         Comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Count:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;, Prime:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, candidate);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">candidate;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Comment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Total found:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果把循环条件替换为 <code>true</code>（无限循环），脚本将不再响应用户的停止请求，会被强制从图表中卸载。结果，日志里会出现“异常终止”错误，窗口左上角的注释也不会被清除。这样，在这个示例中象征着保存数据和释放占用资源的所有指令（比如从窗口中删除自己创建的图形对象）都会被忽略。</p><p>在向程序发送停止请求后（并且 <code>_StopFlag</code> 的值为 <code>true</code>），可以使用 <code>UninitializeReason</code> 函数找出终止原因。</p><p>可惜的是，这个功能仅适用于专家顾问和指标。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UninitializeReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ≡ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _UninitReason</span></span></code></pre></div><p>该函数返回一个预定义的代码，用于描述程序初始化失败的原因。</p><table tabindex="0"><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>REASON_PROGRAM</code></td><td>0</td><td>仅在专家顾问和脚本中可用的 <code>ExpertRemove</code> 函数被调用</td></tr><tr><td><code>REASON_REMOVE</code></td><td>1</td><td>程序从图表中移除</td></tr><tr><td><code>REASON_RECOMPILE</code></td><td>2</td><td>程序重新编译</td></tr><tr><td><code>REASON_CHARTCHANGE</code></td><td>3</td><td>图表的交易品种或周期发生改变</td></tr><tr><td><code>REASON_CHARTCLOSE</code></td><td>4</td><td>图表关闭</td></tr><tr><td><code>REASON_PARAMETERS</code></td><td>5</td><td>程序的输入参数发生改变</td></tr><tr><td><code>REASON_ACCOUNT</code></td><td>6</td><td>连接了另一个账户或重新连接到交易服务器</td></tr><tr><td><code>REASON_TEMPLATE</code></td><td>7</td><td>应用了另一个图表模板</td></tr><tr><td><code>REASON_INITFAILED</code></td><td>8</td><td><code>OnInit</code> 事件处理函数返回了错误标志</td></tr><tr><td><code>REASON_CLOSE</code></td><td>9</td><td>终端关闭</td></tr></tbody></table><p>你也可以访问内置的全局变量 <code>_UninitReason</code>，来替代使用这个函数。</p><p>初始化失败的原因代码也会作为参数传递给 <code>OnDeinit</code> 事件处理函数。</p><p>后续在学习“程序启动和停止特性”时，我们会看到一个指标（<code>Indicators/MQL5Book/p5/LifeCycle.mq5</code>）和一个专家顾问（<code>Experts/MQL5Book/p5/LifeCycle.mq5</code>），它们会记录初始化失败的原因，并且能让你探究程序根据用户操作所表现出的行为。</p><h2 id="以编程方式关闭终端并设置返回码" tabindex="-1">以编程方式关闭终端并设置返回码 <a class="header-anchor" href="#以编程方式关闭终端并设置返回码" aria-label="Permalink to &quot;以编程方式关闭终端并设置返回码&quot;">​</a></h2><p>MQL5 API 包含了一些函数，这些函数不仅可用于读取，还可用于修改程序环境。其中最极端的函数之一是 <code>TerminalClose</code>。使用这个函数，MQL 程序可以关闭终端（无需用户确认！）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TerminalClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> retcode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>该函数有一个参数 <code>retcode</code>，它是 <code>terminal64.exe</code> 进程返回给 Windows 操作系统的代码。这样的代码可以在批处理文件（*.bat 和 <em>.cmd）中进行分析，也可以在 shell 脚本（支持 VBScript 和 JScript 的 Windows 脚本宿主 (WSH)，或者扩展名为.ps</em> 文件的 Windows PowerShell (WPS)）以及其他自动化工具（例如，内置的 Windows 计划任务、Windows 下支持的 Linux 子系统中的 *.sh 文件等）中进行分析。</p><p>该函数不会立即停止终端，而是向终端发送一个终止命令。</p><p>如果调用结果为 <code>true</code>，这意味着该命令已成功“被接受处理”，并且终端将尽快正确关闭（生成通知并停止其他正在运行的 MQL 程序）。当然，在调用代码中，也必须为立即终止工作做好所有准备（特别是，所有先前打开的文件都应该关闭），并且在函数调用后，控制权应返回给终端。</p><p>另一个与进程返回码相关的函数是 <code>SetReturnError</code>。它允许在不立即发送关闭命令的情况下预先分配此代码。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetReturnError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> retcode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>该函数设置终端进程在关闭后将返回给 Windows 系统的代码。</p><p>请注意，不需要通过 <code>TerminalClose</code> 函数强制关闭终端。用户正常关闭终端时也会使用指定的代码。此外，如果终端由于意外的严重错误而关闭，此代码也会进入系统。</p><p>如果 <code>SetReturnError</code> 函数被多次调用，并且/或者从不同的 MQL 程序中调用，终端将返回最后设置的代码。</p><p>让我们使用 <code>EnvClose.mq5</code> 脚本测试这些函数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#property script_show_inputs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReturnCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CloseTerminalNow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CloseTerminalNow)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      TerminalClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReturnCode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      SetReturnError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReturnCode);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了实际测试它，我们还需要 <code>envrun.bat</code> 文件（位于 <code>MQL5/Files/MQL5Book/</code> 文件夹中）。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>terminal64.exe</span></span>
<span class="line"><span>@echo Exit code: %ERRORLEVEL%</span></span></code></pre></div><p>实际上，它只是启动终端，并在终端完成运行后将生成的代码显示到控制台。该文件应放置在终端文件夹中（或者应在 PATH 系统变量中注册系统中安装的多个 MetaTrader 5 实例中的当前实例）。</p><p>例如，如果我们使用批处理文件启动终端，并执行 <code>EnvClose.mq5</code> 脚本，例如，使用参数 <code>ReturnCode=100</code>，<code>CloseTerminalNow=true</code>，我们将在控制台中看到类似以下内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Microsoft Windows [Version 10.0.19570.1000]</span></span>
<span class="line"><span>(c) 2020 Microsoft Corporation. All rights reserved.</span></span>
<span class="line"><span>C:\\Program Files\\MT5East&gt;envrun</span></span>
<span class="line"><span>C:\\Program Files\\MT5East&gt;terminal64.exe</span></span>
<span class="line"><span>Exit code: 100</span></span>
<span class="line"><span>C:\\Program Files\\MT5East&gt;</span></span></code></pre></div><p>提醒一下，MetaTrader 5 从命令行启动时支持各种选项（详细信息请参阅文档中的“运行交易平台”部分）。因此，例如，可以组织对各种专家顾问或设置的批量测试，以及在数千个受监控的账户之间进行顺序切换，而在一台计算机上持续并行运行这么多实例来实现这些操作是不太现实的。</p><h2 id="处理运行时错误" tabindex="-1">处理运行时错误 <a class="header-anchor" href="#处理运行时错误" aria-label="Permalink to &quot;处理运行时错误&quot;">​</a></h2><p>任何编写得足够正确、能够无错误编译的程序，仍然无法完全避免运行时错误。这些错误可能由于开发者的疏忽而产生，也可能由于软件环境中出现的意外情况（例如网络连接中断、内存耗尽等）而引发。但同样有可能的是，错误是由于程序的不正确应用而导致的。在所有这些情况下，程序必须能够分析问题的本质并进行适当的处理。</p><p>每个 MQL5 语句都是运行时错误的潜在来源。如果发生这样的错误，终端会将一个描述性代码保存到特殊的 <code>_LastError</code> 变量中。务必在每条语句执行后立即分析该代码，因为后续语句中的潜在错误可能会覆盖这个值。</p><p>请注意，存在一些严重错误，一旦发生这些错误，程序执行将立即中止：</p><ul><li>除零错误</li><li>索引越界</li><li>对象指针错误</li></ul><p>有关错误代码及其含义的完整列表，请参阅文档。</p><p>在“打开和关闭文件”部分，我们已经在编写一个有用的 <code>PRTF</code> 宏时解决了错误诊断的问题。在那里，特别是我们看到了一个辅助头文件 <code>MQL5/Include/MQL5Book/MqlError.mqh</code>，其中的 <code>MQL_ERROR</code> 枚举允许使用 <code>EnumToString</code> 轻松地将数字错误代码转换为名称。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MQL_ERROR</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   SUCCESS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   INTERNAL_ERROR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   WRONG_INTERNAL_PARAMETER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4002</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   INVALID_PARAMETER </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   NOT_ENOUGH_MEMORY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4004</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 程序员定义的错误区域开始（请参阅下一部分）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   USER_ERROR_FIRST </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65536</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E2S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">X</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((MQL_ERROR)(X))</span></span></code></pre></div><p>在这里，作为 <code>E2S</code> 宏的 <code>X</code> 参数，我们应该使用 <code>_LastError</code> 变量或其等效的 <code>GetLastError</code> 函数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetLastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ≡ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _LastError</span></span></code></pre></div><p>该函数返回 MQL 程序语句中发生的最后一个错误的代码。最初，在没有错误时，该值为 0。读取 <code>_LastError</code> 和调用 <code>GetLastError</code> 函数之间的区别纯粹是语法上的（根据偏好的风格选择合适的选项）。</p><p>应该记住，语句的正常无错误执行不会重置错误代码。调用 <code>GetLastError</code> 函数也不会重置它。</p><p>因此，如果存在一系列操作，其中只有一个操作会设置错误标志，那么该函数将为后续（成功的）操作返回该错误标志。例如：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// _LastError 默认值为 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action1;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 正常，_LastError 不变</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action2;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 错误，_LastError = X</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action3;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 正常，_LastError 不变，即仍等于 X</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action4;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 另一个错误，_LastError = Y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action5;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 正常，_LastError 不变，即仍等于 Y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">action6;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 正常，_LastError 不变，即仍等于 Y</span></span></code></pre></div><p>这种行为会使定位问题区域变得困难。为了避免这种情况，有一个单独的 <code>ResetLastError</code> 函数，它将 <code>_LastError</code> 变量重置为 0。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResetLastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>该函数将内置的 <code>_LastError</code> 变量的值设置为零。</p><p>建议在任何可能导致错误的操作之前调用该函数，并在之后使用 <code>GetLastError</code> 函数分析错误。</p><p>已经提到的 <code>PRTF</code> 宏（<code>PRTF.mqh</code> 文件）是使用这两个函数的一个很好的例子。其代码如下：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;MQL5Book/MqlError.mqh&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PRTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResultPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(#A, (A))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typename T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ResultPrint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T retval </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _LastError;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 记录输入时的 _LastError</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> E2S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(snapshot) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;(&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (string)snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, retval, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; / &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (snapshot </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ok&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ResetLastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 为下一次调用清除错误标志</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retval;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>该宏以及包含在其中的 <code>ResultPrint</code> 函数的目的是记录传递的值（即当前错误代码），并立即清除错误代码。因此，在一系列语句上连续应用 <code>PRTF</code> 始终确保打印到日志中的错误（或成功指示）与获得 <code>retval</code> 参数值的最后一条语句相对应。</p><p>我们需要将 <code>_LastError</code> 保存到中间局部变量 <code>snapshot</code> 中，因为如果任何操作失败，<code>_LastError</code> 几乎可以在表达式求值的任何位置更改其值。在这个特定示例中，<code>E2S</code> 宏使用了 <code>EnumToString</code> 函数，如果将不在枚举中的值作为参数传递，该函数可能会引发自己的错误代码。然后，在同一表达式的后续部分中，当形成字符串时，我们将看到的不是初始错误，而是引发的错误。</p><p>在任何语句中，可能有几个位置会使 <code>_LastError</code> 突然更改。在这方面，最好在期望的操作之后立即记录错误代码。</p><h2 id="用户定义的错误" tabindex="-1">用户定义的错误 <a class="header-anchor" href="#用户定义的错误" aria-label="Permalink to &quot;用户定义的错误&quot;">​</a></h2><p>开发者可以将内置的 <code>_LastError</code> 变量用于他们自己的应用目的。<code>SetUserError</code> 函数为此提供了便利。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetUserError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ushort</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> user_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>该函数将内置的 <code>_LastError</code> 变量设置为 <code>ERR_USER_ERROR_FIRST + user_error</code> 的值，其中 <code>ERR_USER_ERROR_FIRST</code> 为 65536。所有低于此值的代码都预留给系统错误。</p><p>使用这种机制，你可以部分绕过 MQL5 中与该语言不支持异常这一事实相关的限制。</p><p>很多时候，函数会使用返回值作为错误的标志。然而，有些算法中函数必须返回应用类型的值。我们以 <code>double</code> 类型为例。如果函数的定义范围是负无穷到正无穷，我们选择用于指示错误的任何值（例如 0）都将无法与计算的实际结果区分开来。对于 <code>double</code> 类型，当然可以选择返回一个专门构造的 <code>NaN</code> 值（非数字，见“检查实数的正常性”部分）。但是如果函数返回一个结构体或类对象呢？一种可能的解决方案是通过引用或指针参数返回结果，但这种形式使得无法将函数用作表达式的操作数。</p><p>在类的上下文中，让我们考虑称为“构造函数”的特殊函数。它们返回对象的一个新实例。然而，有时由于某些情况，无法构造整个对象，然后调用代码似乎得到了该对象，但不应该使用它。如果类能够提供一个额外的方法来检查对象是否可用，那就太好了。但作为一种统一的替代方法（例如，适用于所有类），我们可以使用 <code>SetUserError</code> 函数。</p><p>在“运算符重载”部分，我们遇到了 <code>Matrix</code> 类。我们将为它补充计算行列式和逆矩阵的方法，然后用它来演示用户定义的错误（见 <code>Matrix.mqh</code> 文件）。为矩阵定义了重载运算符，允许在单个表达式中将它们组合成运算符链，因此在其中实现对潜在错误的检查会很不方便。</p><p>我们的 <code>Matrix</code> 类是对最近添加的 MQL5 内置对象类型 <code>matrix</code> 的自定义替代实现。</p><p>我们从在 <code>Matrix</code> 主类构造函数中验证输入参数开始。如果有人试图创建一个零大小的矩阵，我们设置一个自定义错误 <code>ERR_USER_MATRIX_EMPTY</code>（提供的几个错误之一）。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_ERR_USER_MATRIX</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ERR_USER_MATRIX_OK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ERR_USER_MATRIX_EMPTY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ERR_USER_MATRIX_SINGULAR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ERR_USER_MATRIX_NOT_SQUARE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class Matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> columns </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         SetUserError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ERR_USER_MATRIX_EMPTY);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         ArrayResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> columns);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         ArrayInitialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>这些新操作仅为方阵定义，所以我们创建一个具有适当大小约束的派生类。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class MatrixSquare : public Matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   MatrixSquare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n, n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         SetUserError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ERR_USER_MATRIX_NOT_SQUARE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>构造函数中的第二个参数应该不存在（假定它等于第一个参数），但我们需要它，因为 <code>Matrix</code> 类有一个模板转置方法，其中所有 <code>T</code> 类型都必须支持带有两个整数参数的构造函数。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class Matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">typename T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transpose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      T </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(columns, rows);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> columns; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">            result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[j][i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[i][(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)j];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>由于 <code>MatrixSquare</code> 构造函数中有两个参数，我们还必须检查它们是否相等。如果不相等，我们设置 <code>ERR_USER_MATRIX_NOT_SQUARE</code> 错误。</p><p>最后，在计算逆矩阵时，我们可能会发现矩阵是退化的（行列式为 0）。<code>ERR_USER_MATRIX_SINGULAR</code> 错误就是为这种情况预留的。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class MatrixSquare : public Matrix</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">public:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MatrixSquare </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      MatrixSquare </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rows);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> determinant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fabs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(d) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DBL_EPSILON)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> complement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().transpose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MatrixSquare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         SetUserError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ERR_USER_MATRIX_SINGULAR);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MatrixSquare operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>为了直观地输出错误，在日志中添加了一个静态方法，返回 <code>ENUM_ERR_USER_MATRIX</code> 枚举，很容易将其传递给 <code>EnumToString</code>：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ENUM_ERR_USER_MATRIX </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_LastError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ERR_USER_ERROR_FIRST)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ENUM_ERR_USER_MATRIX)(_LastError </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ERR_USER_ERROR_FIRST);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ENUM_ERR_USER_MATRIX)_LastError;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><p>所有方法的完整代码可以在附件文件中找到。</p><p>我们将在测试脚本 <code>EnvError.mq5</code> 中检查应用错误代码。</p><p>首先，让我们确保类能够正常工作：对矩阵求逆，并检查原始矩阵和逆矩阵的乘积是否等于单位矩阵。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test matrix inversion (should pass)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ResetLastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Matrix </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SquaremA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 将数据分配给原始矩阵</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   mA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MatrixSquare </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mAinv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   mainv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mA;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 求逆并存储在另一个矩阵中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   mAinv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Check inverted by multiplication&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   Matrix </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Squaretest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 将第一个矩阵乘以第二个矩阵</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mAinv;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   test.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 得到单位矩阵</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Matrix::lastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 正常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>这段代码片段生成以下日志条目：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Test matrix inversion (should pass)</span></span>
<span class="line"><span>Input</span></span>
<span class="line"><span>1.00000 2.00000 3.00000</span></span>
<span class="line"><span>4.00000 5.00000 6.00000</span></span>
<span class="line"><span>7.00000 8.00000 0.00000</span></span>
<span class="line"><span>Result</span></span>
<span class="line"><span>-1.77778  0.88889 -0.11111</span></span>
<span class="line"><span> 1.55556 -0.77778  0.22222</span></span>
<span class="line"><span>-0.11111  0.22222 -0.11111</span></span>
<span class="line"><span>Check inverted by multiplication</span></span>
<span class="line"><span> 1.00000 +0.00000  0.00000</span></span>
<span class="line"><span> -0.00000   1.00000  +0.00000</span></span>
<span class="line"><span>0.00000 0.00000 1.00000</span></span>
<span class="line"><span>ERR_USER_MATRIX_OK</span></span></code></pre></div><p>请注意，在单位矩阵中，由于浮点误差，一些零元素实际上是非常接近零的小值，因此它们有符号。</p><p>然后，让我们看看算法如何处理退化矩阵。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Test matrix inversion (should fail)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MatrixSquare </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Input&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   mB.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   ResetLastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Result&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mB).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Matrix::lastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 奇异矩阵</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre></div><p>结果如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Test matrix inversion (should fail)</span></span>
<span class="line"><span>Input</span></span>
<span class="line"><span>-22.00000  -7.00000  17.00000</span></span>
<span class="line"><span>-21.00000  15.00000   9.00000</span></span>
<span class="line"><span>-34.00000 -31.00000  33.00000</span></span>
<span class="line"><span>Result</span></span>
<span class="line"><span>0.0 0.0 0.0</span></span>
<span class="line"><span>0.0 0.0 0.0</span></span>
<span class="line"><span>0.0 0.0 0.0</span></span>
<span class="line"><span>ERR_USER_MATRIX_SINGULAR</span></span></code></pre></div><p>在这种情况下，我们只是显示错误描述。但在实际程序中，应该能够根据问题的性质选择继续执行的选项。</p><p>最后，我们将模拟剩下的两种应用错误的情况。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Empty matrix creation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MatrixSquare </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">m0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Matrix::lastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&#39;Rectangular&#39; square matrix creation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   MatrixSquare </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EnumToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Matrix::lastError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这里，我们描述了一个空矩阵和一个看似方阵但大小不同的矩阵。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>Empty matrix creation</span></span>
<span class="line"><span>ERR_USER_MATRIX_EMPTY</span></span>
<span class="line"><span>&#39;Rectangular&#39; square matrix creation</span></span>
<span class="line"><span>ERR_USER_MATRIX_NOT_SQUARE</span></span></code></pre></div><p>在这些情况下，我们无法避免创建对象，因为编译器会自动执行此操作。</p><p>当然，这个测试明显违反了契约（类和方法“认为”有效的数据和操作规范）。然而，在实践中，参数通常是从代码的其他部分获取的，在处理大量“第三方”数据的过程中，检测与预期的偏差并非易事。</p><p>一个程序能够在不产生致命后果的情况下“处理”不正确的数据，以及对于正确的输入数据产生正确的结果，这是衡量其质量的最重要指标。</p><h2 id="调试管理" tabindex="-1">调试管理 <a class="header-anchor" href="#调试管理" aria-label="Permalink to &quot;调试管理&quot;">​</a></h2><p>MetaEditor 中的内置调试器允许在源代码中设置断点，断点就是程序执行应该暂停的行。有时这个系统会失效，也就是暂停功能不起作用，这时你可以使用 <code>DebugBreak</code> 函数来显式强制程序停止。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DebugBreak</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>调用该函数会暂停程序，并在调试模式下激活编辑器窗口，同时提供所有用于查看变量、调用栈以及逐步继续执行程序的工具。</p><p>只有当程序是从编辑器以调试模式启动时（通过“调试” -&gt; “在真实数据上启动”或“在历史数据中启动”命令），程序执行才会被中断。在所有其他模式下，包括常规启动（在终端中）和性能分析模式，该函数不起作用。</p><h2 id="预定义变量" tabindex="-1">预定义变量 <a class="header-anchor" href="#预定义变量" aria-label="Permalink to &quot;预定义变量&quot;">​</a></h2><p>每个 MQL 程序都有一组由终端提供的通用全局变量。在前面的章节中，我们已经介绍了其中的大部分变量，下面是一个总结表格。几乎所有变量都是只读的，例外的是 <code>_LastError</code> 变量，它可以通过 <code>ResetLastError</code> 函数重置。</p><table tabindex="0"><thead><tr><th>变量</th><th>值</th></tr></thead><tbody><tr><td><code>_LastError</code></td><td>最后一个错误的值，与 <code>GetLastError</code> 函数类似</td></tr><tr><td><code>_StopFlag</code></td><td>程序停止标志，与 <code>IsStopped</code> 函数类似</td></tr><tr><td><code>_UninitReason</code></td><td>程序初始化失败的原因代码，与 <code>UninitializeReason</code> 函数类似</td></tr><tr><td><code>_RandomSeed</code></td><td>伪随机整数生成器的当前内部状态</td></tr><tr><td><code>_IsX64</code></td><td>64 位终端的标志，类似于使用 <code>TerminalInfoInteger</code> 函数获取 <code>TERMINAL_X64</code> 属性</td></tr></tbody></table><p>此外，对于在图表上下文中运行的 MQL 程序，如专家顾问、脚本和指标，该语言提供了具有图表属性的预定义变量（同样，这些变量也不能在程序中修改）。</p><table tabindex="0"><thead><tr><th>变量</th><th>值</th></tr></thead><tbody><tr><td><code>_Symbol</code></td><td>当前图表交易品种的名称，与 <code>Symbol</code> 函数类似</td></tr><tr><td><code>_Period</code></td><td>当前图表的时间周期，与 <code>Period</code> 函数类似</td></tr><tr><td><code>_Digits</code></td><td>当前图表交易品种价格的小数位数，与 <code>Digits</code> 函数类似</td></tr><tr><td><code>_Point</code></td><td>当前交易品种价格的点值（以报价货币为单位），与 <code>Point</code> 函数类似</td></tr><tr><td><code>_AppliedTo</code></td><td>指标计算所基于的数据类型（仅适用于指标）</td></tr></tbody></table><h2 id="mql5-语言的预定义常量" tabindex="-1">MQL5 语言的预定义常量 <a class="header-anchor" href="#mql5-语言的预定义常量" aria-label="Permalink to &quot;MQL5 语言的预定义常量&quot;">​</a></h2><p>本节描述了运行时环境为任何程序定义的所有常量。我们在前面的章节中已经见过其中的一些常量。有些常量与应用 MQL5 编程方面相关，这些内容将在后面的章节中介绍。</p><table tabindex="0"><thead><tr><th>常量</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td><code>CHARTS_MAX</code></td><td>同时打开的图表的最大可能数量</td><td>100</td></tr><tr><td><code>clrNONE</code></td><td>无颜色</td><td>-1 (0xFFFFFFFF)</td></tr><tr><td><code>EMPTY_VALUE</code></td><td>指标缓冲区中的空值</td><td></td></tr><tr><td><code>DBL_MAX</code></td><td></td><td></td></tr><tr><td><code>INVALID_HANDLE</code></td><td>无效句柄</td><td>-1</td></tr><tr><td><code>NULL</code></td><td>任何类型的空值</td><td>0</td></tr><tr><td><code>WHOLE_ARRAY</code></td><td>直到数组末尾的元素数量，即整个数组将被处理</td><td>-1</td></tr><tr><td><code>WRONG_VALUE</code></td><td>一个常量，可以隐式转换为任何枚举类型</td><td>-1</td></tr></tbody></table><p>如“文件”章节所示，<code>INVALID_HANDLE</code> 常量可用于验证文件描述符。</p><p><code>WHOLE_ARRAY</code> 常量用于那些处理数组且需要指定所处理数组中元素数量的函数：如果需要从指定位置处理到数组的所有值，就指定 <code>WHOLE_ARRAY</code> 值。</p><p><code>EMPTY_VALUE</code> 常量通常被赋给指标缓冲区中那些不应在图表上绘制的元素。换句话说，这个常量表示默认的空值。稍后，我们将描述如何为特定的指标缓冲区将其替换为另一个值，例如 0。</p><p><code>WRONG_VALUE</code> 常量用于那些需要指定不正确枚举值的情况。</p><p>此外，有两个常量的值取决于编译方法。</p><table tabindex="0"><thead><tr><th>常量</th><th>描述</th></tr></thead><tbody><tr><td><code>IS_DEBUG_MODE</code></td><td>以调试模式运行 mq5 程序的属性：在调试模式下为非零值，否则为 0</td></tr><tr><td><code>IS_PROFILE_MODE</code></td><td>以性能分析模式运行 mq5 程序的属性：在性能分析模式下为非零值，否则为 0</td></tr></tbody></table><p><code>IS_PROFILE_MODE</code> 常量允许在性能分析模式下为正确收集信息而改变程序的操作。性能分析可以测量单个程序片段（函数和单个行）的执行时间。</p><p>编译器在编译期间设置 <code>IS_PROFILE_MODE</code> 常量的值。通常，它被设置为 0。当程序以性能分析模式启动时，会执行特殊的编译，在这种情况下，会使用非零值来替代 <code>IS_PROFILE_MODE</code>。</p><p><code>IS_DEBUG_MODE</code> 常量的工作方式类似：在原生编译结果中它等于 0，在调试编译后它大于 0。在出于验证目的需要稍微改变 MQL 程序的操作时，它很有用，例如，向日志输出额外信息或在图表上创建辅助图形对象。</p><p>预处理器定义了含义类似的 <code>_DEBUG</code> 和 <code>_RELEASE</code> 常量（见“预定义预处理器常量”）。</p><p>关于程序操作模式的更详细信息，可以在运行时使用 <code>MQLInfoInteger</code> 函数获取（见“终端和程序操作模式”）。特别是，程序的调试版本可以在没有调试器的情况下运行。</p>`,375)]))}const c=i(p,[["render",h]]);export{g as __pageData,c as default};
