import{_ as i}from"./chunks/undo_icon.CBKSg5Fd.js";import{_ as n,a as s,b as l,c as r}from"./chunks/list_funtions_icon.7jwvWDri.js";import{_ as o,a as p,b as d,c as m}from"./chunks/class_method_protected_icon.D8KosnEv.js";import{_ as c}from"./chunks/go_to_line_icon.DnbrMUu9.js";import{_ as h,c as u,aI as g,o as _}from"./chunks/framework.b7dag8kZ.js";const b="/metaeditor/list_names.png",k="/metaeditor/parameter_info.png",f="/metaeditor/list_functions.png",q="/metaeditor/class_method_private_icon.png",a="/metaeditor/function_header_icon.png",e="/metaeditor/block_comment_icon.png",v="/metaeditor/comment_lines_icon.png",y="/metaeditor/uncomment_lines_icon.png",C="/metaeditor/increase_indent_icon.png",x="/metaeditor/decrease_indent_icon.png",T="/metaeditor/make_uppercase_icon.png",P="/metaeditor/make_lowercase_icon.png",O="/metaeditor/toggle_bookmark_icon.png",S="/metaeditor/next_bookmark_icon.png",M="/metaeditor/previous_bookmark_icon.png",A="/metaeditor/clear_all_bookmarks_icon.png",I="/metaeditor/goto_line.png",E="/metaeditor/snippet_cursor.png",L="/metaeditor/snippet_example.png",D="/metaeditor/insert_datetime.png",w="/metaeditor/insert_color.png",Q="/metaeditor/clipboard.png",z=JSON.parse('{"title":"智能管理","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/metaeditor/development/intelligent_management"}],["meta",{"property":"og:title","content":"智能管理"}]]},"headers":[],"relativePath":"metaeditor/development/intelligent_management.md","filePath":"metaeditor/development/intelligent_management.md","lastUpdated":1744293048000}'),F={name:"metaeditor/development/intelligent_management.md"};function V(B,t,X,Y,$,N){return _(),u("div",null,t[0]||(t[0]=[g('<h1 id="智能管理" tabindex="-1">智能管理 <a class="header-anchor" href="#智能管理" aria-label="Permalink to &quot;智能管理&quot;">​</a></h1><p>为了轻松编程, MetaEditor 提供了各种工具，从自动替换函数名称和提示，到书签和 <a href="/metaeditor/workspace/hotkeys">热键</a>。 这些工具令您可以加快编写代码的过程，使导航更容易，并有助于防止错误。</p><p>本节介绍以下功能:</p><ul><li><a href="/metaeditor/development/intelligent_management#substitute">自动替换函数名称</a></li><li><a href="/metaeditor/development/intelligent_management#info">参数信息</a></li><li><a href="/metaeditor/development/intelligent_management#definition">移动到定义</a></li><li><a href="/metaeditor/development/intelligent_management#list">函数列表</a></li><li><a href="/metaeditor/development/intelligent_management#comments">插入注释</a></li><li><a href="/metaeditor/development/intelligent_management#additional">附加的代码编辑功能</a></li><li><a href="/metaeditor/development/intelligent_management#bookmarks">使用书签</a></li><li><a href="/metaeditor/development/intelligent_management#goto_line">跳转到行</a></li><li><a href="/metaeditor/development/intelligent_management#snippet">片段</a></li><li><a href="/metaeditor/development/intelligent_management#resource">插入资源</a></li><li><a href="/metaeditor/development/intelligent_management#convert">文本转换</a></li><li><a href="/metaeditor/development/intelligent_management#clipboard">剪贴板追踪</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>任何更改都可以撤消<img src="'+i+'" alt="撤销"> 撤销命令在 <a href="/metaeditor/main_menu/main_menu_edit#undo">编辑</a> 菜单里或在 <a href="/metaeditor/toolbar/toolbar_standard#undo">标准</a> 工具栏上, 或按 Ctrl+Z.</p></div><h2 id="substitute" tabindex="-1">自动替换函数名称 <a class="header-anchor" href="#substitute" aria-label="Permalink to &quot;自动替换函数名称{#substitute}&quot;">​</a></h2><p>当您编写程序代码时，MetaEditor 会自动为内置和自定义函数、常量、变量、类成员、关键字等提供可能的替换选项。 这加快了编写代码的速度。 例如，只要输入函数名称的第一个字母，就会立即打开含有相应名称的函数列表。 用键盘方向键选择适当的选项，然后按回车键:</p><p><img src="'+b+'" alt="名称列表"></p><p>如果选项列表太大，多输入几个函数名称的字母。 若要手工调用列表，请单击<img src="'+n+'" alt="列表名称"> 位于 <a href="/metaeditor/main_menu/main_menu_edit#list_names">编辑</a> 菜单里的列表名称，或输入头几个字符后按 Ctrl+Space。</p><h2 id="info" tabindex="-1">参数信息 <a class="header-anchor" href="#info" aria-label="Permalink to &quot;参数信息{#info}&quot;">​</a></h2><p>编写代码时无需打开语言帮助即可看到函数签名。 要做到这一点，将光标放在开始括号之后，即开始描述函数参数的位置，然后单击<img src="'+s+'" alt="参数信息"> 位于 <a href="/metaeditor/main_menu/main_menu_edit#parameter_info">编辑</a> 菜单里的参数信息，或按 Ctrl+Shift+Space。 有关参数和函数返回值类型的信息显示在工具提示中:</p><p><img src="'+k+'" alt="参数信息"></p><p>以下函数信息显示在上图中:</p><ul><li>[2 之 1] 意即该函数调用选项有不同的参数。 若要在它们之间切换，请使用键盘上的方向键或鼠标左键单击提示行。</li><li>bool 指定函数的返回值类型。</li><li>ObjectSetInteger ― 函数名称。</li><li>(long chart_id, ... ) ― 列举可能的函数参数，在每个参数之前指定一个类型 (此处是 &quot;long&quot;)。 光标当前所在的参数以粗体显示。</li></ul><h2 id="definition" tabindex="-1">跳转到定义 <a class="header-anchor" href="#definition" aria-label="Permalink to &quot;跳转到定义{#definition}&quot;">​</a></h2><p>这个工具可以快速导航到所选类类型或元素的定义（实现）。将光标放在其名称上并选择 <img src="'+l+'" alt="转到定义"> 快捷菜单中的 &quot;转到定义 &quot;或按下 &quot;Alt+G&quot;。如果定义位于另一个文件中，它将被打开，光标将被放置在其相应的位置。</p><p>该功能还能导航到包含文件。为此，请将光标置于声明行(#include 指令)的任意位置并执行上述命令。</p><p>跳转到声明</p><p>这个工具可以快速导航到变量或类成员声明。将光标放在元素名称上，在快捷菜单中选择 &quot;转到声明&quot;。如果声明位于另一个文件中，则将被打开，光标将被放置在其相应的位置。</p><h2 id="list" tabindex="-1">函数列表 <a class="header-anchor" href="#list" aria-label="Permalink to &quot;函数列表{#list}&quot;">​</a></h2><p>该工具允许您查看当前文件中所有已声明函数的列表。 若要打开列表，请单击<img src="'+r+'" alt="函数列表"> 位于 <a href="/metaeditor/main_menu/main_menu_edit#list_functions">编辑</a> 菜单里的函数列表，或按 Alt+M。</p><p><img src="'+f+'" alt="函数列表"></p><p>函数参数在其名称右侧的括号中指示。 若要跳转到该函数，请在列表中单击其名称。 列表中的每个函数都由其图标标记:</p><ul><li><img src="'+o+'" alt="函数"> ― 函数。</li><li><img src="'+p+'" alt="事件处理函数"> ― 事件处理函数 (On*)。</li><li><img src="'+d+'" alt="公有类方法"> ― 公有类方法 (public)。</li><li><img src="'+m+'" alt="保护类方法"> ― 保护类方法 (protected).</li><li><img src="'+q+'" alt="私有类方法"> ― 私有类方法 (private).</li></ul><h2 id="comments" tabindex="-1">插入注释 <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;插入注释{#comments}&quot;">​</a></h2><p>为了简化程序代码中的注释工作，请在 <a href="/metaeditor/main_menu/main_menu_edit#comments">编辑</a> 菜单里和 <a href="/metaeditor/toolbar/toolbar_standard">标准</a> 工具栏里使用函数编号:</p><ul><li><img src="'+a+'" alt="函数标题"> 函数标题 ― 为函数插入空白注释;</li><li><img src="'+e+'" alt="注释块"> 注释块 ― 插入单行注释符号;</li><li><img src="'+v+'" alt="注释行"> 注释行 ― 在选定的每行开头插入 &quot;//&quot; 注释;</li><li><img src="'+y+'" alt="取消注释行"> 取消注释行 ― 从选定的每行开头删除 &quot;//&quot; 注释。</li></ul><p><img src="'+e+'" alt="注释块">注释块命令 (Ctrl+/) 在当前位置插入单行注释字符:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>//---</span></span></code></pre></div><p><img src="'+a+`" alt="函数标题">函数标题 (Ctrl+.) 在当前光标位置为函数插入空白注释:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>+------------------------------------------------------------------+   </span></span>
<span class="line"><span>//|                                                                  |   </span></span>
<span class="line"><span>//+------------------------------------------------------------------+</span></span></code></pre></div><h2 id="additional" tabindex="-1">附加的代码编辑功能 <a class="header-anchor" href="#additional" aria-label="Permalink to &quot;附加的代码编辑功能{#additional}&quot;">​</a></h2><p>您可以轻松地将代码片段从程序的一部分移至另一部分。 要做到这一点，选取片段并将其推拽到必要位置 (Drag&#39;n&#39;Drop)。</p><p>在编辑菜单中的 <a href="/metaeditor/main_menu/main_menu_edit#comments">高级</a> 子菜单含有一系列简化源代码编辑的命令:</p><ul><li><img src="`+C+'" alt="增加行缩进"> 增加行缩进 ― 在所选行的开头插入三个空格 (制表符)。 若要在单行中插入空格，请将光标置于其开头。 若要在多行中插入空格，请全选。</li><li><img src="'+x+'" alt="减少行缩进"> 减少行缩进 ― 在所选行的开头删除三个空格 (制表符)。 与按 Tab+Shift 热键执行相同的动作。</li><li><img src="'+T+'" alt="转换为大写"> 变为大写 ― 将所选短语的所有字符转换为大写。 与按 Ctrl+Shift+U 热键执行相同的动作。</li><li><img src="'+P+'" alt="转换为小写"> 转换为小写 ― 将所选短语的所有字符转换为小写。 与按 Ctrl+U 热键执行相同的动作。</li></ul><h2 id="bookmarks" tabindex="-1">使用书签 <a class="header-anchor" href="#bookmarks" aria-label="Permalink to &quot;使用书签{#bookmarks}&quot;">​</a></h2><p>书签允许您快速跳转到代码的不同部分。 为所需行制作标签，并用 <a href="/metaeditor/main_menu/main_menu_edit#bookmarks">编辑 ― 书签</a> 菜单命令和源代码关联菜单在它们之间导航:</p><ul><li><img src="'+O+'" alt="切换书签"> 切换书签 ― 根据当前状态启用/禁用当前行上的书签。 与按 Ctrl+F2 热键完成相同动作;</li><li><img src="'+S+'" alt="下一个书签"> 下一个书签 ― 移到当前代码中的下一个书签。 与按 F2 热键完成相同动作;</li><li><img src="'+M+'" alt="前一个书签"> 前一个书签 ― 移至当前代码中的前一个书签。 与按 Shift+F2 热键执行相同的动作;</li><li><img src="'+A+'" alt="清除所有书签"> 清除所有书签 ― 从当前代码中删除所有书签。 与按 Ctrl+Shift+F2 热键完成相同动作。</li></ul><p>MetaEditor 还有命名书签的功能 ― 为它们分配数字标识。 若要设置这种书签，按住 Ctr l的同时单击 0-9。 若要跳转到先前的设置，按住 Alt 键的同时按相应的数字。</p><h2 id="goto_line" tabindex="-1">跳转到行 <a class="header-anchor" href="#goto_line" aria-label="Permalink to &quot;跳转到行{#goto_line}&quot;">​</a></h2><p>若要快速跳转到当前文件中的任何代码行，请单击<img src="'+c+'" alt="跳转到行"> 跳转到行在 <a href="/metaeditor/main_menu/main_menu_search">搜索</a> 菜单里或按 Ctrl+G。 以下窗口打开:</p><p><img src="'+I+'" alt="跳转到行"></p><p>窗口显示当前文件中代码的行范围。 若要转到该行，请输入其号码并点击 ОК。</p><h2 id="snippet" tabindex="-1">片段 <a class="header-anchor" href="#snippet" aria-label="Permalink to &quot;片段{#snippet}&quot;">​</a></h2><p>代码片段是描述某些 MQL4/MQL5 语言构造的源代码小模板片段。 它们令编写源代码变得更简单快捷。 例如，它们允许您快速将工件添加到程序代码来描述一个类或循环。 要做到这一点，只需输入一个关键词 ― &#39;class&#39; 或 &#39;for&#39;。 光标变为<img src="'+E+'" alt="可以添加代码片段">意即现在可以插入一个代码片段。 按 Tab 键，相应地将一个空白的类或 &#39;for&#39; 循环插入到程序代码中。</p><p><img src="'+L+`" alt="示例代码片段"></p><p>为了在有效代码片段域 (此处，这些是名称，类构造器和析构器) 之间切换，请使用 Tab 和 Shift+Tab。</p><p>更改一个有效代码域会自动更改其余部分。 例如，在更改类名称时，构造函数和析构函数名称也会自动更改。 当更改 &#39;for&#39; 循环表达式中的某个变量名时，其它表达式中的变量也会更改。</p><p>使用代码片段的系统还可以识别已经描述的结构、类、枚举、方法和函数。 将光标放置在相应结构的描述中，然后按 Ctrl+Enter。 之后，您可以使用 Tab 和 Shift+Tab 键在成员 (类、结构和枚举) 和参数 (方法和函数) 之间导航，并如上述一同编辑它们。</p><p>目前支持以下代码片段:</p><table tabindex="0"><thead><tr><th>关键字</th><th>值</th></tr></thead><tbody><tr><td>#import</td><td>导入声明。</td></tr><tr><td>OnBookEvent</td><td>OnBookEvent 处理器。</td></tr><tr><td>OnCalculate</td><td>OnCalculate 处理器。</td></tr><tr><td>case</td><td>&#39;case&#39; 选择符。</td></tr><tr><td>OnChartEvent</td><td>OnChartEvent 处理器。</td></tr><tr><td>class</td><td>类声明。</td></tr><tr><td>OnDeinit</td><td>OnDeinit 处理器。</td></tr><tr><td>do</td><td>&#39;do while&#39; 循环的声明。</td></tr><tr><td>enum</td><td>枚举的声明。</td></tr><tr><td>for</td><td>&#39;for&#39; 循环的声明。</td></tr><tr><td>if</td><td>&#39;if&#39; 条件的声明。</td></tr><tr><td>else</td><td>&#39;else&#39; 条件的声明。</td></tr><tr><td>OnInit</td><td>OnInit 处理器。</td></tr><tr><td>OnStart</td><td>OnStart 处理器。</td></tr><tr><td>struct</td><td>结构声明。</td></tr><tr><td>switch</td><td>&#39;switch&#39; 选择器。</td></tr><tr><td>OnTester</td><td>OnTester 处理器。</td></tr><tr><td>OnTesterInit</td><td>OnTesterInit 处理器。</td></tr><tr><td>OnTesterPass</td><td>OnTesterPass 处理器。</td></tr><tr><td>OnTesterDeinit</td><td>OnTesterDeinit 处理器。</td></tr><tr><td>OnTick</td><td>OnTick 处理器。</td></tr><tr><td>OnTimer</td><td>OnTimer 处理器。</td></tr><tr><td>OnTrade</td><td>OnTrade 处理器。</td></tr><tr><td>OnTradeTransation</td><td>OnTradeTransation 处理器。</td></tr><tr><td>while</td><td>&#39;while&#39; 循环的声明。</td></tr></tbody></table><h2 id="resource" tabindex="-1">插入资源 <a class="header-anchor" href="#resource" aria-label="Permalink to &quot;插入资源{#resource}&quot;">​</a></h2><p>命令来自 <a href="/metaeditor/main_menu/main_menu_edit">编辑 ― 插入</a> 菜单，允许快速插入资源文件，从而可以促进应用程序的开发。</p><h3 id="选项如同-property" tabindex="-1">选项如同 #property <a class="header-anchor" href="#选项如同-property" aria-label="Permalink to &quot;选项如同 #property&quot;">​</a></h3><p>在当前位置插入 #property 指令可以立即打开语言中所有<a href="https://www.mql5.com/zh/docs/basis/preprosessor/compilation" target="_blank" rel="noreferrer">程序属性</a> 的列表。</p><h3 id="bmp-wav-作为-resource" tabindex="-1">BMP/WAV 作为 #resource <a class="header-anchor" href="#bmp-wav-作为-resource" aria-label="Permalink to &quot;BMP/WAV 作为 #resource&quot;">​</a></h3><p>若要在程序资源添加图片或声音文件，请运行该指令并选择BMP或WAV文件（文件必须在\\MQL5 目录中）。已选文件相应路径的#resource指令将被插入到程序的当前位置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>#resource &quot;\\\\\\Images\\\\\\image.bmp&quot;</span></span></code></pre></div><h3 id="dll-ex5-作为-import" tabindex="-1">DLL/EX5 作为 #import <a class="header-anchor" href="#dll-ex5-作为-import" aria-label="Permalink to &quot;DLL/EX5 作为 #import&quot;">​</a></h3><p>通过执行这个命令和选择合适的文件，您可以从外部程序库或EX5/EX4文件导入函数（文件必须位于\\MQL5目录）。已选文件相应路径的一对#import指令将被插入到程序的当前位置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>#import &quot;..\\Experts\\SendNotification.ex5&quot;   </span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>#import</span></span></code></pre></div><p>在两个指令中间添加已导入函数的描述。</p><h3 id="mqh-作为-include" tabindex="-1">MQH 作为 #include <a class="header-anchor" href="#mqh-作为-include" aria-label="Permalink to &quot;MQH 作为 #include&quot;">​</a></h3><p>若要在程序代码中插入包含文件，请运行这个命令并选择一个MQH文件（相应的文件必须位于\\MQL5目录）。已选文件相应路径的#include指令将被插入到程序的当前位置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>#include &lt;Arrays\\Array.mqh&gt;</span></span></code></pre></div><h3 id="一组参数作为-property" tabindex="-1">一组参数作为 #property <a class="header-anchor" href="#一组参数作为-property" aria-label="Permalink to &quot;一组参数作为 #property&quot;">​</a></h3><p>若要向程序代码插入一组用于智能交易系统测试的参数，请运行此命令并选择一个 SET 文件 (相应的文件必须存储在 \\MQL5 目录中)。 含有所选文件正确路径的 #property 指令将插入到程序的当前位置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>#property tester_set &quot;\\\\\\Profiles\\\\\\Tester\\\\\\Moving Average.set&quot;</span></span></code></pre></div><h3 id="数据和时间为yyyy-mm-dd-hh-mm-ss-unix时间" tabindex="-1">数据和时间为YYYY.MM.DD hh:mm:ss / UNIX时间 <a class="header-anchor" href="#数据和时间为yyyy-mm-dd-hh-mm-ss-unix时间" aria-label="Permalink to &quot;数据和时间为YYYY.MM.DD hh:mm:ss / UNIX时间&quot;">​</a></h3><p>使用此命令以所需格式将日期和时间插入到代码中。命令选择打开一个交互式图表。在日历中选择日期和时间，它将以选定的格式插入到当前程序位置。</p><p><img src="`+D+'" alt="将日期和时间插入到代码中"></p><h3 id="颜色为clrcolor" tabindex="-1">颜色为clrColor <a class="header-anchor" href="#颜色为clrcolor" aria-label="Permalink to &quot;颜色为clrColor&quot;">​</a></h3><p>使用此命令以所需格式将颜色插入到代码中。点击该命令打开一个交互式调色板。从调色板中选择一种颜色，并以MQL5函数中使用的clrColor格式插入到当前位置。</p><p><img src="'+w+`" alt="将颜色插入到代码中"></p><h3 id="文件作为二元数组" tabindex="-1">文件作为二元数组 <a class="header-anchor" href="#文件作为二元数组" aria-label="Permalink to &quot;文件作为二元数组&quot;">​</a></h3><p>这个命令允许您以二元数组的形式向程序文本添加任何文件。运行这个命令并选择所需的文件(相应的文件必须位于 \\MQL5 目录)。char 数组将被插入到程序的当前位置。</p><p>此外，这个函数还允许您使用EA或指标传输图表模板：在程序代码中插入您的模板作为一个数组，然后使用 FileSave 函数将其保存到磁盘。在此之后，可以使用 ChartApplyTemplate 函数将模板应用到所需的图表上。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>+------------------------------------------------------------------+   </span></span>
<span class="line"><span>//| 脚本程序起始函数                                                   |   </span></span>
<span class="line"><span>//+------------------------------------------------------------------+   </span></span>
<span class="line"><span>void OnStart()   </span></span>
<span class="line"><span>  {   </span></span>
<span class="line"><span>//--- 一个模板文件作为二进制数组   </span></span>
<span class="line"><span>   unsigned char my_template[]=   </span></span>
<span class="line"><span>     {   </span></span>
<span class="line"><span>      0xFF,0xFE,0x3C, ... ,0x00 //缩短本例中的数据数组   </span></span>
<span class="line"><span>     };   </span></span>
<span class="line"><span>//--- 保存并应用模板   </span></span>
<span class="line"><span>   if(FileSave(&quot;my_template.tpl&quot;,my_template))   </span></span>
<span class="line"><span>     {   </span></span>
<span class="line"><span>      Print(&quot;自定义模板保存在 \\\\\\MQL5\\\\\\Files&quot;);   </span></span>
<span class="line"><span>      if(ChartApplyTemplate(0,&quot;\\\\\\Files\\\\\\my_template.tpl&quot;))   </span></span>
<span class="line"><span>         Print(&quot;自定义模板应用于当前图表&quot;);   </span></span>
<span class="line"><span>      else   </span></span>
<span class="line"><span>         Print(&quot;应用自定义模板失败&quot;);   </span></span>
<span class="line"><span>     }   </span></span>
<span class="line"><span>   else   </span></span>
<span class="line"><span>      Print(&quot;保存自定义模板失败&quot;);   </span></span>
<span class="line"><span>  }</span></span></code></pre></div><h3 id="csv-作为文本数组" tabindex="-1">CSV 作为文本数组 <a class="header-anchor" href="#csv-作为文本数组" aria-label="Permalink to &quot;CSV 作为文本数组&quot;">​</a></h3><p>若要在程序代码添加文本文件的数据，请运行该命令并选择 TXT 或 CSV 文件（文件必须在 \\MQL5 目录中）。包含文件数据所需维度的字符串数组将被插入到当前程序位置:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>string data[][3]=   </span></span>
<span class="line"><span>  {   </span></span>
<span class="line"><span>   {&quot;name1&quot;,&quot;value1&quot;},   </span></span>
<span class="line"><span>   {&quot;name2&quot;,&quot;value2&quot;},   </span></span>
<span class="line"><span>   {&quot;name3&quot;,&quot;value3&quot;}   </span></span>
<span class="line"><span>  };</span></span></code></pre></div><h2 id="convert" tabindex="-1">文本转换 <a class="header-anchor" href="#convert" aria-label="Permalink to &quot;文本转换{#convert}&quot;">​</a></h2><p>MetaEditor允许您轻松转换源数据的格式。打开所需的文件，选择文本并执行一条来自 <a href="/metaeditor/main_menu/main_menu_edit">编辑 ― 转换</a> 菜单的命令:</p><ul><li>ASCII 到 HEX</li><li>ASCII 到 Base64</li><li>ASCII 到二元数组</li><li>HEX 到 ASCII</li><li>Base64 到 ASCII</li></ul><h2 id="clipboard" tabindex="-1">剪贴板追踪 <a class="header-anchor" href="#clipboard" aria-label="Permalink to &quot;剪贴板追踪{#clipboard}&quot;">​</a></h2><p>剪贴板追踪管理器可通过启用快速访问最近使用的数据来提高源代码的便捷性。在任何源代码位置按下Alt+V，从菜单中选择任何之前复制的行，然后该行将被粘贴到适当的位置。</p><p><img src="`+Q+'" alt="要粘贴剪贴板历史中的行，请按下ALT+V或使用工具栏"></p><p>您可以通过使用相应的工具栏命令或通过<a href="/metaeditor/welcome/settings#common">编辑器设置</a>来启用/禁用追踪。</p>',88)]))}const J=h(F,[["render",V]]);export{z as __pageData,J as default};
