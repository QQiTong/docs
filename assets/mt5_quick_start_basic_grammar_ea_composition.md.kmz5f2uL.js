import{_ as s,c as t,aI as a,o as n}from"./chunks/framework.b7dag8kZ.js";const l="/assets/1.pkmpFy0h.png",g=JSON.parse('{"title":"EA主要3大结构","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://vite.dev/mt5_quick_start/basic_grammar/ea_composition"}],["meta",{"property":"og:title","content":"EA主要3大结构"}]]},"headers":[],"relativePath":"mt5_quick_start/basic_grammar/ea_composition.md","filePath":"mt5_quick_start/basic_grammar/ea_composition.md","lastUpdated":1745411614000}'),e={name:"mt5_quick_start/basic_grammar/ea_composition.md"};function h(p,i,o,k,r,d){return n(),t("div",null,i[0]||(i[0]=[a(`<h1 id="ea主要3大结构" tabindex="-1">EA主要3大结构 <a class="header-anchor" href="#ea主要3大结构" aria-label="Permalink to &quot;EA主要3大结构&quot;">​</a></h1><p><code>OnInit()</code>、<code>OnTick()</code>和<code>OnDeinit()</code>。这三个方法是EA运行的基石，相当于房子的三大支柱，支撑起整个自动化交易逻辑。</p><h2 id="一、ea三大核心方法总览" tabindex="-1">一、EA三大核心方法总览 <a class="header-anchor" href="#一、ea三大核心方法总览" aria-label="Permalink to &quot;一、EA三大核心方法总览&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法名</th><th>触发时机</th><th>核心作用</th><th>执行次数</th></tr></thead><tbody><tr><td><code>OnInit()</code></td><td>EA加载到图表时初始化</td><td>环境准备、参数设置、资源加载</td><td>仅1次（加载时）</td></tr><tr><td><code>OnTick()</code></td><td>每产生一个新报价时</td><td>实时行情处理、交易逻辑执行</td><td>高频触发（实时）</td></tr><tr><td><code>OnDeinit()</code></td><td>EA从图表卸载时</td><td>资源释放、清理工作</td><td>仅1次（卸载时）</td></tr></tbody></table><h2 id="二、oninit-初始化准备" tabindex="-1">二、<code>OnInit()</code>：初始化准备 <a class="header-anchor" href="#二、oninit-初始化准备" aria-label="Permalink to &quot;二、\`OnInit()\`：初始化准备&quot;">​</a></h2><p><strong>作用</strong>：在EA启动时完成初始设置，确保交易前的所有准备工作就绪。</p><ul><li><strong>典型操作</strong>： <ol><li><strong>参数初始化</strong>：设置交易品种、杠杆、初始资金等全局参数。</li><li><strong>指标加载</strong>：初始化技术指标（如MA、MACD），获取指标句柄。</li><li><strong>图表配置</strong>：修改K线显示样式（蜡烛图/竹节图）、颜色、时间周期。</li><li><strong>权限校验</strong>：检查账户余额、保证金、算法交易权限。</li></ol></li></ul><p><strong>代码示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;【OnInit】EA加载，开始准备工作...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(INIT_SUCCEEDED);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 初始化成功，EA开始运行  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>关键返回值</strong>：</p><ul><li><code>INIT_SUCCEEDED</code>：初始化成功，EA进入<code>OnTick()</code>循环。</li><li><code>INIT_FAILED</code>/<code>INIT_PARAMETERS_INCORRECT</code>：初始化失败，EA不执行任何交易。</li></ul><h2 id="三、ontick-实时交易逻辑" tabindex="-1">三、<code>OnTick()</code>：实时交易逻辑 <a class="header-anchor" href="#三、ontick-实时交易逻辑" aria-label="Permalink to &quot;三、\`OnTick()\`：实时交易逻辑&quot;">​</a></h2><p><strong>作用</strong>：每当市场产生新报价（Tick）时触发，是EA的核心逻辑执行区。</p><ul><li><strong>典型操作</strong>： <ol><li><strong>数据获取</strong>：读取实时价格、成交量、指标值（如当前买价<code>Bid</code>、卖价<code>Ask</code>）。</li><li><strong>条件判断</strong>：根据策略逻辑（如RSI超买超卖、均线交叉）决定开仓/平仓。</li><li><strong>交易操作</strong>：执行下单、止损止盈设置、仓位管理。</li><li><strong>风险控制</strong>：检查账户净值、保证金使用率，触发强制平仓逻辑。</li></ol></li></ul><p><strong>代码示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 示例：获取当前交易品种与买价  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   string symbol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bidPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolInfoDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(symbol, SYMBOL_BID);  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;【OnTick】品种 新报价：&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, symbol, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; Bid=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, bidPrice);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>高频触发机制</strong>：</p><ul><li>每收到一个Tick（报价更新）就执行一次，可能每秒触发多次（取决于市场活跃度）。</li><li>逻辑需高效，避免耗时操作（如复杂计算）导致卡顿。</li></ul><p><img src="`+l+`" alt=""></p><h2 id="四、ondeinit-资源释放" tabindex="-1">四、<code>OnDeinit()</code>：资源释放 <a class="header-anchor" href="#四、ondeinit-资源释放" aria-label="Permalink to &quot;四、\`OnDeinit()\`：资源释放&quot;">​</a></h2><p><strong>作用</strong>：EA卸载时释放占用的资源，确保程序优雅退出。</p><ul><li><strong>典型操作</strong>： <ol><li><strong>指标句柄释放</strong>：关闭OnInit中加载的指标，避免内存泄漏。</li><li><strong>临时文件删除</strong>：清理EA运行中生成的日志文件、缓存数据。</li><li><strong>交易停止</strong>：平仓所有持仓，停止未完成的订单。</li></ol></li></ul><p><strong>代码示例</strong>：</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OnDeinit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> reason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   Print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;【OnDeinit】EA卸载，开始清理资源...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>参数<code>reason</code></strong>：</p><ul><li>卸载原因（如用户手动移除、MT5关闭），通常无需特殊处理，统一释放资源即可。</li></ul>`,26)]))}const E=s(e,[["render",h]]);export{g as __pageData,E as default};
